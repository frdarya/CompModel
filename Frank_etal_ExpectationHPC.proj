// ta_Dump File v3.0 -- code v8.5.2.0 rev11409
LeabraProject .projects[0] { 
 Doc_Group @.docs = [0] {
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [2] {
  ControlPanel @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };

   ControlPanelMember_Group @.mbrs = [10] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
    ControlPanelMember @[2] { };
    ControlPanelMember @[3] { };
    ControlPanelMember @[4] { };
    ControlPanelMember @[5] { };
    ControlPanelMember @[6] { };
    ControlPanelMember @[7] { };
    ControlPanelMember @[8] { };
    ControlPanelMember @[9] { };
   };

   ControlPanelMethod_Group @.mths = [8] {
    ControlPanelMethod @[0] { };
    ControlPanelMethod @[1] { };
    ControlPanelMethod @[2] { };
    ControlPanelMethod @[3] { };
    ControlPanelMethod @[4] { };
    ControlPanelMethod @[5] { };
    ControlPanelMethod @[6] { };
    ControlPanelMethod @[7] { };
   };
  };
  ClusterRun @[1] { 
   ControlPanelMember_Group @.mbrs = [0] {
   };

   ControlPanelMethod_Group @.mths = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
 };

 ParamSet_Group @.active_params = [0] {
 };

 ArchivedParams_Group @.archived_params = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp[0] = [2] { 
   DataTable @[0] { 
    DataTableCols @.data = [3] {
     String_Data @[0] { };
     float_Data @[1] { };
     float_Data @[2] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[1] { 
    DataTableCols @.data = [3] {
     String_Data @[0] { };
     float_Data @[1] { };
     float_Data @[2] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp[1] = [6] { 
   DataTable @[0] { 
    DataTableCols @.data = [15] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     String_Data @[3] { };
     String_Data @[4] { };
     int_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     float_Data @[6] { };
     float_Data @[7] { };
     float_Data @[8] { };
     float_Data @[9] { };
     float_Data @[10] { };
     float_Data @[11] { };
     float_Data @[12] { };
     float_Data @[13] { };
     float_Data @[14] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[1] { 
    DataTableCols @.data = [8] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     float_Data @[2] { };
     float_Data @[3] { };
     float_Data @[4] { };
     float_Data @[5] { };
     float_Data @[6] { };
     float_Data @[7] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[2] { 
    DataTableCols @.data = [11] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     String_Data @[3] { };
     float_Data @[4] { };
     float_Data @[5] { };
     float_Data @[6] { };
     float_Data @[7] { };
     float_Data @[8] { };
     float_Data @[9] { };
     float_Data @[10] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[3] { 
    DataTableCols @.data = [11] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     String_Data @[3] { };
     float_Data @[4] { };
     float_Data @[5] { };
     float_Data @[6] { };
     float_Data @[7] { };
     float_Data @[8] { };
     float_Data @[9] { };
     float_Data @[10] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[4] { 
    DataTableCols @.data = [2] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[5] { 
    DataTableCols @.data = [8] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     float_Data @[2] { };
     float_Data @[3] { };
     float_Data @[4] { };
     float_Data @[5] { };
     float_Data @[6] { };
     float_Data @[7] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp[2] { 
  };
 };

 Program_TopGroup @.programs = [0] {
  Program_Group @.gp[0] = [10] { 
   Program @[0] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [3] {
     If @[0] { 
      ProgEl_List @.true_code = [1] {
       NetCounterInit @[0] { };
      };
     };
     Else @[1] { 
      ProgEl_List @.true_code = [1] {
       MemberAssign @[0] { };
      };
     };
     WhileLoop @[2] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [4] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	 ProgArg @[3] { };
	};
       };
       NetCounterIncr @[1] { };
      };
     };
    };
   };
   Program @[1] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     RndSeed @[0] { };
    };

    ProgVar_List @.objs_vars = [1] {
     ProgVar @[0] { };
    };

    ProgType_List @.types = [1] {
     DynEnumType @[0] { 
      DynEnumItem_List @.enums = [2] {
       DynEnumItem @[0] { };
       DynEnumItem @[1] { };
      };
     };
    };

    ProgVar_List @.args = [4] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
    };

    ProgVar_List @.vars = [11] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
     ProgVar @[6] { };
     ProgVar @[7] { };
     ProgVar @[8] { };
     ProgVar @[9] { };
     ProgVar @[10] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [6] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     If @[3] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     Else @[4] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     IfGuiPrompt @[5] { 
      ProgEl_List @.yes_code = [3] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[2] { };
      };
     };
    };

    ProgEl_List @.prog_code = [7] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MemberAssign @[2] { };
     If @[3] { 
      ProgEl_List @.true_code = [3] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[2] { };
      };
     };
     AssignExpr @[4] { };
     WhileLoop @[5] { 
      ProgEl_List @.loop_code = [4] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       If @[1] { 
	ProgEl_List @.true_code = [45] {
	 MethodCall @[0] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	 };
	 ProgramCall @[1] { 
	  ProgArg_List @.prog_args = [3] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	   ProgArg @[2] { };
	  };
	 };
	 AssignExpr @[2] { };
	 VarIncr @[3] { };
	 VarIncr @[4] { };
	 VarIncr @[5] { };
	 VarIncr @[6] { };
	 VarIncr @[7] { };
	 MethodCall @[8] { 
	  ProgArg_List @.meth_args = [4] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	   ProgArg @[2] { };
	   ProgArg @[3] { };
	  };
	 };
	 MethodCall @[9] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	 };
	 ProgramCall @[10] { 
	  ProgArg_List @.prog_args = [3] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	   ProgArg @[2] { };
	  };
	 };
	 AssignExpr @[11] { };
	 VarIncr @[12] { };
	 VarIncr @[13] { };
	 VarIncr @[14] { };
	 VarIncr @[15] { };
	 VarIncr @[16] { };
	 MethodCall @[17] { 
	  ProgArg_List @.meth_args = [4] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	   ProgArg @[2] { };
	   ProgArg @[3] { };
	  };
	 };
	 MethodCall @[18] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	 };
	 ProgramCall @[19] { 
	  ProgArg_List @.prog_args = [3] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	   ProgArg @[2] { };
	  };
	 };
	 AssignExpr @[20] { };
	 VarIncr @[21] { };
	 VarIncr @[22] { };
	 VarIncr @[23] { };
	 VarIncr @[24] { };
	 VarIncr @[25] { };
	 MethodCall @[26] { 
	  ProgArg_List @.meth_args = [4] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	   ProgArg @[2] { };
	   ProgArg @[3] { };
	  };
	 };
	 MethodCall @[27] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	 };
	 ProgramCall @[28] { 
	  ProgArg_List @.prog_args = [3] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	   ProgArg @[2] { };
	  };
	 };
	 AssignExpr @[29] { };
	 VarIncr @[30] { };
	 VarIncr @[31] { };
	 VarIncr @[32] { };
	 VarIncr @[33] { };
	 VarIncr @[34] { };
	 MethodCall @[35] { 
	  ProgArg_List @.meth_args = [4] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	   ProgArg @[2] { };
	   ProgArg @[3] { };
	  };
	 };
	 MethodCall @[36] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	 };
	 ProgramCall @[37] { 
	  ProgArg_List @.prog_args = [3] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	   ProgArg @[2] { };
	  };
	 };
	 AssignExpr @[38] { };
	 VarIncr @[39] { };
	 VarIncr @[40] { };
	 VarIncr @[41] { };
	 VarIncr @[42] { };
	 VarIncr @[43] { };
	 MethodCall @[44] { 
	  ProgArg_List @.meth_args = [4] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	   ProgArg @[2] { };
	   ProgArg @[3] { };
	  };
	 };
	};
       };
       NetCounterIncr @[2] { };
       IfBreak @[3] { };
      };
     };
     MethodCall @[6] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @[2] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [12] {
     MemberAssign @[0] { };
     NetCounterInit @[1] { };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[5] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       If @[1] { 
	ProgEl_List @.true_code = [1] {
	 AssignExpr @[0] { };
	};
       };
      };
     };
     If @[6] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[9] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[10] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[11] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @[3] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [8] {
     NetCounterInit @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     WhileLoop @[2] { 
      ProgEl_List @.loop_code = [3] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       NetCounterIncr @[1] { };
       MethodCall @[2] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     If @[5] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     ProgramCall @[6] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[7] { };
    };
   };
   Program @[4] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [11] {
     NetCounterInit @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[2] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     If @[4] { 
      ProgEl_List @.true_code = [1] {
       AssignExpr @[0] { };
      };
     };
     Else @[5] { 
      ProgEl_List @.true_code = [1] {
       AssignExpr @[0] { };
      };
     };
     WhileLoop @[6] { 
      ProgEl_List @.loop_code = [4] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       NetCounterIncr @[1] { };
       IfContinue @[2] { };
       IfBreak @[3] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     If @[8] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     If @[9] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     NetUpdateView @[10] { };
    };
   };
   Program @[5] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @[6] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     LayerWriter @[0] { 
      LayerDataEl_List @.layer_data = [3] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
       LayerWriterEl @[2] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [1] {
     ProgVar @[0] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [0] {
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @[7] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [10] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
       NetMonItem @[8] { };
       NetMonItem @[9] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [1] {
     ProgVar @[0] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @[8] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [8] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [1] {
     ProgVar @[0] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [4] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [6] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @[9] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [6] {
     If @[0] { 
      ProgEl_List @.true_code = [1] {
       ReturnExpr @[0] { };
      };
     };
     MiscCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MiscCall @[2] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
  };
  Program_Group @.gp[1] = [7] { 
   Program @[0] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [3] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
    };

    ProgVar_List @.vars = [11] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
     ProgVar @[6] { };
     ProgVar @[7] { };
     ProgVar @[8] { };
     ProgVar @[9] { };
     ProgVar @[10] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [22] {
     NetCounterInit @[0] { };
     MemberAssign @[1] { };
     If @[2] { 
      ProgEl_List @.true_code = [8] {
       MemberAssign @[0] { };
       MemberAssign @[1] { };
       MemberAssign @[2] { };
       MemberAssign @[3] { };
       MemberAssign @[4] { };
       MemberAssign @[5] { };
       MemberAssign @[6] { };
       MemberAssign @[7] { };
      };
     };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetDataLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [3] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	};
       };
      };
     };
     If @[7] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[9] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[10] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[11] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     Comment @[12] { };
     MemberAssign @[13] { };
     MemberAssign @[14] { };
     MemberAssign @[15] { };
     MemberAssign @[16] { };
     MemberAssign @[17] { };
     MemberAssign @[18] { };
     MemberAssign @[19] { };
     MemberAssign @[20] { };
     MemberAssign @[21] { };
    };
   };
   Program @[1] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [3] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [8] {
     NetCounterInit @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     WhileLoop @[2] { 
      ProgEl_List @.loop_code = [3] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [3] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	};
       };
       NetCounterIncr @[1] { };
       MethodCall @[2] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     If @[5] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     ProgramCall @[6] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[7] { };
    };
   };
   Program @[2] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [3] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [12] {
     NetCounterInit @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[2] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     If @[4] { 
      ProgEl_List @.true_code = [1] {
       AssignExpr @[0] { };
      };
     };
     Else @[5] { 
      ProgEl_List @.true_code = [1] {
       AssignExpr @[0] { };
      };
     };
     WhileLoop @[6] { 
      ProgEl_List @.loop_code = [4] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       NetCounterIncr @[1] { };
       IfContinue @[2] { };
       IfBreak @[3] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     If @[9] { 
      ProgEl_List @.true_code = [0] {
      };
     };
     If @[10] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     NetUpdateView @[11] { };
    };
   };
   Program @[3] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @[4] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     LayerWriter @[0] { 
      LayerDataEl_List @.layer_data = [3] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
       LayerWriterEl @[2] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [1] {
     ProgVar @[0] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MemberAssign @[3] { };
    };
   };
   Program @[5] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [11] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
       NetMonItem @[8] { };
       NetMonItem @[9] { };
       NetMonItem @[10] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [1] {
     ProgVar @[0] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [6] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     AddNewDataRow @[4] { };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
    };
   };
   Program @[6] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [2] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [1] {
     ProgVar @[0] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
    UserDataItem @[1] { };
    UserDataItem @[2] { };
    UserDataItem @[3] { };
    UserDataItem @[4] { };
    UserDataItem @[5] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @[0] { };
    PanelViewer @[1] { };
    T3PanelViewer @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };

     T3Panel_List @.panels = [1] {
      T3Panel @[0] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @[0] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [1] {
	  ScaleRange @[0] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
      UserDataItem @[2] { };
      UserDataItem @[3] { };
      UserDataItem @[4] { };
      UserDataItem @[5] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [1] {
  LeabraNetwork @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
    UserDataItem @[1] { };
    UserDataItem @[2] { };
    UserDataItem @[3] { };
    UserDataItem @[4] { };
    UserDataItem @[5] { };
    UserDataItem @[6] { };
    UserDataItem @[7] { };
    UserDataItem @[8] { };
    UserDataItem @[9] { };
    UserDataItem @[10] { };
    UserDataItem @[11] { };
    UserDataItem @[12] { };
    UserDataItem @[13] { };
    UserDataItem @[14] { };
    UserDataItem @[15] { };
    UserDataItem @[16] { };
    UserDataItem @[17] { };
    UserDataItem @[18] { };
    UserDataItem @[19] { };
    UserDataItem @[20] { };
    UserDataItem @[21] { };
    UserDataItem @[22] { };
   };

   BaseSpec_Group @.specs = [1] {
    LeabraLayerSpec @[0] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    BaseSpec_Group @.gp[0] = [4] { 
     LeabraUnitSpec @[0] { 
      BaseSpec_Group @.children = [0] {
      };

      Schedule @.noise_sched = [0] {
      };
     };
     HippoEncoderConSpec @[1] { 
      BaseSpec_Group @.children = [6] {
       HippoEncoderConSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @[1] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @[2] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @[3] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       HippoEncoderConSpec @[4] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraConSpec @[5] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     XCalCHLConSpec @[2] { 
      BaseSpec_Group @.children = [5] {
       LeabraBiasSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @[1] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @[2] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @[3] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       XCalCHLConSpec @[4] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     ThetaPhaseLayerSpec @[3] { 
      BaseSpec_Group @.children = [4] {
       ECoutLayerSpec @[0] { 
	BaseSpec_Group @.children = [1] {
	 ECinLayerSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };
	 };
	};
       };
       LeabraLayerSpec @[1] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       CA3LayerSpec @[2] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       CA1LayerSpec @[3] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     BaseSpec_Group @.gp[0] = [5] { 
      FullPrjnSpec @[0] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      OneToOnePrjnSpec @[1] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      GpOneToOnePrjnSpec @[2] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      UniformRndPrjnSpec @[3] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      UniformRndPrjnSpec @[4] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
   };

   Layer_Group @.layers = [1] {
    LeabraLayer @[0] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [54] {
     };
    };
    Layer_Group @.gp[0] = [5] { 
     LeabraLayer @[0] { 
      Projection_Group @.projections = [2] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
      };

      Unit_Group @.units = [54] {
      };
     };
     LeabraLayer @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
       UserDataItem @[1] { };
      };

      Projection_Group @.projections = [1] {
       LeabraPrjn @[0] { };
      };

      Unit_Group @.units = [54] {
      };
     };
     LeabraLayer @[2] { 
      Projection_Group @.projections = [1] {
       LeabraPrjn @[0] { };
      };

      Unit_Group @.units = [400] {
      };
     };
     LeabraLayer @[3] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
      };

      Unit_Group @.units = [80] {
      };
     };
     LeabraLayer @[4] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
      };

      Unit_Group @.units = [100] {
      };
     };
    };
   };

   Weights_List @.weights = [0] {
   };
  };
 };
};
LeabraProject .projects[0] {
 name="Frank_etal_ExpectationHPC";
 desc="


";
 tags=;
 version {
  major=0;
  minor=0;
  step=0;
 };
 author=;
 email=;
 license {
  license=NO_LIC;
  owner_name=;
  org=;
  year="2011";
  custom=;
 };
 pub_cite=;
 wiki {wiki="": page_name="": };
 docs {
  name="docs";
  el_typ=taDoc;
  el_def=0;
 };
 wizards {
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {name="NO_CLIP": value=1: val_type_fixed=0: };
   };
   name="LeabraWizard_1";
  };
 };
 ctrl_panels {
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  master_and_clones=0;
  ControlPanel @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="ControlPanel";
   cp_state=REGULAR;
   updt_while_running=0;
   desc="Control panel for Hippocampus Simulation";
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     label="network";
     short_label=1;
     cust_label=0;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
     cust_desc=1;
     base=.programs.gp[0][0].args[0]$$;
     mbr=ProgVar::object_val;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[1] {
     label="train_patterns";
     short_label=0;
     cust_label=1;
     desc="datatable with training patterns -- not used by this program, but passed to train program";
     cust_desc=1;
     base=.programs.gp[0][0].args[1]$$;
     mbr=ProgVar::object_val;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[2] {
     label="test_patterns";
     short_label=0;
     cust_label=1;
     desc=;
     cust_desc=0;
     base=.programs.gp[0][1].vars[7]$$;
     mbr=ProgVar::object_val;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[3] {
     label="writeout_filename";
     short_label=0;
     cust_label=1;
     desc=;
     cust_desc=0;
     base=.programs.gp[0][1].vars[9]$$;
     mbr=ProgVar::string_val;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[4] {
     label="num_trials_per_epoch";
     short_label=0;
     cust_label=1;
     desc=;
     cust_desc=0;
     base=.programs.gp[0][2].vars[5]$$;
     mbr=ProgVar::int_val;
     data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[5] {
     label="num_epochs_per_batch";
     short_label=0;
     cust_label=1;
     desc="maximum number of epochs to run";
     cust_desc=1;
     base=.programs.gp[0][1].vars[0]$$;
     mbr=ProgVar::int_val;
     data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[6] {
     label="num_batches";
     short_label=0;
     cust_label=1;
     desc="maximum number of batch runs to perform";
     cust_desc=1;
     base=.programs.gp[0][0].vars[2]$$;
     mbr=ProgVar::int_val;
     data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[7] {
     label="run_test_during_training";
     short_label=0;
     cust_label=1;
     desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
     cust_desc=1;
     base=.programs.gp[0][1].vars[10]$$;
     mbr=ProgVar::bool_val;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[8] {
     label="use_low_inhibition_at_test";
     short_label=0;
     cust_label=1;
     desc=;
     cust_desc=0;
     base=.programs.gp[1][0].vars[2]$$;
     mbr=ProgVar::bool_val;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[9] {
     label="max_test_cycles";
     short_label=0;
     cust_label=1;
     desc=;
     cust_desc=0;
     base=.programs.gp[1][0].args[2]$$;
     mbr=ProgVar::int_val;
     data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
    ControlPanelMethod @[0] {
     label="Batch_Init";
     short_label=0;
     cust_label=1;
     desc=" run init_code, global variables retain current values unless reset in the init_code";
     cust_desc=0;
     base=.programs.gp[0][0]$$;
     mth=Program::Init;
    };
    ControlPanelMethod @[1] {
     label="Batch_Run";
     short_label=0;
     cust_label=1;
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.programs.gp[0][0]$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[2] {
     label="Batch_Step";
     short_label=0;
     cust_label=1;
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.programs.gp[0][0]$;
     mth=Program::Step_Gui;
    };
    ControlPanelMethod @[3] {
     label="Batch_Stop";
     short_label=0;
     cust_label=1;
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.programs.gp[0][0]$;
     mth=Program::Stop;
    };
    ControlPanelMethod @[4] {
     label="Test_Init";
     short_label=0;
     cust_label=1;
     desc=" run init_code, global variables retain current values unless reset in the init_code";
     cust_desc=0;
     base=.programs.gp[1][0]$$;
     mth=Program::Init;
    };
    ControlPanelMethod @[5] {
     label="Test_Run";
     short_label=0;
     cust_label=1;
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.programs.gp[1][0]$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[6] {
     label="Test_Step";
     short_label=0;
     cust_label=1;
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.programs.gp[1][0]$;
     mth=Program::Step_Gui;
    };
    ControlPanelMethod @[7] {
     label="Test_Stop";
     short_label=0;
     cust_label=1;
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.programs.gp[1][0]$;
     mth=Program::Stop;
    };
   };
  };
  ClusterRun @[1] {
   name="ClusterRun";
   cp_state=REGULAR;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   search_algos {
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   use_search_algo=0;
   cur_search_algo=NULL;
   set_proj_name=0;
   proj_name=;
   auto_updt_interval=10;
   auto_updt_timeout=30;
   cluster=;
   clusters=;
   users=;
   last_submit_time=;
   notes=;
   label=;
   extra_files=;
   svn_repo=;
   repo_url=;
   queue=;
   run_time=;
   exe_cmd="emergent7";
   ram_gb=0;
   n_threads=1;
   use_cuda=0;
   use_mpi=0;
   mpi_nodes=10;
   mpi_per_node=1;
   parallel_batch=0;
   pb_batches=10;
   pb_n_batches_per=1;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=0;
  };
 };
 active_params {
  name="active_params";
  el_typ=ParamSet;
  el_def=0;
  master_and_clones=0;
 };
 archived_params {
  name="archived_params";
  el_typ=ParamSet;
  el_def=0;
  master_and_clones=0;
 };
 data {
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="Train_54";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [4] "a_targ";"b_targ";"c_targ";"d_targ";      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 1;54;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=5;
      matrix_col_width=10;
      ar {
       name="ar";
      [1 54 4] 0;1;0;0;0;0;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
0;1;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;1;0;0;0;0;
0;0.89999998;0.89999998;0.89999998;0;1;1;0;1;0;
0;0;0;1;0;0;1;0;0;1;
0;1;0;0;1;0;0;0;0;0;
1;1;1;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.89999998;0.89999998;0.89999998;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;0;1;0;
0;1;0;0;0;0;1;0;1;1;
1;0;0;0;1;0;0;0;0;1;
0;0;0;0;0;1;0;0;0;0.89999998;
0.89999998;0.89999998;0;0;0;0;0;0;0;1;
1;1;0;0;1;0;1;1;0;0;
0;0;1;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0.89999998;0.89999998;0.89999998;0;0;0;      };
     };
     float_Data @[2] {
      name="EC_out";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 1;54;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=6;
      matrix_col_width=10;
      ar {
       name="ar";
      [1 54 4] 0;1;0;0;0;0;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
0;1;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;1;0;0;0;0;
0;0.89999998;0.89999998;0.89999998;0;1;1;0;1;0;
0;0;0;1;0;0;1;0;0;1;
0;1;0;0;1;0;0;0;0;0;
1;1;1;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.89999998;0.89999998;0.89999998;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;0;1;0;
0;1;0;0;0;0;1;0;1;1;
1;0;0;0;1;0;0;0;0;1;
0;0;0;0;0;1;0;0;0;0.89999998;
0.89999998;0.89999998;0;0;0;0;0;0;0;1;
1;1;0;0;1;0;1;1;0;0;
0;0;1;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0.89999998;0.89999998;0.89999998;0;0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [4] 0;1;2;3;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[1] {
    name="Test_54";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [40] "a_targ_e";"a_f1_e";"a_f2_e";"a_f3_e";"a_f4_e";"a_targ_u";"a_f1_u";"a_f2_u";"a_f3_u";"a_f4_u";
"b_targ_e";"b_f1_e";"b_f2_e";"b_f3_e";"b_f4_e";"b_targ_u";"b_f1_u";"b_f2_u";"b_f3_u";"b_f4_u";
"c_targ_e";"c_f1_e";"c_f2_e";"c_f3_e";"c_f4_e";"c_targ_u";"c_f1_u";"c_f2_u";"c_f3_u";"c_f4_u";
"d_targ_e";"d_f1_e";"d_f2_e";"d_f3_e";"d_f4_e";"d_targ_u";"d_f1_u";"d_f2_u";"d_f3_u";"d_f4_u";
      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 1;54;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=5;
      matrix_col_width=10;
      ar {
       name="ar";
      [1 54 40] 0;1;0;0;0;0;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
0;1;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;1;0;0;0;0;
0;0.89999998;0.89999998;0.89999998;0;1;0;0;0;0;
0;0;0;0;1;0;1;0;0;0;
1;0;1;0;0;1;0;1;0;0;
0;1;1;0;1;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;1;
0;0;0;0;0;0.89999998;0.89999998;0.89999998;0;1;
0;0;0;0;0;0;1;1;0;0;
1;1;1;0;0;1;0;0;0;1;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;0;0;1;0;0;0;0;0;0.89999998;
0.89999998;0.89999998;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;1;0;
1;0;0;0;0;1;0;1;0;0;
1;0;0;0;1;0;1;0;0;1;
0;0;1;0;0;0;0;0;1;0;
0;0;0;0.89999998;0.89999998;0.89999998;1;1;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
0;1;0;0;0;1;0;1;1;0;
0;0;0;0;0;0;0;0.89999998;0.89999998;0.89999998;
0;1;0;0;0;0;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
0;1;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;1;0;0;0.89999998;0.89999998;
0.89999998;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;1;0;0;0;
1;0;1;0;0;1;0;1;0;0;
0;1;1;0;1;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;1;
0;0;0.89999998;0.89999998;0.89999998;0;0;0;0;1;
0;0;0;0;0;0;1;1;0;0;
1;1;1;0;0;1;0;0;0;1;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;0;0;1;0;0;0.89999998;0.89999998;0.89999998;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;1;0;
1;0;0;0;0;1;0;1;0;0;
1;0;0;0;1;0;1;0;0;1;
0;0;1;0;0;0;0;0;1;0;
0.89999998;0.89999998;0.89999998;0;0;0;1;1;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
0;1;0;0;0;1;0;1;1;0;
0;0;0;0;0.89999998;0.89999998;0.89999998;0;0;0;
0;1;1;0;1;0;0;0;0;1;
0;0;1;0;0;1;0;1;0;0;
1;0;0;0;0;0;1;1;1;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.89999998;0.89999998;
0.89999998;0;0;0;0;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;1;
0;1;0;0;1;0;0;0;0;0;
1;1;0;0;0;0;1;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.89999998;0.89999998;0.89999998;0;0;0;1;0;
1;0;1;0;1;0;0;0;0;0;
1;0;0;0;0;1;1;0;1;0;
0;0;0;0;0;1;1;0;0;1;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.89999998;0.89999998;0.89999998;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;1;1;0;1;
1;0;1;0;0;1;0;0;0;0;
1;0;0;0;1;0;0;0;0;1;
0;0;0;0;0;0;1;0;0;0;
0.89999998;0.89999998;0.89999998;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;1;0;0;
0;1;0;1;1;0;1;0;0;1;
0;0;0;0;1;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;1;
1;0;0;0;0.89999998;0.89999998;0.89999998;0;0;0;
0;1;1;0;1;0;0;0;0;1;
0;0;1;0;0;1;0;1;0;0;
1;0;0;0;0;0;1;1;1;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.89999998;0.89999998;0.89999998;0;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;1;
0;1;0;0;1;0;0;0;0;0;
1;1;0;0;0;0;1;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.89999998;0.89999998;0.89999998;1;0;
1;0;1;0;1;0;0;0;0;0;
1;0;0;0;0;1;1;0;1;0;
0;0;0;0;0;1;1;0;0;1;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.89999998;
0.89999998;0.89999998;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;1;1;0;1;
1;0;1;0;0;1;0;0;0;0;
1;0;0;0;1;0;0;0;0;1;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0.89999998;0.89999998;0.89999998;0;0;0;0;
0;0;0;0;1;0;0;1;0;0;
0;1;0;1;1;0;1;0;0;1;
0;0;0;0;1;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;0.89999998;0.89999998;0.89999998;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;0;
1;0;0;1;0;0;0;0;1;0;
1;1;1;0;0;0;1;0;0;0;
0;1;0;0;0;0;0;1;0;0;
0;0.89999998;0.89999998;0.89999998;0;0;1;0;0;0;
0;0;0;1;1;1;0;1;0;0;
0;0;0;0;1;0;0;1;0;0;
0;0;0;0;1;0;1;0;0;0;
1;0;0;0;0;1;0;0;0;0;
0;1;0;0;0;0.89999998;0.89999998;0.89999998;0;0;
1;0;1;0;1;0;0;0;1;1;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;1;1;0;1;0;
1;0;0;0;1;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0.89999998;
0.89999998;0.89999998;0;1;1;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;0;1;1;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0.89999998;0.89999998;0.89999998;1;0;1;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;1;0;1;1;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0.89999998;0.89999998;0.89999998;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;0;
1;0;0;1;0;0;0;0;1;0;
1;1;1;0;0;0;1;0;0;0;
0;1;0;0;0;0;0;1;0.89999998;0.89999998;
0.89999998;0;0;0;0;0;1;0;0;0;
0;0;0;1;1;1;0;1;0;0;
0;0;0;0;1;0;0;1;0;0;
0;0;0;0;1;0;1;0;0;0;
1;0;0;0;0;1;0;0;0;0;
0;1;0.89999998;0.89999998;0.89999998;0;0;0;0;0;
1;0;1;0;1;0;0;0;1;1;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;1;1;0;1;0;
1;0;0;0;1;0;0;0;0;0;
0;0;0;1;0;0;0.89999998;0.89999998;0.89999998;0;
0;0;0;1;1;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;0;1;1;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;1;0;0;
0.89999998;0.89999998;0.89999998;0;0;0;1;0;1;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;1;0;1;1;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0.89999998;0.89999998;0.89999998;0;0;0;
0;0;0;0;0;0;0;1;1;1;
0;0;1;0;1;1;0;0;0;0;
1;0;1;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0.89999998;0.89999998;
0.89999998;0;0;0;0;0;0;1;0;0;
0;1;1;1;0;0;1;0;1;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;1;0.89999998;0.89999998;0.89999998;0;0;0;0;0;
0;0;0;0;0;1;0;1;0;0;
1;0;1;1;0;0;0;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;1;0;0;0;0;0;1;1;0;
0;0;0;0;1;0;0.89999998;0.89999998;0.89999998;0;
0;0;0;1;1;0;1;1;0;1;
0;1;0;0;0;0;0;1;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0.89999998;0.89999998;0.89999998;0;0;0;0;1;0;0;
1;1;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;0;0;0;0;0;1;0;1;0;
0;0;0;0;0.89999998;0.89999998;0.89999998;0;0;0;
0;0;0;0;0;0;0;1;1;1;
0;0;1;0;1;1;0;0;0;0;
1;0;1;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;0;
0;0.89999998;0.89999998;0.89999998;0;0;0;1;0;0;
0;1;1;1;0;0;1;0;1;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;1;0;0;0;0.89999998;0.89999998;0.89999998;0;0;
0;0;0;0;0;1;0;1;0;0;
1;0;1;1;0;0;0;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;1;0;0;0;0;0;1;1;0;
0;0;0;0;1;0;0;0;0;0.89999998;
0.89999998;0.89999998;0;1;1;0;1;1;0;1;
0;1;0;0;0;0;0;1;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0.89999998;0.89999998;0.89999998;0;1;0;0;
1;1;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;0;0;0;0;0;1;0;1;0;
0;0;0;0;0;0;0;0.89999998;0.89999998;0.89999998;
      };
     };
     float_Data @[2] {
      name="EC_out";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 1;54;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=6;
      matrix_col_width=10;
      ar {
       name="ar";
      [1 54 40] 0;1;0;0;0;0;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
0;1;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;1;0;0;0;
1;0;1;0;0;1;0;1;0;0;
0;1;1;0;1;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;1;1;0;0;
1;1;1;0;0;1;0;0;0;1;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;0;0;1;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;1;0;
1;0;0;0;0;1;0;1;0;0;
1;0;0;0;1;0;1;0;0;1;
0;0;1;0;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
0;1;0;0;0;1;0;1;1;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;1;0;
1;0;1;1;0;0;1;0;1;0;
0;1;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;1;0;0;0;
1;0;1;0;0;1;0;1;0;0;
0;1;1;0;1;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;1;1;0;0;
1;1;1;0;0;1;0;0;0;1;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;0;0;1;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;1;0;
1;0;0;0;0;1;0;1;0;0;
1;0;0;0;1;0;1;0;0;1;
0;0;1;0;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
0;1;0;0;0;1;0;1;1;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;0;1;0;0;0;0;1;
0;0;1;0;0;1;0;1;0;0;
1;0;0;0;0;0;1;1;1;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;1;
0;1;0;0;1;0;0;0;0;0;
1;1;0;0;0;0;1;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;0;1;0;1;0;0;0;0;0;
1;0;0;0;0;1;1;0;1;0;
0;0;0;0;0;1;1;0;0;1;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;1;1;0;1;
1;0;1;0;0;1;0;0;0;0;
1;0;0;0;1;0;0;0;0;1;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;1;0;0;
0;1;0;1;1;0;1;0;0;1;
0;0;0;0;1;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;0;0;0;
0;1;1;0;1;0;0;0;0;1;
0;0;1;0;0;1;0;1;0;0;
1;0;0;0;0;0;1;1;1;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;1;1;0;0;1;0;0;1;
0;1;0;0;1;0;0;0;0;0;
1;1;0;0;0;0;1;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;0;1;0;1;0;0;0;0;0;
1;0;0;0;0;1;1;0;1;0;
0;0;0;0;0;1;1;0;0;1;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;1;1;0;1;
1;0;1;0;0;1;0;0;0;0;
1;0;0;0;1;0;0;0;0;1;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;1;0;0;
0;1;0;1;1;0;1;0;0;1;
0;0;0;0;1;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;0;
1;0;0;1;0;0;0;0;1;0;
1;1;1;0;0;0;1;0;0;0;
0;1;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;1;1;0;1;0;0;
0;0;0;0;1;0;0;1;0;0;
0;0;0;0;1;0;1;0;0;0;
1;0;0;0;0;1;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;1;0;1;0;0;0;1;1;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;1;1;0;1;0;
1;0;0;0;1;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;1;1;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;0;1;1;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;1;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;1;0;1;1;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;0;
1;0;0;1;0;0;0;0;1;0;
1;1;1;0;0;0;1;0;0;0;
0;1;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;1;1;0;1;0;0;
0;0;0;0;1;0;0;1;0;0;
0;0;0;0;1;0;1;0;0;0;
1;0;0;0;0;1;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;1;0;1;0;0;0;1;1;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;1;1;0;1;0;
1;0;0;0;1;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;1;1;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;0;1;1;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;1;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;1;0;1;1;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
0;0;1;0;1;1;0;0;0;0;
1;0;1;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;1;1;1;0;0;1;0;1;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;1;0;0;
1;0;1;1;0;0;0;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;1;0;0;0;0;0;1;1;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;1;1;0;1;1;0;1;
0;1;0;0;0;0;0;1;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
1;1;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;0;0;0;0;0;1;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
0;0;1;0;1;1;0;0;0;0;
1;0;1;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;1;1;1;0;0;1;0;1;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;1;0;0;
1;0;1;1;0;0;0;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;1;0;0;0;0;0;1;1;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;1;1;0;1;1;0;1;
0;1;0;0;0;0;0;1;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
1;1;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;0;0;0;0;0;1;0;1;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [40] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_71";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [4] 199;199;199;199;      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_72";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [4] 9;9;9;9;      };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_73";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [4] 0;1;2;3;      };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [4] "b_targ";"d_targ";"c_targ";"a_targ";      };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [4] ;;;;      };
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_74";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="phase_no";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [4] 2;2;2;2;      };
     };
     float_Data @[6] {
      name="minus_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
      ar {
       name="ar";
      [4] 80;80;80;80;      };
     };
     float_Data @[7] {
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [4] 2.9969344;2.3882611;2.0031095;2.3430121;      };
     };
     float_Data @[8] {
      name="ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [4] 0;0;0;0;      };
     };
     float_Data @[9] {
      name="Input_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
      ar {
       name="ar";
      [4] 0.26111105;0.26111105;0.26111105;0.26111105;      };
     };
     float_Data @[10] {
      name="EC_in_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
      ar {
       name="ar";
      [4] 0.19171409;0.20696586;0.20746009;0.22302715;      };
     };
     float_Data @[11] {
      name="EC_out_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       name="ar";
      [4] 0.26111105;0.26111105;0.26111105;0.26111105;      };
     };
     float_Data @[12] {
      name="DG_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
      ar {
       name="ar";
      [4] 0.0070526195;0.0048107244;0.0048356052;0.0048539434;      };
     };
     float_Data @[13] {
      name="CA3_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
      ar {
       name="ar";
      [4] 0.064517155;0.040929981;0.042897295;0.086215936;      };
     };
     float_Data @[14] {
      name="CA1_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
      ar {
       name="ar";
      [4] 0.14600715;0.17598853;0.15414722;0.17154141;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [4] 0;1;2;3;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[1] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_73";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [2000] 0;0;0;0;0;0;0;0;0;0;
1;1;1;1;1;1;1;1;1;1;
2;2;2;2;2;2;2;2;2;2;
3;3;3;3;3;3;3;3;3;3;
4;4;4;4;4;4;4;4;4;4;
5;5;5;5;5;5;5;5;5;5;
6;6;6;6;6;6;6;6;6;6;
7;7;7;7;7;7;7;7;7;7;
8;8;8;8;8;8;8;8;8;8;
9;9;9;9;9;9;9;9;9;9;
10;10;10;10;10;10;10;10;10;10;
11;11;11;11;11;11;11;11;11;11;
12;12;12;12;12;12;12;12;12;12;
13;13;13;13;13;13;13;13;13;13;
14;14;14;14;14;14;14;14;14;14;
15;15;15;15;15;15;15;15;15;15;
16;16;16;16;16;16;16;16;16;16;
17;17;17;17;17;17;17;17;17;17;
18;18;18;18;18;18;18;18;18;18;
19;19;19;19;19;19;19;19;19;19;
20;20;20;20;20;20;20;20;20;20;
21;21;21;21;21;21;21;21;21;21;
22;22;22;22;22;22;22;22;22;22;
23;23;23;23;23;23;23;23;23;23;
24;24;24;24;24;24;24;24;24;24;
25;25;25;25;25;25;25;25;25;25;
26;26;26;26;26;26;26;26;26;26;
27;27;27;27;27;27;27;27;27;27;
28;28;28;28;28;28;28;28;28;28;
29;29;29;29;29;29;29;29;29;29;
30;30;30;30;30;30;30;30;30;30;
31;31;31;31;31;31;31;31;31;31;
32;32;32;32;32;32;32;32;32;32;
33;33;33;33;33;33;33;33;33;33;
34;34;34;34;34;34;34;34;34;34;
35;35;35;35;35;35;35;35;35;35;
36;36;36;36;36;36;36;36;36;36;
37;37;37;37;37;37;37;37;37;37;
38;38;38;38;38;38;38;38;38;38;
39;39;39;39;39;39;39;39;39;39;
40;40;40;40;40;40;40;40;40;40;
41;41;41;41;41;41;41;41;41;41;
42;42;42;42;42;42;42;42;42;42;
43;43;43;43;43;43;43;43;43;43;
44;44;44;44;44;44;44;44;44;44;
45;45;45;45;45;45;45;45;45;45;
46;46;46;46;46;46;46;46;46;46;
47;47;47;47;47;47;47;47;47;47;
48;48;48;48;48;48;48;48;48;48;
49;49;49;49;49;49;49;49;49;49;
50;50;50;50;50;50;50;50;50;50;
51;51;51;51;51;51;51;51;51;51;
52;52;52;52;52;52;52;52;52;52;
53;53;53;53;53;53;53;53;53;53;
54;54;54;54;54;54;54;54;54;54;
55;55;55;55;55;55;55;55;55;55;
56;56;56;56;56;56;56;56;56;56;
57;57;57;57;57;57;57;57;57;57;
58;58;58;58;58;58;58;58;58;58;
59;59;59;59;59;59;59;59;59;59;
60;60;60;60;60;60;60;60;60;60;
61;61;61;61;61;61;61;61;61;61;
62;62;62;62;62;62;62;62;62;62;
63;63;63;63;63;63;63;63;63;63;
64;64;64;64;64;64;64;64;64;64;
65;65;65;65;65;65;65;65;65;65;
66;66;66;66;66;66;66;66;66;66;
67;67;67;67;67;67;67;67;67;67;
68;68;68;68;68;68;68;68;68;68;
69;69;69;69;69;69;69;69;69;69;
70;70;70;70;70;70;70;70;70;70;
71;71;71;71;71;71;71;71;71;71;
72;72;72;72;72;72;72;72;72;72;
73;73;73;73;73;73;73;73;73;73;
74;74;74;74;74;74;74;74;74;74;
75;75;75;75;75;75;75;75;75;75;
76;76;76;76;76;76;76;76;76;76;
77;77;77;77;77;77;77;77;77;77;
78;78;78;78;78;78;78;78;78;78;
79;79;79;79;79;79;79;79;79;79;
80;80;80;80;80;80;80;80;80;80;
81;81;81;81;81;81;81;81;81;81;
82;82;82;82;82;82;82;82;82;82;
83;83;83;83;83;83;83;83;83;83;
84;84;84;84;84;84;84;84;84;84;
85;85;85;85;85;85;85;85;85;85;
86;86;86;86;86;86;86;86;86;86;
87;87;87;87;87;87;87;87;87;87;
88;88;88;88;88;88;88;88;88;88;
89;89;89;89;89;89;89;89;89;89;
90;90;90;90;90;90;90;90;90;90;
91;91;91;91;91;91;91;91;91;91;
92;92;92;92;92;92;92;92;92;92;
93;93;93;93;93;93;93;93;93;93;
94;94;94;94;94;94;94;94;94;94;
95;95;95;95;95;95;95;95;95;95;
96;96;96;96;96;96;96;96;96;96;
97;97;97;97;97;97;97;97;97;97;
98;98;98;98;98;98;98;98;98;98;
99;99;99;99;99;99;99;99;99;99;
100;100;100;100;100;100;100;100;100;100;
101;101;101;101;101;101;101;101;101;101;
102;102;102;102;102;102;102;102;102;102;
103;103;103;103;103;103;103;103;103;103;
104;104;104;104;104;104;104;104;104;104;
105;105;105;105;105;105;105;105;105;105;
106;106;106;106;106;106;106;106;106;106;
107;107;107;107;107;107;107;107;107;107;
108;108;108;108;108;108;108;108;108;108;
109;109;109;109;109;109;109;109;109;109;
110;110;110;110;110;110;110;110;110;110;
111;111;111;111;111;111;111;111;111;111;
112;112;112;112;112;112;112;112;112;112;
113;113;113;113;113;113;113;113;113;113;
114;114;114;114;114;114;114;114;114;114;
115;115;115;115;115;115;115;115;115;115;
116;116;116;116;116;116;116;116;116;116;
117;117;117;117;117;117;117;117;117;117;
118;118;118;118;118;118;118;118;118;118;
119;119;119;119;119;119;119;119;119;119;
120;120;120;120;120;120;120;120;120;120;
121;121;121;121;121;121;121;121;121;121;
122;122;122;122;122;122;122;122;122;122;
123;123;123;123;123;123;123;123;123;123;
124;124;124;124;124;124;124;124;124;124;
125;125;125;125;125;125;125;125;125;125;
126;126;126;126;126;126;126;126;126;126;
127;127;127;127;127;127;127;127;127;127;
128;128;128;128;128;128;128;128;128;128;
129;129;129;129;129;129;129;129;129;129;
130;130;130;130;130;130;130;130;130;130;
131;131;131;131;131;131;131;131;131;131;
132;132;132;132;132;132;132;132;132;132;
133;133;133;133;133;133;133;133;133;133;
134;134;134;134;134;134;134;134;134;134;
135;135;135;135;135;135;135;135;135;135;
136;136;136;136;136;136;136;136;136;136;
137;137;137;137;137;137;137;137;137;137;
138;138;138;138;138;138;138;138;138;138;
139;139;139;139;139;139;139;139;139;139;
140;140;140;140;140;140;140;140;140;140;
141;141;141;141;141;141;141;141;141;141;
142;142;142;142;142;142;142;142;142;142;
143;143;143;143;143;143;143;143;143;143;
144;144;144;144;144;144;144;144;144;144;
145;145;145;145;145;145;145;145;145;145;
146;146;146;146;146;146;146;146;146;146;
147;147;147;147;147;147;147;147;147;147;
148;148;148;148;148;148;148;148;148;148;
149;149;149;149;149;149;149;149;149;149;
150;150;150;150;150;150;150;150;150;150;
151;151;151;151;151;151;151;151;151;151;
152;152;152;152;152;152;152;152;152;152;
153;153;153;153;153;153;153;153;153;153;
154;154;154;154;154;154;154;154;154;154;
155;155;155;155;155;155;155;155;155;155;
156;156;156;156;156;156;156;156;156;156;
157;157;157;157;157;157;157;157;157;157;
158;158;158;158;158;158;158;158;158;158;
159;159;159;159;159;159;159;159;159;159;
160;160;160;160;160;160;160;160;160;160;
161;161;161;161;161;161;161;161;161;161;
162;162;162;162;162;162;162;162;162;162;
163;163;163;163;163;163;163;163;163;163;
164;164;164;164;164;164;164;164;164;164;
165;165;165;165;165;165;165;165;165;165;
166;166;166;166;166;166;166;166;166;166;
167;167;167;167;167;167;167;167;167;167;
168;168;168;168;168;168;168;168;168;168;
169;169;169;169;169;169;169;169;169;169;
170;170;170;170;170;170;170;170;170;170;
171;171;171;171;171;171;171;171;171;171;
172;172;172;172;172;172;172;172;172;172;
173;173;173;173;173;173;173;173;173;173;
174;174;174;174;174;174;174;174;174;174;
175;175;175;175;175;175;175;175;175;175;
176;176;176;176;176;176;176;176;176;176;
177;177;177;177;177;177;177;177;177;177;
178;178;178;178;178;178;178;178;178;178;
179;179;179;179;179;179;179;179;179;179;
180;180;180;180;180;180;180;180;180;180;
181;181;181;181;181;181;181;181;181;181;
182;182;182;182;182;182;182;182;182;182;
183;183;183;183;183;183;183;183;183;183;
184;184;184;184;184;184;184;184;184;184;
185;185;185;185;185;185;185;185;185;185;
186;186;186;186;186;186;186;186;186;186;
187;187;187;187;187;187;187;187;187;187;
188;188;188;188;188;188;188;188;188;188;
189;189;189;189;189;189;189;189;189;189;
190;190;190;190;190;190;190;190;190;190;
191;191;191;191;191;191;191;191;191;191;
192;192;192;192;192;192;192;192;192;192;
193;193;193;193;193;193;193;193;193;193;
194;194;194;194;194;194;194;194;194;194;
195;195;195;195;195;195;195;195;195;195;
196;196;196;196;196;196;196;196;196;196;
197;197;197;197;197;197;197;197;197;197;
198;198;198;198;198;198;198;198;198;198;
199;199;199;199;199;199;199;199;199;199;
      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_74";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [2000] 0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
      };
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [2000] 13.22389;10.614081;7.9526482;8.1781511;4.8855085;4.8768229;3.4036717;2.9485095;2.7248542;2.2264876;
13.674303;9.2704229;4.8031988;5.7302251;4.3203311;3.6939178;3.7697504;3.3134944;3.0075746;2.554595;
13.475875;9.5298977;5.7718744;4.3000331;3.608253;4.4769006;4.0196362;3.4578204;3.0164368;2.6768;
12.201996;11.393132;8.1952114;5.5374551;4.1181154;4.9350915;4.7378745;3.2488277;2.8807681;2.6077735;
13.184013;11.140076;5.4097977;3.8433156;3.8095441;4.3739824;3.4134071;3.2872872;2.7836874;2.753603;
12.897726;11.536838;6.0254946;4.4669075;4.2769423;3.6821804;3.804188;3.0732079;2.6887054;2.4351771;
12.800002;9.8848572;7.6751776;4.3599806;4.1279211;3.6477981;3.7225013;3.1165862;2.6532445;2.2897067;
13.649189;9.9224453;6.7811604;4.5367112;4.2350922;3.9947333;3.7227097;3.2291417;2.6826615;2.4555793;
12.443979;11.806314;8.3846722;5.7971101;4.3722944;3.6632652;3.6246367;3.1643453;2.6890578;2.4748826;
12.994519;9.5358047;7.065177;5.3736496;9.0405712;7.2860603;4.3410931;3.0865879;2.4424658;2.1886749;
13.119241;10.730635;5.8053465;4.1500497;3.8461018;4.0546651;3.5059481;2.9946852;2.7085938;2.5220089;
14.264902;10.332308;6.4379015;4.663115;3.9265475;3.7925239;3.4777794;3.6864641;2.8153403;2.6041362;
13.396257;11.852497;7.8676853;4.4224329;3.8825078;4.0984588;3.7753892;3.458312;2.7532914;4.4090843;
13.01749;10.911736;6.4120598;4.1474743;4.1094027;4.3071218;3.2774019;3.35042;2.7688413;2.2220981;
14.249221;11.613716;8.6562386;4.73318;3.5216939;4.0235443;3.5530329;3.2466176;2.7886672;2.0832741;
13.759685;12.457787;7.1351624;4.9452915;3.7966704;3.9868178;3.6875932;3.1342363;2.8363438;2.2941427;
12.76895;10.307962;6.5516062;4.4278536;4.3104839;3.4865277;3.1220202;3.1279197;2.7610493;2.251781;
14.313744;9.9817867;7.6148558;4.2634311;4.0183067;4.2250743;3.7294493;3.3792663;2.6712954;2.6365085;
14.18155;9.920722;6.7358303;5.6347709;4.5555367;4.0874348;3.6606507;3.5126779;3.0763316;2.5667987;
13.300644;10.708377;7.6161137;5.0514207;4.1535368;4.2606025;3.9144258;3.7150037;2.9291248;2.4813368;
13.027164;9.8189898;4.9262824;3.8762505;4.6520619;4.0874896;3.9311891;3.4819698;3.1529987;2.8653481;
13.049437;9.1521349;6.5224609;4.3402076;3.7617388;3.1882226;3.2169194;3.3787384;2.7460644;2.3909402;
13.529536;11.078885;6.4026856;4.5945129;4.0035076;4.3848524;3.5104625;3.5399165;3.1076598;2.54952;
13.756863;10.858227;4.7408767;5.1407051;4.0182219;3.9818461;3.3748212;3.409945;2.8741882;2.5434954;
13.952787;10.643337;8.13941;6.5704908;4.5188718;3.6442354;3.5846646;3.1022968;2.841753;2.5905302;
12.802443;9.364994;5.8860536;3.6640582;3.8304343;4.2693434;3.4808006;3.1741676;2.647397;2.2136178;
14.258778;8.7327642;6.9346652;5.3141727;4.8565693;3.6987092;3.2297878;2.9524987;2.7137606;2.3984401;
13.46842;10.382681;5.4778533;4.4690228;3.8875666;3.828809;3.822202;3.0983322;3.2469807;2.3131487;
13.842861;10.120244;7.7174435;4.4087424;3.3723736;3.7759409;3.7857306;3.3308916;2.4732938;2.3122461;
14.850613;11.563323;6.6295137;3.5236952;4.2254267;4.1279631;4.0338268;3.5554135;3.3037603;2.7287028;
13.131945;11.812848;7.2149591;4.6186285;4.6832714;4.2635646;3.2239642;2.7818172;2.5254998;1.9505444;
13.119702;12.079233;7.6829696;5.2291956;3.6998811;4.0275564;3.8957582;3.2663255;3.2576609;2.8312061;
13.104465;10.192781;7.4522738;7.0189428;4.4255481;3.9063497;3.4303942;3.0124099;2.3903909;2.4518204;
12.729193;10.553853;7.0386796;3.6505852;3.4773817;3.7785997;3.5407484;2.6739113;2.5367789;2.4771748;
13.442656;10.448627;5.1163411;4.0977664;4.4778843;4.2614007;3.5400712;3.2065458;3.2361841;2.5522261;
13.3018;11.373296;5.2700515;4.9849887;4.1562014;3.9154949;3.8255134;3.3796384;2.8489845;2.2751646;
13.703016;9.695693;6.0635891;4.1810741;3.5687084;3.6359129;3.755497;3.1560817;2.9594083;2.4870651;
12.994791;10.989008;6.0356522;4.4095945;4.0342283;4.0482516;3.9523482;3.4888532;2.466711;2.2235701;
13.677719;9.5598564;7.0661106;5.1005297;3.8811641;3.8632185;3.4948709;3.3975103;2.7711422;2.4828134;
14.868652;11.243032;5.3761001;4.282702;4.044898;3.7521443;3.7280784;3.2384884;2.9196119;2.359987;
14.488573;10.388641;8.1562271;4.390439;3.7648575;3.5006714;3.8466907;3.1445503;2.9513168;2.3914006;
14.123797;7.9832058;5.3501158;4.4994011;3.9863255;4.0876446;3.9881814;3.5480447;2.6226239;2.4941759;
14.932571;9.6198578;6.1952763;4.5919685;3.8386755;4.314889;3.6173642;3.3511827;3.1081774;2.2050867;
14.019676;10.155632;6.5019941;4.9210014;4.507165;4.0131092;3.7778645;3.8283114;3.2564394;2.7144969;
13.452642;12.203176;7.4926901;4.5772209;3.8167422;4.2600012;3.6048703;3.4003313;2.9696188;2.4351504;
13.251131;11.522615;5.4256902;3.6153989;4.1982059;4.5203228;3.8246126;3.4787483;2.5948889;2.5490985;
13.515065;10.738913;7.7487202;4.1322412;4.0548625;4.2048421;4.0453601;3.8328261;3.4209495;2.8145766;
13.109592;10.603431;6.0503054;3.8137531;3.5789454;4.2551556;3.2265272;3.3886945;3.167289;2.5315509;
13.194509;11.784757;6.7884407;5.6034422;4.2311244;3.6052699;3.6021585;3.105499;2.4562042;2.3693845;
13.933262;10.027384;8.5532885;4.0928459;3.7018456;4.0835776;3.6953244;3.2553625;2.7487428;2.4340801;
13.524225;10.013796;6.5124588;3.9426053;3.9684634;3.4280648;3.2856293;2.9667528;2.4307475;2.189023;
14.050389;12.649678;6.4796162;5.4420109;4.2498589;4.1892748;3.56305;3.6755288;2.7889323;2.5140471;
13.374412;10.937613;6.7242651;4.6514568;4.4094219;3.6639817;3.311357;2.7133656;2.4232717;2.0333395;
14.356968;11.61553;7.0297589;4.8147812;3.7445693;3.5648475;3.3571937;3.0560369;2.6037817;2.5105188;
13.504704;10.63975;5.2749696;4.8991799;3.7566071;4.1204157;3.5382414;3.3752937;2.9790645;2.6661217;
15.228479;12.662646;7.4211869;6.4722152;7.3209038;5.7359924;3.5902894;3.2986002;3.2985637;2.4487844;
13.214214;10.539549;8.0288677;5.2411432;4.9864712;6.3834333;4.9740839;4.1181612;2.7844377;3.8484664;
14.389402;11.109918;9.6761122;4.891346;4.4258332;4.1349955;3.7957904;3.5105181;3.1030128;2.6214461;
13.791983;8.7135363;8.4039745;4.8493719;3.8403871;4.2727604;3.7413723;3.3346589;3.2073214;2.9210148;
13.075022;10.667613;6.0467291;5.5023861;3.3726926;3.9180322;3.9208417;3.4543672;2.9973109;2.7930751;
12.081838;10.265409;7.6768856;5.3606443;4.812458;4.0413828;4.0323367;3.6601124;2.9201493;2.5473907;
13.696405;10.880105;5.5994186;5.2820387;4.7150149;3.5639291;3.7890396;3.6477418;3.1487489;2.6749821;
12.985828;9.4581118;7.9196029;6.2355537;6.930912;7.4322591;5.1822176;4.7061253;3.2221222;2.4178917;
13.826107;10.3389;5.4289312;5.1263595;4.0436835;3.8291659;3.395829;2.760107;2.7140172;2.3457315;
14.146412;10.096795;8.7340136;8.0481834;4.7856002;3.4507823;3.5297663;3.1028883;2.8333678;2.2921214;
13.712091;9.2199898;8.7570772;7.2613921;6.7444363;3.9531612;3.7149541;3.2850285;2.8005614;2.4821715;
14.418217;13.360136;7.4065461;4.367269;4.0327568;3.8919466;4.1431222;3.0657949;3.1246843;2.4691315;
15.098225;12.497881;5.5695801;4.7866611;4.1447177;3.5044692;3.9072604;3.39644;3.0079877;2.380794;
13.452065;11.450884;7.9557381;6.3253832;6.3305984;5.1699338;3.6645887;6.3610077;4.5201917;3.5748775;
13.170767;13.505068;6.0366044;3.8489599;3.8775527;4.1629024;3.5174387;3.5660527;2.837471;2.2601733;
14.313875;11.524093;5.356431;5.9384165;4.1873932;4.1029987;4.4013081;3.0489397;2.7154727;2.2559814;
12.960549;12.104599;7.3706074;5.2097411;3.4276874;3.5083497;3.0056829;2.8610933;2.4540639;1.9400448;
12.174111;11.153419;5.0908432;3.6532249;3.9146369;4.123682;3.5062757;3.4294262;2.8843236;2.5315044;
13.439294;10.25531;6.6452427;5.6337738;5.6429338;6.6211166;5.0048847;3.4986427;2.7366464;2.5235903;
13.471106;12.172375;6.776783;4.7068963;4.8820686;4.1515989;3.7002704;3.3760345;3.1239688;2.8580837;
12.878864;9.6874084;5.4979959;4.2881918;3.5417595;3.9663544;3.7353659;3.6150448;3.2454998;2.653688;
13.006033;9.9672546;8.2424583;4.5943084;4.3721056;3.2889309;3.4839044;3.0161934;2.8103094;2.820662;
13.253384;10.193697;5.8326206;3.9265771;3.8534052;3.9679563;3.9627023;3.6122975;3.4168169;2.6563811;
13.349052;11.212862;6.5248117;6.3870244;5.174458;4.9175997;5.0720911;4.5742493;4.5864348;2.692909;
13.374447;9.2777157;5.605526;4.4770541;3.7671421;3.871923;3.6752667;3.1690938;2.6994505;2.3039963;
12.710619;10.929083;5.2814779;4.2076712;3.4537659;3.8774261;3.3607955;3.0982292;2.802042;2.2255554;
13.845106;9.8885431;5.1298132;4.3081198;3.6757524;3.6413801;3.2545784;3.3446026;2.5692713;2.4006646;
12.728008;9.5052128;5.4460497;4.6998577;4.0446334;4.3813596;3.537044;3.6525602;3.0786998;2.6328959;
14.104702;11.12634;5.3837271;4.5572958;3.7506595;4.3267465;3.2041337;3.1509919;2.8572273;2.3236187;
14.68371;10.846783;5.5395799;4.4265084;3.950022;4.4674449;3.9135017;3.0367148;2.689626;2.3496594;
13.548563;9.9939899;7.9739385;5.5802989;3.9707406;4.5089464;3.8092282;3.5103908;2.8506134;2.6803803;
13.610668;11.015901;6.74157;3.9655752;3.7249427;4.0382695;3.7365446;3.2458808;3.0874193;2.5082912;
13.974195;12.146535;5.3338079;4.0906258;3.5314889;3.6303301;3.5585132;2.7440403;2.5742497;2.2370539;
13.286552;13.168249;7.2226286;3.9697478;4.3128576;3.4302478;3.4265501;3.24265;2.6550283;2.4158502;
14.227166;9.3490429;7.549901;5.0378304;4.3265252;3.9017863;3.805953;3.5767877;2.8794258;2.2466466;
14.22034;10.79803;7.4133253;6.2382684;3.2147481;3.8471904;3.8020544;3.0742888;2.7138426;2.72053;
12.487095;11.229595;6.3903131;4.9081841;4.5882316;4.1389151;3.6251998;2.9911041;2.7339239;2.3323495;
14.794988;11.349203;7.5129204;5.2239161;3.510499;3.6649172;3.4687467;3.1129842;2.814815;2.5467947;
14.32818;10.869453;7.5500584;4.5403299;5.3214021;3.8681066;3.8202922;2.9247172;2.8845186;2.4073215;
14.55051;9.6782112;6.6728377;4.3726783;4.0177622;3.6227925;3.2806644;3.3075607;2.5073547;2.4906602;
12.687388;9.3776817;4.8791623;5.1174736;4.3576818;3.6544354;3.3045723;2.9598083;2.5331802;2.2838709;
15.188231;11.034807;6.0062046;4.5764465;3.8871896;4.13486;4.154614;3.7737665;3.3622105;2.7293782;
13.874428;8.7835522;7.7378869;5.6129189;4.2504787;4.1756916;3.3792207;2.9242418;2.7457917;2.3409002;
13.063386;9.667448;5.8420963;4.202611;3.6899741;3.7632439;3.6920702;3.0840087;2.4212058;2.269434;
12.838965;8.7670755;5.5786276;4.1322899;4.5024767;3.8466887;3.8157277;3.5271993;3.1865821;2.5494981;
13.576208;11.409307;5.8164873;4.5583768;4.4327607;4.6691256;3.956718;3.9019775;2.92184;2.7522764;
12.825345;9.2368679;6.3225207;3.8097739;4.0313153;3.8451538;3.8499308;3.4130349;2.9910133;2.5867631;
13.381701;10.509422;5.6518288;4.3745251;4.8396039;3.6808689;3.6088443;3.4544275;2.638268;2.6718316;
14.400249;10.048234;5.3329172;4.7298298;4.2011313;4.2310839;4.0980625;3.4122965;3.3753941;2.5650864;
13.636761;11.305561;7.6326904;5.4697542;3.9988494;3.9665251;3.2551146;2.9234293;2.8235042;2.7276602;
13.950935;10.494984;6.4374485;4.5896111;4.3901443;4.1544032;3.8384268;3.466686;3.0560155;2.3604424;
13.771187;10.631289;7.0875158;5.6095438;4.2556515;4.2921209;3.3291016;3.0390351;2.4693644;2.4734654;
12.675203;11.327366;7.7326355;5.2506504;4.129425;3.7389207;3.8720901;3.4182024;2.9473305;2.5894699;
13.022131;11.400384;7.3685527;5.0506611;4.0636253;4.1749039;3.9643748;3.5008574;3.0195761;2.6282053;
13.334533;9.8807583;7.2608328;4.8807516;4.2637758;4.2934866;3.8953042;3.5782447;3.020968;2.497556;
13.701551;10.791958;8.8262978;9.3874722;6.2083111;3.9675109;3.5485506;3.1158051;3.1286743;2.5181634;
13.633696;11.032354;4.7177944;4.0558586;4.3525162;4.0926962;3.7293458;3.6158295;2.985043;2.8044548;
12.255251;9.5849743;6.8857608;4.5184469;4.0918961;3.5065894;3.722739;3.1185923;2.7876372;2.5906868;
12.619165;11.108409;7.1421642;5.2955809;4.3963614;3.8177338;3.364852;2.887454;2.9369373;2.4595954;
14.810438;9.2512016;6.7619581;5.4330044;4.5073843;3.9377217;3.5487864;3.4496584;2.8286057;2.4622881;
13.675594;10.064927;6.7477417;4.5078311;4.1638579;4.0841527;3.7023187;3.5008175;3.1741893;2.8305006;
13.330679;9.9233074;5.6052785;4.2310815;4.1035066;4.0549459;4.0052252;3.2574708;2.7321196;2.7155857;
14.759686;9.0381374;5.3138127;4.681941;3.7615309;4.0746713;3.6510575;3.327518;3.0810261;2.4801781;
13.282956;9.1374369;7.0736489;5.1327467;3.9504449;4.0194683;3.7415361;3.6508245;3.0500202;2.8457923;
13.982935;9.3922157;6.1258383;5.454823;3.9817259;4.1275477;4.0841117;3.5750716;2.9592402;2.4667456;
13.618288;9.6499786;6.8925476;6.8644776;7.3953323;6.8834352;6.7646165;4.8641777;5.9967108;5.9158888;
14.333178;10.808959;6.7640867;4.6093073;3.9655786;4.0555439;3.7087247;3.2191765;2.9751141;2.5689619;
14.242831;10.098108;6.8732018;4.930892;4.0724859;3.990073;3.6010716;3.2408209;2.7955296;2.5499299;
12.633966;10.552215;6.7850375;4.2939863;3.7862716;3.6363318;3.4683452;3.2225223;2.7313905;2.3137991;
14.686074;12.657516;6.7709351;4.562479;3.8159797;4.016098;4.0756407;3.0476866;2.9356503;2.2861419;
12.150115;9.980608;7.4441948;5.4969349;5.9374599;4.2120605;4.2238054;3.7507296;3.1966932;2.5743015;
12.659693;12.781034;6.8990879;3.7031522;3.8634672;4.0787115;3.5628009;3.8285232;3.1030121;2.6543252;
14.271777;11.513062;7.0848742;7.4921174;3.9155855;4.3113747;4.046721;3.2470975;2.8034461;2.3780992;
13.168357;10.734872;6.3515282;5.0733085;3.8842397;4.194839;3.595026;3.521843;2.8153079;2.5871997;
13.201034;10.640585;6.4348927;3.8230429;3.9341898;4.2896075;3.6456895;3.5815341;2.8706317;2.3220768;
13.954833;12.151699;4.9600096;4.4969406;3.6984777;3.9337163;3.968843;2.8769917;3.0705142;2.3562663;
13.347721;10.75843;6.0634794;4.1898532;4.1220975;3.7766919;3.4273393;3.2557726;2.299674;2.3298323;
14.514275;10.776162;7.4449592;4.5838499;4.5164366;4.3293581;4.3826642;3.8220339;3.2317736;2.6657465;
13.197866;9.7769127;5.5746274;4.3528557;3.8276587;4.3397622;4.0704002;3.1635647;2.9861736;2.4959383;
12.783535;10.196034;6.1597342;4.6896234;3.5859838;3.768939;3.3582523;2.8996921;2.6145396;2.3693275;
13.623732;11.323684;6.2494192;4.5121441;3.9192743;4.4975863;3.5687468;3.5382466;3.294806;2.6970363;
13.424144;13.360485;7.0317459;4.3500772;3.5123787;3.9643586;3.3177404;3.4392557;2.9474792;2.3674538;
14.110967;10.672834;5.8187599;3.6077442;3.8982589;3.6014943;3.8259959;3.2864795;3.2281723;2.6339543;
12.814886;11.093449;6.0721989;4.1128898;4.1709886;4.0512009;3.4407089;3.1246915;2.8489151;2.5358164;
14.557089;9.1801825;4.3416023;4.0684333;3.9871948;4.0977488;3.5304186;3.2143245;2.8799632;2.3369865;
13.121306;10.573909;6.9989986;5.4466529;3.7497363;4.0592484;3.6412463;3.3344448;2.9935522;2.4713511;
13.558699;11.457926;5.3467255;4.9995527;5.1698103;4.2381377;3.8098292;3.4591751;2.8906879;2.644969;
14.596777;9.7712421;5.7544336;4.5749674;4.5897632;3.458662;3.1894898;2.8559873;2.6915414;2.4076955;
13.262613;9.7816782;6.4951434;3.5999858;3.6668954;3.6290841;3.5612018;3.1697783;2.695014;2.3399982;
14.07144;8.5258293;5.9505887;3.8593059;4.3542156;3.9887877;3.3134677;3.0252717;2.6919188;2.340173;
13.969569;11.220804;7.3955822;4.2543278;3.8208504;6.0180802;3.2352686;3.2049584;2.7641454;2.4850845;
14.269809;8.7054901;5.577179;4.6695123;4.6079817;4.1220217;3.98333;3.0589399;2.7871673;2.2678061;
14.071135;12.068727;6.9597826;4.6643305;4.3041635;3.9255795;3.6347826;3.1717386;2.7594476;2.3232498;
14.747;10.896254;7.9885345;5.5922604;6.4001374;6.7443962;6.1012554;4.997366;4.4256082;4.1833725;
14.679868;9.703619;6.2634792;4.6053901;4.7541347;4.147295;3.7593195;3.5268922;2.7849128;2.4924631;
14.015364;9.7362061;9.2418098;6.2666044;3.468864;3.3844838;3.681371;3.508214;3.0687551;2.6396201;
13.884655;10.423846;7.3266726;4.0274782;3.8687615;4.0610476;3.6734712;3.1450033;2.7840052;2.4202676;
13.141968;12.017458;7.0802512;4.940896;4.248744;3.9651899;3.4977486;3.4971733;2.9787192;2.5280325;
13.067597;11.676995;6.8047886;6.839776;4.4066086;3.9663801;3.1335852;3.5514412;3.0640733;2.5634956;
14.593409;12.074956;5.1977987;4.3985605;3.9720492;4.224566;3.5282607;3.4829221;2.8078375;2.6237354;
13.61866;10.046338;5.7599931;4.4855194;4.4040833;4.0244122;3.6294298;3.344619;2.7584302;2.3021848;
13.043686;10.684841;5.0494223;4.371161;3.8686209;4.1836882;3.2180004;3.2514811;2.8392696;2.5306563;
13.479017;10.614643;9.2756205;6.8948202;5.6498013;6.5855589;5.8943167;4.6342893;5.7001743;3.8853385;
13.497172;7.9152813;6.3030434;4.0537977;4.8763275;3.7292628;3.7024617;3.4180107;2.7573557;2.6867881;
13.8256;12.133484;6.7101316;4.6843843;5.9847112;4.2155504;4.0503983;3.7362311;3.0476627;2.7475586;
14.063183;9.2593775;5.302124;3.9039006;3.6741621;3.8053679;3.592382;3.3191216;3.2446375;2.786407;
13.820265;10.158631;5.0021377;5.3113694;3.8028188;3.8627687;3.5707488;3.5886075;3.2253866;2.8764501;
15.193899;9.9676208;5.8587551;4.3356152;4.9118052;4.4925623;3.9473972;3.252671;3.1740513;2.4096293;
14.927404;9.8134623;9.5433931;4.0932674;4.3968272;3.8496618;3.8106008;3.1819415;2.8648307;2.5979452;
13.687626;9.3590765;5.5399323;4.0072546;4.0065999;3.6076744;3.2660077;3.4127965;2.9326494;2.2806954;
12.986635;11.156519;4.5882831;3.4435539;3.8051598;4.3384261;3.9897022;3.4959669;2.9398799;2.3939428;
13.454704;9.4032135;5.3870826;3.8670299;3.4697556;4.071919;3.4426045;3.2996697;2.8008263;2.3184185;
13.400597;10.288552;6.5919991;6.3299975;4.0861149;3.644042;3.8375933;3.3849344;2.9393451;2.660845;
14.555523;10.545391;5.3694844;4.1407118;4.2304735;4.5570354;4.0427856;3.9509041;3.2746055;2.5538445;
13.027603;11.207855;7.5315833;4.8574662;3.9906731;4.0676217;3.2767372;2.8313432;2.7981834;2.18907;
13.187233;10.273325;7.6400723;4.5206175;3.9445808;3.9927175;3.4561749;2.8117013;2.8249943;2.5255566;
13.657285;10.331612;8.1626911;6.5238881;6.2129655;4.7498932;3.6000383;3.5539474;3.159575;2.6075251;
13.44555;9.8102169;4.7324705;3.6588745;4.2358532;4.2298079;3.9390187;3.5508661;3.267067;2.8242967;
16.227861;11.781655;7.0703411;5.5703807;4.1087327;3.9095273;3.9526069;3.3760345;2.8344328;2.7312903;
13.305499;12.215992;7.0137415;5.402;3.269896;4.1355109;3.7357388;3.2185476;2.6831639;2.1143484;
13.991009;9.8977947;6.1787667;5.2357726;4.5160484;4.0277367;3.3595581;3.0395505;2.5115929;2.1491539;
13.472838;9.034996;7.739254;5.3440933;4.1881232;3.7005484;2.8754787;2.9847052;2.9963613;2.1931584;
13.319827;10.796642;5.2616167;4.9882908;3.7900507;4.2393107;3.6073127;3.3564186;3.1649334;2.6103961;
13.505491;10.539972;5.1807523;3.6605606;3.9180961;3.4522412;4.0559225;3.3349881;2.7842343;2.5902812;
13.248631;11.33098;5.6637335;4.3266988;3.6751347;3.5614457;4.8905458;3.0041358;2.7434258;2.4158831;
12.275976;9.9825764;6.1960979;4.4727364;4.8228312;3.2059259;3.6379213;3.4716859;3.0719872;2.7509103;
14.617456;11.654956;7.3183289;4.3935061;3.8893847;3.9485967;4.1407728;3.2609873;3.1025991;2.6430001;
15.301086;9.8590565;6.3876977;4.3873124;3.9633546;3.3668876;3.4067299;3.0019197;2.6855264;2.535346;
14.154608;11.311097;7.0401158;4.1062288;3.8960204;3.6595078;3.4267874;2.8403497;2.7655854;2.378511;
14.100235;9.0301762;6.4153466;5.6514792;4.3242269;3.6981988;3.1588271;3.0673652;3.2001381;2.8470075;
13.68207;10.688901;6.260067;4.6365662;3.653471;3.5756335;3.7087157;2.9622688;2.778161;2.6695797;
12.695806;9.3127422;7.4222665;4.3290763;3.829689;4.2937202;4.1971135;3.3750384;2.6508608;2.366648;
14.170643;11.016558;8.8514481;6.4534059;4.1193109;3.2445428;3.8604822;3.5828428;3.1154556;2.528466;
13.744671;9.4800758;6.1595716;4.3115387;3.5748148;3.5134706;3.7503853;3.3827727;3.0980382;2.5887992;
13.619976;11.996639;7.560009;5.2027097;4.7665529;3.9278512;3.7856791;3.484879;2.9126766;2.6303372;
13.662469;11.158157;7.4517994;4.5788436;4.149652;4.146904;3.7116442;3.1024678;2.5576291;2.3860071;
12.498306;10.88545;8.1126156;5.3152204;4.5770569;3.8964245;3.812582;4.0105844;2.8151221;2.4562125;
14.354595;9.7564182;6.5895901;5.1450787;3.961257;3.8900063;3.3797977;3.1805568;2.6556497;2.3176351;
13.024455;9.7973452;5.2048521;4.6684055;3.7154708;3.5593607;3.9180503;3.5295925;2.8804722;2.3793175;
12.481619;8.7099304;7.3565383;4.6642628;4.7612123;4.4392724;4.0096912;3.1475744;3.1108413;2.6264033;
13.64349;10.928019;7.2940226;5.2102919;6.0588484;4.0853419;3.9783497;3.3595479;3.1481235;2.636477;
14.612075;11.46634;9.1448736;6.2677636;3.8053365;3.8827431;3.4992843;3.6227951;2.8190627;2.5823221;
13.210703;10.637709;5.8445902;4.4065537;3.6731977;3.8623981;3.4697313;3.1930697;2.7118819;2.9337842;
14.123817;8.9294138;6.2604513;4.4313607;4.1479883;3.6001697;3.4838877;3.0177975;2.9761243;2.2401993;
14.579136;10.841087;6.6368513;4.4603901;4.3099885;3.8796442;3.8962107;3.1031964;2.9766908;2.4328294;
      };
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [2000] 4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
      };
     };
     float_Data @[4] {
      name="avg_ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
      ar {
       name="ar";
      [2000] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
     float_Data @[5] {
      name="avg_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
      ar {
       name="ar";
      [2000] 80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
      };
     };
     float_Data @[6] {
      name="epoch_time_tot";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       name="ar";
      [2000] 0.075000003;0.063000001;0.061000001;0.061999999;0.066;0.063000001;0.059;0.059999999;0.059999999;0.066;
0.064000003;0.061000001;0.064000003;0.061999999;0.063000001;0.063000001;0.061000001;0.059;0.059;0.061000001;
0.063000001;0.064999998;0.064000003;0.061000001;0.061000001;0.063000001;0.059999999;0.059;0.061000001;0.061000001;
0.064000003;0.064000003;0.064999998;0.063000001;0.061000001;0.061999999;0.061999999;0.059999999;0.061999999;0.061000001;
0.066;0.064000003;0.061999999;0.061000001;0.064999998;0.059999999;0.061000001;0.061000001;0.064000003;0.059999999;
0.067000002;0.068000004;0.068999998;0.064000003;0.071000002;0.068000004;0.067000002;0.064999998;0.064999998;0.064999998;
0.063000001;0.061000001;0.064000003;0.061999999;0.063000001;0.064000003;0.063000001;0.059;0.061000001;0.059;
0.063000001;0.064000003;0.061999999;0.059999999;0.064999998;0.071000002;0.061999999;0.061999999;0.064000003;0.061000001;
0.066;0.066;0.064999998;0.061999999;0.061999999;0.061000001;0.064000003;0.061000001;0.059999999;0.059999999;
0.064999998;0.063000001;0.064999998;0.061999999;0.063000001;0.061000001;0.059999999;0.061000001;0.059;0.059;
0.067000002;0.061999999;0.064000003;0.059999999;0.063000001;0.059999999;0.059999999;0.064999998;0.063000001;0.063000001;
0.063000001;0.064000003;0.061999999;0.061000001;0.061000001;0.059999999;0.061999999;0.059999999;0.059999999;0.061999999;
0.064000003;0.063000001;0.061999999;0.064999998;0.061999999;0.059999999;0.059;0.061999999;0.059;0.059999999;
0.066;0.071000002;0.068999998;0.066;0.064000003;0.061999999;0.061999999;0.059;0.066;0.071999997;
0.063000001;0.068000004;0.064000003;0.063000001;0.059;0.061999999;0.061999999;0.063000001;0.061000001;0.059999999;
0.064000003;0.067000002;0.064000003;0.061999999;0.064000003;0.061000001;0.059;0.061000001;0.061000001;0.064000003;
0.071999997;0.07;0.063000001;0.063000001;0.064999998;0.061999999;0.059999999;0.061999999;0.093999997;0.061999999;
0.064000003;0.061999999;0.063000001;0.061999999;0.061999999;0.064000003;0.059;0.061000001;0.059999999;0.059999999;
0.066;0.066;0.063000001;0.061999999;0.063000001;0.061000001;0.059;0.061999999;0.063000001;0.059;
0.063000001;0.061999999;0.061999999;0.061999999;0.061999999;0.059999999;0.061000001;0.061000001;0.059999999;0.064000003;
0.064000003;0.064999998;0.061000001;0.059;0.063000001;0.061000001;0.059;0.061000001;0.061999999;0.059999999;
0.067000002;0.064000003;0.061999999;0.063000001;0.063000001;0.061000001;0.061000001;0.059;0.059;0.064999998;
0.066;0.071000002;0.067000002;0.066;0.066;0.067000002;0.063000001;0.063000001;0.064000003;0.064999998;
0.066;0.068000004;0.067000002;0.066;0.067000002;0.063000001;0.063000001;0.064000003;0.064999998;0.064000003;
0.066;0.067000002;0.063000001;0.064999998;0.064999998;0.074000001;0.086999997;0.071999997;0.071000002;0.071000002;
0.082999997;0.072999999;0.07;0.066;0.064999998;0.064000003;0.064000003;0.067000002;0.07;0.071000002;
0.071000002;0.071000002;0.068000004;0.066;0.064000003;0.063000001;0.068000004;0.064999998;0.067000002;0.066;
0.072999999;0.067000002;0.07;0.068000004;0.068000004;0.066;0.068000004;0.066;0.064999998;0.063000001;
0.083999999;0.075000003;0.067000002;0.066;0.064000003;0.064999998;0.068000004;0.066;0.064000003;0.063000001;
0.064999998;0.066;0.064999998;0.064000003;0.063000001;0.063000001;0.063000001;0.064999998;0.063000001;0.064999998;
0.082000002;0.072999999;0.068999998;0.068000004;0.066;0.068999998;0.071999997;0.067000002;0.068999998;0.071000002;
0.079000004;0.072999999;0.07;0.07;0.068999998;0.066;0.078000002;0.071000002;0.068000004;0.064000003;
0.071000002;0.071999997;0.07;0.07;0.067000002;0.07;0.064999998;0.064000003;0.068000004;0.067000002;
0.071000002;0.07;0.068999998;0.072999999;0.068999998;0.068000004;0.068000004;0.071999997;0.071999997;0.068000004;
0.089000002;0.074000001;0.072999999;0.078000002;0.075000003;0.07;0.068000004;0.061999999;0.066;0.066;
0.07;0.066;0.075000003;0.071999997;0.064999998;0.064000003;0.078000002;0.082000002;0.071000002;0.064000003;
0.075000003;0.071000002;0.071999997;0.07;0.071000002;0.064000003;0.071000002;0.071999997;0.064999998;0.064999998;
0.068999998;0.068999998;0.07;0.07;0.071000002;0.068000004;0.07;0.072999999;0.064000003;0.068000004;
0.074000001;0.07;0.074000001;0.066;0.071999997;0.074000001;0.075000003;0.064000003;0.064000003;0.071000002;
0.075000003;0.078000002;0.077;0.081;0.07;0.067000002;0.067000002;0.067000002;0.066;0.072999999;
0.075000003;0.071000002;0.075999998;0.081;0.07;0.07;0.068000004;0.079000004;0.074000001;0.074000001;
0.07;0.07;0.071000002;0.071000002;0.067000002;0.068000004;0.064999998;0.071999997;0.066;0.07;
0.075000003;0.07;0.071000002;0.068999998;0.068999998;0.066;0.066;0.067000002;0.07;0.068000004;
0.072999999;0.067000002;0.067000002;0.072999999;0.075000003;0.075999998;0.075999998;0.068999998;0.067000002;0.07;
0.082999997;0.071999997;0.067000002;0.066;0.066;0.071000002;0.067000002;0.068000004;0.067000002;0.067000002;
0.068999998;0.071999997;0.079999998;0.078000002;0.072999999;0.071000002;0.068999998;0.064999998;0.07;0.064999998;
0.064999998;0.068999998;0.068000004;0.066;0.071000002;0.064999998;0.061999999;0.066;0.064999998;0.063000001;
0.075000003;0.075000003;0.072999999;0.068999998;0.063000001;0.068000004;0.068999998;0.066;0.064999998;0.061999999;
0.068000004;0.067000002;0.064000003;0.068000004;0.063000001;0.068999998;0.068000004;0.068000004;0.067000002;0.064999998;
0.075000003;0.068999998;0.071999997;0.07;0.067000002;0.067000002;0.074000001;0.064999998;0.066;0.07;
0.071000002;0.064999998;0.07;0.068999998;0.066;0.064000003;0.064999998;0.068999998;0.064999998;0.064999998;
0.07;0.068999998;0.068000004;0.066;0.067000002;0.067000002;0.066;0.068000004;0.072999999;0.071000002;
0.068999998;0.067000002;0.068999998;0.071000002;0.07;0.061999999;0.064999998;0.071999997;0.071999997;0.07;
0.072999999;0.071999997;0.068000004;0.064999998;0.072999999;0.071000002;0.067000002;0.074000001;0.066;0.063000001;
0.066;0.071999997;0.071999997;0.064000003;0.064000003;0.064999998;0.066;0.063000001;0.067000002;0.068999998;
0.066;0.064999998;0.061999999;0.064999998;0.063000001;0.063000001;0.059999999;0.063000001;0.064999998;0.061999999;
0.063000001;0.063000001;0.064999998;0.061999999;0.064000003;0.066;0.059999999;0.063000001;0.064000003;0.063000001;
0.068000004;0.068999998;0.068999998;0.07;0.068000004;0.068000004;0.064999998;0.068000004;0.068000004;0.077;
0.074000001;0.072999999;0.071999997;0.07;0.063000001;0.071999997;0.068999998;0.07;0.07;0.068000004;
0.068000004;0.068999998;0.067000002;0.071999997;0.068000004;0.068999998;0.071999997;0.067000002;0.067000002;0.061999999;
0.079999998;0.082999997;0.081;0.074000001;0.064000003;0.064999998;0.066;0.064999998;0.064999998;0.063000001;
0.068000004;0.066;0.068000004;0.066;0.071000002;0.064999998;0.068999998;0.064000003;0.064999998;0.066;
0.07;0.068000004;0.064000003;0.066;0.067000002;0.067000002;0.068000004;0.066;0.068000004;0.066;
0.068999998;0.068000004;0.068999998;0.077;0.067000002;0.07;0.067000002;0.064000003;0.066;0.067000002;
0.071000002;0.068999998;0.068999998;0.067000002;0.071999997;0.068000004;0.074000001;0.068000004;0.07;0.068000004;
0.071000002;0.068999998;0.067000002;0.067000002;0.075000003;0.072999999;0.075000003;0.072999999;0.07;0.075000003;
0.066;0.066;0.07;0.068999998;0.068000004;0.068000004;0.066;0.064000003;0.07;0.067000002;
0.068999998;0.071000002;0.064999998;0.068999998;0.068999998;0.067000002;0.072999999;0.067000002;0.064999998;0.064999998;
0.067000002;0.066;0.066;0.066;0.066;0.064000003;0.067000002;0.064000003;0.066;0.067000002;
0.068000004;0.068000004;0.068000004;0.066;0.064999998;0.066;0.064999998;0.071000002;0.064999998;0.068999998;
0.068000004;0.067000002;0.07;0.068999998;0.067000002;0.066;0.066;0.064999998;0.064999998;0.067000002;
0.074000001;0.072999999;0.066;0.064000003;0.067000002;0.064999998;0.067000002;0.064000003;0.066;0.074000001;
0.072999999;0.068999998;0.068000004;0.066;0.064999998;0.067000002;0.064000003;0.066;0.066;0.063000001;
0.07;0.071000002;0.068999998;0.067000002;0.071000002;0.068000004;0.066;0.064999998;0.082999997;0.072999999;
0.07;0.07;0.066;0.068999998;0.068000004;0.064999998;0.066;0.07;0.064000003;0.063000001;
0.068999998;0.068000004;0.068999998;0.071000002;0.074000001;0.071999997;0.068999998;0.068999998;0.064000003;0.064999998;
0.07;0.067000002;0.067000002;0.068000004;0.067000002;0.07;0.064999998;0.067000002;0.068999998;0.064000003;
0.07;0.071999997;0.07;0.07;0.068999998;0.064000003;0.066;0.067000002;0.071000002;0.071999997;
0.067000002;0.067000002;0.067000002;0.068000004;0.068000004;0.068999998;0.068000004;0.066;0.068000004;0.068000004;
0.074000001;0.067000002;0.068999998;0.067000002;0.066;0.067000002;0.064000003;0.064999998;0.071999997;0.066;
0.07;0.068999998;0.071000002;0.067000002;0.068999998;0.068999998;0.066;0.071999997;0.068000004;0.068000004;
0.07;0.066;0.07;0.066;0.068999998;0.068000004;0.066;0.066;0.071000002;0.064999998;
0.068000004;0.068000004;0.067000002;0.067000002;0.067000002;0.068000004;0.066;0.068000004;0.064000003;0.064999998;
0.068000004;0.068000004;0.075000003;0.071000002;0.07;0.074000001;0.068000004;0.07;0.066;0.068000004;
0.072999999;0.075000003;0.071000002;0.07;0.075999998;0.07;0.068000004;0.068999998;0.067000002;0.071999997;
0.068000004;0.068999998;0.068000004;0.064999998;0.068000004;0.064000003;0.071999997;0.064999998;0.067000002;0.064999998;
0.074000001;0.071000002;0.07;0.071000002;0.064999998;0.068000004;0.07;0.067000002;0.064999998;0.064999998;
0.067000002;0.072999999;0.07;0.066;0.067000002;0.067000002;0.064000003;0.067000002;0.066;0.064999998;
0.068000004;0.068999998;0.068999998;0.071000002;0.067000002;0.066;0.067000002;0.064999998;0.064999998;0.063000001;
0.067000002;0.066;0.068999998;0.066;0.067000002;0.066;0.066;0.064999998;0.068000004;0.068999998;
0.067000002;0.068000004;0.07;0.068000004;0.067000002;0.067000002;0.068999998;0.068999998;0.066;0.068000004;
0.068999998;0.066;0.07;0.068000004;0.064000003;0.067000002;0.066;0.064000003;0.066;0.068000004;
0.068000004;0.072999999;0.068999998;0.066;0.064999998;0.066;0.063000001;0.061999999;0.063000001;0.064999998;
0.067000002;0.066;0.066;0.064000003;0.067000002;0.064000003;0.064000003;0.066;0.064000003;0.064999998;
0.071999997;0.066;0.061000001;0.075999998;0.071000002;0.064000003;0.061999999;0.067000002;0.068000004;0.067000002;
0.066;0.064999998;0.064999998;0.064999998;0.064000003;0.061999999;0.063000001;0.064000003;0.066;0.063000001;
0.066;0.066;0.067000002;0.066;0.064000003;0.068000004;0.061999999;0.064999998;0.068000004;0.07;
0.067000002;0.072999999;0.067000002;0.066;0.072999999;0.064000003;0.07;0.064000003;0.067000002;0.064000003;
0.064999998;0.064999998;0.068999998;0.064999998;0.07;0.071000002;0.066;0.068999998;0.07;0.064000003;
0.071000002;0.068000004;0.07;0.064999998;0.066;0.071999997;0.066;0.066;0.071999997;0.064999998;
0.07;0.068999998;0.066;0.064000003;0.064000003;0.072999999;0.067000002;0.067000002;0.068000004;0.064000003;
0.071000002;0.064000003;0.072999999;0.068000004;0.067000002;0.066;0.063000001;0.064999998;0.068999998;0.064999998;
0.064999998;0.068000004;0.064999998;0.064999998;0.064000003;0.064999998;0.064000003;0.061999999;0.063000001;0.064000003;
0.064999998;0.064999998;0.068999998;0.07;0.064999998;0.064000003;0.071999997;0.064000003;0.064999998;0.075999998;
0.064999998;0.067000002;0.066;0.067000002;0.063000001;0.064000003;0.064999998;0.064999998;0.061999999;0.064000003;
0.064000003;0.064000003;0.068000004;0.071000002;0.072999999;0.068000004;0.064999998;0.063000001;0.061999999;0.061999999;
0.068999998;0.066;0.064999998;0.064999998;0.061000001;0.063000001;0.063000001;0.061999999;0.064000003;0.064000003;
0.066;0.066;0.064999998;0.067000002;0.067000002;0.083999999;0.085000001;0.074000001;0.071999997;0.061999999;
0.071000002;0.067000002;0.066;0.064999998;0.064999998;0.059999999;0.064999998;0.066;0.064000003;0.067000002;
0.064999998;0.066;0.068000004;0.068000004;0.064999998;0.064000003;0.067000002;0.064000003;0.07;0.068000004;
0.072999999;0.071999997;0.066;0.067000002;0.064000003;0.064000003;0.064000003;0.063000001;0.063000001;0.061999999;
0.063000001;0.066;0.064999998;0.064999998;0.064000003;0.064000003;0.061999999;0.068000004;0.066;0.064000003;
0.068000004;0.064999998;0.068000004;0.066;0.07;0.063000001;0.061999999;0.061999999;0.061999999;0.063000001;
0.066;0.067000002;0.061999999;0.064000003;0.063000001;0.064999998;0.068999998;0.064000003;0.064999998;0.061999999;
0.066;0.066;0.064000003;0.066;0.064999998;0.063000001;0.064000003;0.064000003;0.059999999;0.061999999;
0.068000004;0.071000002;0.074000001;0.068999998;0.064999998;0.063000001;0.068999998;0.068000004;0.063000001;0.077;
0.071000002;0.066;0.064999998;0.064999998;0.066;0.071999997;0.068000004;0.068999998;0.067000002;0.064000003;
0.07;0.066;0.068000004;0.068000004;0.07;0.061999999;0.063000001;0.064000003;0.063000001;0.066;
0.067000002;0.064999998;0.067000002;0.067000002;0.063000001;0.064999998;0.067000002;0.075000003;0.071999997;0.07;
0.064999998;0.068000004;0.071000002;0.068000004;0.067000002;0.063000001;0.064999998;0.064000003;0.068000004;0.066;
0.066;0.068000004;0.064000003;0.064000003;0.07;0.066;0.064000003;0.064000003;0.064000003;0.071000002;
0.068000004;0.071999997;0.079999998;0.075999998;0.081;0.079999998;0.066;0.063000001;0.066;0.061999999;
0.067000002;0.063000001;0.067000002;0.067000002;0.071000002;0.061999999;0.064999998;0.067000002;0.064000003;0.061999999;
0.068000004;0.066;0.064000003;0.067000002;0.068000004;0.067000002;0.068000004;0.081;0.068999998;0.066;
0.064999998;0.064999998;0.064999998;0.068000004;0.061999999;0.066;0.064000003;0.064000003;0.071999997;0.064000003;
0.071000002;0.068000004;0.07;0.063000001;0.066;0.068000004;0.068000004;0.071000002;0.068999998;0.07;
0.074000001;0.075999998;0.071000002;0.075000003;0.071999997;0.068000004;0.071000002;0.066;0.064999998;0.066;
0.064999998;0.066;0.07;0.066;0.075000003;0.064999998;0.066;0.061999999;0.061999999;0.066;
0.075999998;0.067000002;0.066;0.068000004;0.066;0.066;0.064999998;0.064999998;0.066;0.066;
0.066;0.064999998;0.063000001;0.071999997;0.067000002;0.067000002;0.071000002;0.067000002;0.066;0.07;
0.064000003;0.078000002;0.071000002;0.064999998;0.063000001;0.064000003;0.063000001;0.064000003;0.064000003;0.07;
0.064999998;0.063000001;0.064999998;0.066;0.064999998;0.064999998;0.063000001;0.068000004;0.063000001;0.063000001;
0.064000003;0.07;0.074000001;0.064999998;0.063000001;0.064000003;0.066;0.064000003;0.061999999;0.068000004;
0.061999999;0.064999998;0.068999998;0.066;0.067000002;0.071000002;0.064999998;0.063000001;0.066;0.07;
0.066;0.066;0.064999998;0.066;0.072999999;0.061999999;0.064000003;0.066;0.064999998;0.067000002;
0.064999998;0.067000002;0.068000004;0.066;0.067000002;0.071999997;0.071000002;0.07;0.068999998;0.07;
0.066;0.067000002;0.067000002;0.066;0.066;0.064000003;0.061999999;0.066;0.071000002;0.064000003;
0.068000004;0.066;0.066;0.066;0.066;0.066;0.067000002;0.07;0.066;0.067000002;
0.068000004;0.066;0.068000004;0.072999999;0.064000003;0.068000004;0.064000003;0.064999998;0.064999998;0.061999999;
0.067000002;0.068000004;0.067000002;0.066;0.063000001;0.063000001;0.061999999;0.064999998;0.063000001;0.066;
0.067000002;0.066;0.07;0.066;0.061999999;0.061999999;0.061999999;0.067000002;0.059999999;0.063000001;
0.064000003;0.063000001;0.064999998;0.063000001;0.063000001;0.07;0.064999998;0.063000001;0.061999999;0.064999998;
0.068000004;0.072999999;0.064999998;0.067000002;0.063000001;0.061999999;0.067000002;0.066;0.061999999;0.061999999;
0.066;0.071000002;0.071000002;0.064999998;0.068000004;0.072999999;0.064999998;0.067000002;0.064000003;0.064000003;
0.071999997;0.068999998;0.067000002;0.068000004;0.063000001;0.064999998;0.066;0.063000001;0.064000003;0.059999999;
0.067000002;0.068999998;0.068999998;0.067000002;0.064000003;0.064999998;0.066;0.064000003;0.064999998;0.064999998;
0.066;0.07;0.068000004;0.066;0.066;0.061999999;0.064999998;0.066;0.064999998;0.071999997;
0.067000002;0.068000004;0.066;0.064999998;0.066;0.066;0.064999998;0.064000003;0.064000003;0.064000003;
0.064999998;0.066;0.064000003;0.064999998;0.064999998;0.063000001;0.071000002;0.066;0.064999998;0.063000001;
0.067000002;0.064999998;0.07;0.064999998;0.068999998;0.064999998;0.064999998;0.061000001;0.064000003;0.071999997;
0.064000003;0.07;0.071000002;0.071000002;0.067000002;0.064999998;0.064000003;0.066;0.067000002;0.064999998;
0.068000004;0.068999998;0.067000002;0.071000002;0.068999998;0.064000003;0.064999998;0.07;0.066;0.064000003;
0.066;0.066;0.068000004;0.068999998;0.068999998;0.066;0.061000001;0.061000001;0.067000002;0.066;
0.064000003;0.072999999;0.067000002;0.068000004;0.067000002;0.064999998;0.067000002;0.064999998;0.068000004;0.067000002;
0.068999998;0.068999998;0.066;0.064000003;0.064000003;0.067000002;0.064999998;0.064000003;0.063000001;0.064000003;
0.064999998;0.068000004;0.068000004;0.064000003;0.066;0.064000003;0.068000004;0.064000003;0.064000003;0.064000003;
0.068000004;0.07;0.07;0.071000002;0.07;0.068999998;0.07;0.067000002;0.068999998;0.068999998;
0.068999998;0.07;0.071999997;0.07;0.068999998;0.071000002;0.067000002;0.068999998;0.068000004;0.068000004;
0.07;0.068999998;0.067000002;0.071000002;0.07;0.068000004;0.068000004;0.068000004;0.07;0.066;
0.071999997;0.068999998;0.066;0.067000002;0.068000004;0.072999999;0.071999997;0.067000002;0.067000002;0.068000004;
0.068000004;0.064999998;0.071999997;0.068000004;0.068000004;0.066;0.067000002;0.068999998;0.068000004;0.068000004;
0.109;0.072999999;0.071999997;0.07;0.075000003;0.071999997;0.068000004;0.071000002;0.068999998;0.068000004;
0.07;0.07;0.071000002;0.075000003;0.067000002;0.064000003;0.096000001;0.068999998;0.068000004;0.068000004;
0.071000002;0.068999998;0.064999998;0.071999997;0.064999998;0.066;0.067000002;0.066;0.067000002;0.075999998;
0.068000004;0.07;0.068999998;0.068000004;0.072999999;0.061000001;0.066;0.068000004;0.068999998;0.068000004;
0.079999998;0.071000002;0.07;0.068999998;0.064000003;0.075000003;0.074000001;0.066;0.064999998;0.067000002;
0.068999998;0.071000002;0.068999998;0.07;0.071000002;0.071999997;0.067000002;0.064999998;0.064000003;0.068000004;
0.071999997;0.071999997;0.07;0.072999999;0.071000002;0.07;0.068000004;0.066;0.064000003;0.072999999;
0.068999998;0.068000004;0.081;0.068999998;0.074000001;0.068000004;0.068999998;0.068999998;0.064999998;0.068999998;
0.067000002;0.067000002;0.068000004;0.071000002;0.068999998;0.074000001;0.068999998;0.066;0.067000002;0.066;
0.071999997;0.071999997;0.068999998;0.068999998;0.068000004;0.07;0.068000004;0.068000004;0.074000001;0.068000004;
0.067000002;0.07;0.07;0.072999999;0.066;0.07;0.071999997;0.071000002;0.068000004;0.071999997;
0.07;0.072999999;0.068000004;0.068999998;0.071000002;0.067000002;0.071999997;0.07;0.068999998;0.07;
0.068000004;0.068999998;0.071000002;0.068000004;0.066;0.068999998;0.066;0.093000002;0.067000002;0.071000002;
0.071000002;0.066;0.07;0.068999998;0.068999998;0.067000002;0.068999998;0.072999999;0.071000002;0.072999999;
0.067000002;0.061000001;0.064000003;0.071999997;0.067000002;0.068999998;0.071999997;0.071999997;0.071000002;0.068999998;
0.074000001;0.074000001;0.059999999;0.067000002;0.071999997;0.068999998;0.071000002;0.066;0.068999998;0.067000002;
0.066;0.068000004;0.068000004;0.063000001;0.061000001;0.063000001;0.067000002;0.064999998;0.063000001;0.064000003;
0.066;0.066;0.079000004;0.072999999;0.074000001;0.067000002;0.066;0.066;0.064000003;0.07;
0.068000004;0.07;0.079000004;0.068000004;0.066;0.068999998;0.067000002;0.059999999;0.063000001;0.068000004;
0.07;0.064000003;0.071000002;0.071000002;0.067000002;0.064999998;0.075999998;0.072999999;0.064999998;0.066;
0.079999998;0.072999999;0.067000002;0.061000001;0.067000002;0.071000002;0.066;0.071000002;0.07;0.066;
0.068000004;0.068999998;0.068999998;0.068999998;0.064999998;0.07;0.074000001;0.067000002;0.07;0.075000003;
0.067000002;0.066;0.068000004;0.064999998;0.064999998;0.064000003;0.071000002;0.068000004;0.066;0.064999998;
0.07;0.074000001;0.068999998;0.068000004;0.07;0.067000002;0.064999998;0.067000002;0.066;0.067000002;
0.07;0.068999998;0.068000004;0.068999998;0.067000002;0.064000003;0.067000002;0.066;0.064999998;0.061999999;
0.074000001;0.068999998;0.07;0.066;0.067000002;0.067000002;0.068999998;0.072999999;0.064999998;0.068999998;
0.079999998;0.071999997;0.068000004;0.066;0.074000001;0.068999998;0.064999998;0.068999998;0.064000003;0.071999997;
0.067000002;0.07;0.078000002;0.066;0.063000001;0.066;0.063000001;0.071999997;0.07;0.068000004;
0.066;0.068000004;0.066;0.064000003;0.064000003;0.064999998;0.064000003;0.064999998;0.064999998;0.066;
0.107;0.067000002;0.068000004;0.064000003;0.064999998;0.064000003;0.063000001;0.067000002;0.066;0.063000001;
0.066;0.064999998;0.061000001;0.068999998;0.063000001;0.067000002;0.075999998;0.071000002;0.068000004;0.068000004;
0.071999997;0.068999998;0.067000002;0.064000003;0.064999998;0.067000002;0.07;0.075000003;0.064999998;0.068000004;
0.068999998;0.068000004;0.07;0.068999998;0.074000001;0.072999999;0.083999999;0.082000002;0.074000001;0.07;
0.081;0.086000003;0.086999997;0.068999998;0.074000001;0.067000002;0.068999998;0.066;0.075000003;0.092;
0.075999998;0.086999997;0.092;0.082000002;0.075999998;0.071999997;0.082999997;0.079000004;0.074000001;0.082999997;
0.077;0.071999997;0.074000001;0.068999998;0.071999997;0.083999999;0.074000001;0.066;0.068000004;0.068000004;
0.071000002;0.071000002;0.068999998;0.068999998;0.066;0.068999998;0.064999998;0.07;0.075000003;0.066;
0.07;0.074000001;0.07;0.071999997;0.068999998;0.068000004;0.066;0.07;0.07;0.068000004;
0.07;0.067000002;0.07;0.079999998;0.068999998;0.068000004;0.07;0.068999998;0.067000002;0.067000002;
      };
     };
     float_Data @[7] {
      name="epoch_time_usr";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       name="ar";
      [2000] 0.075000003;0.063000001;0.061000001;0.061999999;0.066;0.063000001;0.059;0.059999999;0.059999999;0.066;
0.064000003;0.061000001;0.064000003;0.061999999;0.063000001;0.063000001;0.061000001;0.059;0.059;0.061000001;
0.063000001;0.064999998;0.064000003;0.061000001;0.061000001;0.063000001;0.059999999;0.059;0.061000001;0.061000001;
0.064000003;0.064000003;0.064999998;0.063000001;0.061000001;0.061999999;0.061999999;0.059999999;0.061999999;0.061000001;
0.066;0.064000003;0.061999999;0.061000001;0.064999998;0.059999999;0.061000001;0.061000001;0.064000003;0.059999999;
0.067000002;0.068000004;0.068999998;0.064000003;0.071000002;0.068000004;0.067000002;0.064999998;0.064999998;0.064999998;
0.063000001;0.061000001;0.064000003;0.061999999;0.063000001;0.064000003;0.063000001;0.059;0.061000001;0.059;
0.063000001;0.064000003;0.061999999;0.059999999;0.064999998;0.071000002;0.061999999;0.061999999;0.064000003;0.061000001;
0.066;0.066;0.064999998;0.061999999;0.061999999;0.061000001;0.064000003;0.061000001;0.059999999;0.059999999;
0.064999998;0.063000001;0.064999998;0.061999999;0.063000001;0.061000001;0.059999999;0.061000001;0.059;0.059;
0.067000002;0.061999999;0.064000003;0.059999999;0.063000001;0.059999999;0.059999999;0.064999998;0.063000001;0.063000001;
0.063000001;0.064000003;0.061999999;0.061000001;0.061000001;0.059999999;0.061999999;0.059999999;0.059999999;0.061999999;
0.064000003;0.063000001;0.061999999;0.064999998;0.061999999;0.059999999;0.059;0.061999999;0.059;0.059999999;
0.066;0.071000002;0.068999998;0.066;0.064000003;0.061999999;0.061999999;0.059;0.066;0.071999997;
0.063000001;0.068000004;0.064000003;0.063000001;0.059;0.061999999;0.061999999;0.063000001;0.061000001;0.059999999;
0.064000003;0.067000002;0.064000003;0.061999999;0.064000003;0.061000001;0.059;0.061000001;0.061000001;0.064000003;
0.071999997;0.07;0.063000001;0.063000001;0.064999998;0.061999999;0.059999999;0.061999999;0.093999997;0.061999999;
0.064000003;0.061999999;0.063000001;0.061999999;0.061999999;0.064000003;0.059;0.061000001;0.059999999;0.059999999;
0.066;0.066;0.063000001;0.061999999;0.063000001;0.061000001;0.059;0.061999999;0.063000001;0.059;
0.063000001;0.061999999;0.061999999;0.061999999;0.061999999;0.059999999;0.061000001;0.061000001;0.059999999;0.064000003;
0.064000003;0.064999998;0.061000001;0.059;0.063000001;0.061000001;0.059;0.061000001;0.061999999;0.059999999;
0.067000002;0.064000003;0.061999999;0.063000001;0.063000001;0.061000001;0.061000001;0.059;0.059;0.064999998;
0.066;0.071000002;0.067000002;0.066;0.066;0.067000002;0.063000001;0.063000001;0.064000003;0.064999998;
0.066;0.068000004;0.067000002;0.066;0.067000002;0.063000001;0.063000001;0.064000003;0.064999998;0.064000003;
0.066;0.067000002;0.063000001;0.064999998;0.064999998;0.074000001;0.086999997;0.071999997;0.071000002;0.071000002;
0.082999997;0.072999999;0.07;0.066;0.064999998;0.064000003;0.064000003;0.067000002;0.07;0.071000002;
0.071000002;0.071000002;0.068000004;0.066;0.064000003;0.063000001;0.068000004;0.064999998;0.067000002;0.066;
0.072999999;0.067000002;0.07;0.068000004;0.068000004;0.066;0.068000004;0.066;0.064999998;0.063000001;
0.083999999;0.075000003;0.067000002;0.066;0.064000003;0.064999998;0.068000004;0.066;0.064000003;0.063000001;
0.064999998;0.066;0.064999998;0.064000003;0.063000001;0.063000001;0.063000001;0.064999998;0.063000001;0.064999998;
0.082000002;0.072999999;0.068999998;0.068000004;0.066;0.068999998;0.071999997;0.067000002;0.068999998;0.071000002;
0.079000004;0.072999999;0.07;0.07;0.068999998;0.066;0.078000002;0.071000002;0.068000004;0.064000003;
0.071000002;0.071999997;0.07;0.07;0.067000002;0.07;0.064999998;0.064000003;0.068000004;0.067000002;
0.071000002;0.07;0.068999998;0.072999999;0.068999998;0.068000004;0.068000004;0.071999997;0.071999997;0.068000004;
0.089000002;0.074000001;0.072999999;0.078000002;0.075000003;0.07;0.068000004;0.061999999;0.066;0.066;
0.07;0.066;0.075000003;0.071999997;0.064999998;0.064000003;0.078000002;0.082000002;0.071000002;0.064000003;
0.075000003;0.071000002;0.071999997;0.07;0.071000002;0.064000003;0.071000002;0.071999997;0.064999998;0.064999998;
0.068999998;0.068999998;0.07;0.07;0.071000002;0.068000004;0.07;0.072999999;0.064000003;0.068000004;
0.074000001;0.07;0.074000001;0.066;0.071999997;0.074000001;0.075000003;0.064000003;0.064000003;0.071000002;
0.075000003;0.078000002;0.077;0.081;0.07;0.067000002;0.067000002;0.067000002;0.066;0.072999999;
0.075000003;0.071000002;0.075999998;0.081;0.07;0.07;0.068000004;0.079000004;0.074000001;0.074000001;
0.07;0.07;0.071000002;0.071000002;0.067000002;0.068000004;0.064999998;0.071999997;0.066;0.07;
0.075000003;0.07;0.071000002;0.068999998;0.068999998;0.066;0.066;0.067000002;0.07;0.068000004;
0.072999999;0.067000002;0.067000002;0.072999999;0.075000003;0.075999998;0.075999998;0.068999998;0.067000002;0.07;
0.082999997;0.071999997;0.067000002;0.066;0.066;0.071000002;0.067000002;0.068000004;0.067000002;0.067000002;
0.068999998;0.071999997;0.079999998;0.078000002;0.072999999;0.071000002;0.068999998;0.064999998;0.07;0.064999998;
0.064999998;0.068999998;0.068000004;0.066;0.071000002;0.064999998;0.061999999;0.066;0.064999998;0.063000001;
0.075000003;0.075000003;0.072999999;0.068999998;0.063000001;0.068000004;0.068999998;0.066;0.064999998;0.061999999;
0.068000004;0.067000002;0.064000003;0.068000004;0.063000001;0.068999998;0.068000004;0.068000004;0.067000002;0.064999998;
0.075000003;0.068999998;0.071999997;0.07;0.067000002;0.067000002;0.074000001;0.064999998;0.066;0.07;
0.071000002;0.064999998;0.07;0.068999998;0.066;0.064000003;0.064999998;0.068999998;0.064999998;0.064999998;
0.07;0.068999998;0.068000004;0.066;0.067000002;0.067000002;0.066;0.068000004;0.072999999;0.071000002;
0.068999998;0.067000002;0.068999998;0.071000002;0.07;0.061999999;0.064999998;0.071999997;0.071999997;0.07;
0.072999999;0.071999997;0.068000004;0.064999998;0.072999999;0.071000002;0.067000002;0.074000001;0.066;0.063000001;
0.066;0.071999997;0.071999997;0.064000003;0.064000003;0.064999998;0.066;0.063000001;0.067000002;0.068999998;
0.066;0.064999998;0.061999999;0.064999998;0.063000001;0.063000001;0.059999999;0.063000001;0.064999998;0.061999999;
0.063000001;0.063000001;0.064999998;0.061999999;0.064000003;0.066;0.059999999;0.063000001;0.064000003;0.063000001;
0.068000004;0.068999998;0.068999998;0.07;0.068000004;0.068000004;0.064999998;0.068000004;0.068000004;0.077;
0.074000001;0.072999999;0.071999997;0.07;0.063000001;0.071999997;0.068999998;0.07;0.07;0.068000004;
0.068000004;0.068999998;0.067000002;0.071999997;0.068000004;0.068999998;0.071999997;0.067000002;0.067000002;0.061999999;
0.079999998;0.082999997;0.081;0.074000001;0.064000003;0.064999998;0.066;0.064999998;0.064999998;0.063000001;
0.068000004;0.066;0.068000004;0.066;0.071000002;0.064999998;0.068999998;0.064000003;0.064999998;0.066;
0.07;0.068000004;0.064000003;0.066;0.067000002;0.067000002;0.068000004;0.066;0.068000004;0.066;
0.068999998;0.068000004;0.068999998;0.077;0.067000002;0.07;0.067000002;0.064000003;0.066;0.067000002;
0.071000002;0.068999998;0.068999998;0.067000002;0.071999997;0.068000004;0.074000001;0.068000004;0.07;0.068000004;
0.071000002;0.068999998;0.067000002;0.067000002;0.075000003;0.072999999;0.075000003;0.072999999;0.07;0.075000003;
0.066;0.066;0.07;0.068999998;0.068000004;0.068000004;0.066;0.064000003;0.07;0.067000002;
0.068999998;0.071000002;0.064999998;0.068999998;0.068999998;0.067000002;0.072999999;0.067000002;0.064999998;0.064999998;
0.067000002;0.066;0.066;0.066;0.066;0.064000003;0.067000002;0.064000003;0.066;0.067000002;
0.068000004;0.068000004;0.068000004;0.066;0.064999998;0.066;0.064999998;0.071000002;0.064999998;0.068999998;
0.068000004;0.067000002;0.07;0.068999998;0.067000002;0.066;0.066;0.064999998;0.064999998;0.067000002;
0.074000001;0.072999999;0.066;0.064000003;0.067000002;0.064999998;0.067000002;0.064000003;0.066;0.074000001;
0.072999999;0.068999998;0.068000004;0.066;0.064999998;0.067000002;0.064000003;0.066;0.066;0.063000001;
0.07;0.071000002;0.068999998;0.067000002;0.071000002;0.068000004;0.066;0.064999998;0.082999997;0.072999999;
0.07;0.07;0.066;0.068999998;0.068000004;0.064999998;0.066;0.07;0.064000003;0.063000001;
0.068999998;0.068000004;0.068999998;0.071000002;0.074000001;0.071999997;0.068999998;0.068999998;0.064000003;0.064999998;
0.07;0.067000002;0.067000002;0.068000004;0.067000002;0.07;0.064999998;0.067000002;0.068999998;0.064000003;
0.07;0.071999997;0.07;0.07;0.068999998;0.064000003;0.066;0.067000002;0.071000002;0.071999997;
0.067000002;0.067000002;0.067000002;0.068000004;0.068000004;0.068999998;0.068000004;0.066;0.068000004;0.068000004;
0.074000001;0.067000002;0.068999998;0.067000002;0.066;0.067000002;0.064000003;0.064999998;0.071999997;0.066;
0.07;0.068999998;0.071000002;0.067000002;0.068999998;0.068999998;0.066;0.071999997;0.068000004;0.068000004;
0.07;0.066;0.07;0.066;0.068999998;0.068000004;0.066;0.066;0.071000002;0.064999998;
0.068000004;0.068000004;0.067000002;0.067000002;0.067000002;0.068000004;0.066;0.068000004;0.064000003;0.064999998;
0.068000004;0.068000004;0.075000003;0.071000002;0.07;0.074000001;0.068000004;0.07;0.066;0.068000004;
0.072999999;0.075000003;0.071000002;0.07;0.075999998;0.07;0.068000004;0.068999998;0.067000002;0.071999997;
0.068000004;0.068999998;0.068000004;0.064999998;0.068000004;0.064000003;0.071999997;0.064999998;0.067000002;0.064999998;
0.074000001;0.071000002;0.07;0.071000002;0.064999998;0.068000004;0.07;0.067000002;0.064999998;0.064999998;
0.067000002;0.072999999;0.07;0.066;0.067000002;0.067000002;0.064000003;0.067000002;0.066;0.064999998;
0.068000004;0.068999998;0.068999998;0.071000002;0.067000002;0.066;0.067000002;0.064999998;0.064999998;0.063000001;
0.067000002;0.066;0.068999998;0.066;0.067000002;0.066;0.066;0.064999998;0.068000004;0.068999998;
0.067000002;0.068000004;0.07;0.068000004;0.067000002;0.067000002;0.068999998;0.068999998;0.066;0.068000004;
0.068999998;0.066;0.07;0.068000004;0.064000003;0.067000002;0.066;0.064000003;0.066;0.068000004;
0.068000004;0.072999999;0.068999998;0.066;0.064999998;0.066;0.063000001;0.061999999;0.063000001;0.064999998;
0.067000002;0.066;0.066;0.064000003;0.067000002;0.064000003;0.064000003;0.066;0.064000003;0.064999998;
0.071999997;0.066;0.061000001;0.075999998;0.071000002;0.064000003;0.061999999;0.067000002;0.068000004;0.067000002;
0.066;0.064999998;0.064999998;0.064999998;0.064000003;0.061999999;0.063000001;0.064000003;0.066;0.063000001;
0.066;0.066;0.067000002;0.066;0.064000003;0.068000004;0.061999999;0.064999998;0.068000004;0.07;
0.067000002;0.072999999;0.067000002;0.066;0.072999999;0.064000003;0.07;0.064000003;0.067000002;0.064000003;
0.064999998;0.064999998;0.068999998;0.064999998;0.07;0.071000002;0.066;0.068999998;0.07;0.064000003;
0.071000002;0.068000004;0.07;0.064999998;0.066;0.071999997;0.066;0.066;0.071999997;0.064999998;
0.07;0.068999998;0.066;0.064000003;0.064000003;0.072999999;0.067000002;0.067000002;0.068000004;0.064000003;
0.071000002;0.064000003;0.072999999;0.068000004;0.067000002;0.066;0.063000001;0.064999998;0.068999998;0.064999998;
0.064999998;0.068000004;0.064999998;0.064999998;0.064000003;0.064999998;0.064000003;0.061999999;0.063000001;0.064000003;
0.064999998;0.064999998;0.068999998;0.07;0.064999998;0.064000003;0.071999997;0.064000003;0.064999998;0.075999998;
0.064999998;0.067000002;0.066;0.067000002;0.063000001;0.064000003;0.064999998;0.064999998;0.061999999;0.064000003;
0.064000003;0.064000003;0.068000004;0.071000002;0.072999999;0.068000004;0.064999998;0.063000001;0.061999999;0.061999999;
0.068999998;0.066;0.064999998;0.064999998;0.061000001;0.063000001;0.063000001;0.061999999;0.064000003;0.064000003;
0.066;0.066;0.064999998;0.067000002;0.067000002;0.083999999;0.085000001;0.074000001;0.071999997;0.061999999;
0.071000002;0.067000002;0.066;0.064999998;0.064999998;0.059999999;0.064999998;0.066;0.064000003;0.067000002;
0.064999998;0.066;0.068000004;0.068000004;0.064999998;0.064000003;0.067000002;0.064000003;0.07;0.068000004;
0.072999999;0.071999997;0.066;0.067000002;0.064000003;0.064000003;0.064000003;0.063000001;0.063000001;0.061999999;
0.063000001;0.066;0.064999998;0.064999998;0.064000003;0.064000003;0.061999999;0.068000004;0.066;0.064000003;
0.068000004;0.064999998;0.068000004;0.066;0.07;0.063000001;0.061999999;0.061999999;0.061999999;0.063000001;
0.066;0.067000002;0.061999999;0.064000003;0.063000001;0.064999998;0.068999998;0.064000003;0.064999998;0.061999999;
0.066;0.066;0.064000003;0.066;0.064999998;0.063000001;0.064000003;0.064000003;0.059999999;0.061999999;
0.068000004;0.071000002;0.074000001;0.068999998;0.064999998;0.063000001;0.068999998;0.068000004;0.063000001;0.077;
0.071000002;0.066;0.064999998;0.064999998;0.066;0.071999997;0.068000004;0.068999998;0.067000002;0.064000003;
0.07;0.066;0.068000004;0.068000004;0.07;0.061999999;0.063000001;0.064000003;0.063000001;0.066;
0.067000002;0.064999998;0.067000002;0.067000002;0.063000001;0.064999998;0.067000002;0.075000003;0.071999997;0.07;
0.064999998;0.068000004;0.071000002;0.068000004;0.067000002;0.063000001;0.064999998;0.064000003;0.068000004;0.066;
0.066;0.068000004;0.064000003;0.064000003;0.07;0.066;0.064000003;0.064000003;0.064000003;0.071000002;
0.068000004;0.071999997;0.079999998;0.075999998;0.081;0.079999998;0.066;0.063000001;0.066;0.061999999;
0.067000002;0.063000001;0.067000002;0.067000002;0.071000002;0.061999999;0.064999998;0.067000002;0.064000003;0.061999999;
0.068000004;0.066;0.064000003;0.067000002;0.068000004;0.067000002;0.068000004;0.081;0.068999998;0.066;
0.064999998;0.064999998;0.064999998;0.068000004;0.061999999;0.066;0.064000003;0.064000003;0.071999997;0.064000003;
0.071000002;0.068000004;0.07;0.063000001;0.066;0.068000004;0.068000004;0.071000002;0.068999998;0.07;
0.074000001;0.075999998;0.071000002;0.075000003;0.071999997;0.068000004;0.071000002;0.066;0.064999998;0.066;
0.064999998;0.066;0.07;0.066;0.075000003;0.064999998;0.066;0.061999999;0.061999999;0.066;
0.075999998;0.067000002;0.066;0.068000004;0.066;0.066;0.064999998;0.064999998;0.066;0.066;
0.066;0.064999998;0.063000001;0.071999997;0.067000002;0.067000002;0.071000002;0.067000002;0.066;0.07;
0.064000003;0.078000002;0.071000002;0.064999998;0.063000001;0.064000003;0.063000001;0.064000003;0.064000003;0.07;
0.064999998;0.063000001;0.064999998;0.066;0.064999998;0.064999998;0.063000001;0.068000004;0.063000001;0.063000001;
0.064000003;0.07;0.074000001;0.064999998;0.063000001;0.064000003;0.066;0.064000003;0.061999999;0.068000004;
0.061999999;0.064999998;0.068999998;0.066;0.067000002;0.071000002;0.064999998;0.063000001;0.066;0.07;
0.066;0.066;0.064999998;0.066;0.072999999;0.061999999;0.064000003;0.066;0.064999998;0.067000002;
0.064999998;0.067000002;0.068000004;0.066;0.067000002;0.071999997;0.071000002;0.07;0.068999998;0.07;
0.066;0.067000002;0.067000002;0.066;0.066;0.064000003;0.061999999;0.066;0.071000002;0.064000003;
0.068000004;0.066;0.066;0.066;0.066;0.066;0.067000002;0.07;0.066;0.067000002;
0.068000004;0.066;0.068000004;0.072999999;0.064000003;0.068000004;0.064000003;0.064999998;0.064999998;0.061999999;
0.067000002;0.068000004;0.067000002;0.066;0.063000001;0.063000001;0.061999999;0.064999998;0.063000001;0.066;
0.067000002;0.066;0.07;0.066;0.061999999;0.061999999;0.061999999;0.067000002;0.059999999;0.063000001;
0.064000003;0.063000001;0.064999998;0.063000001;0.063000001;0.07;0.064999998;0.063000001;0.061999999;0.064999998;
0.068000004;0.072999999;0.064999998;0.067000002;0.063000001;0.061999999;0.067000002;0.066;0.061999999;0.061999999;
0.066;0.071000002;0.071000002;0.064999998;0.068000004;0.072999999;0.064999998;0.067000002;0.064000003;0.064000003;
0.071999997;0.068999998;0.067000002;0.068000004;0.063000001;0.064999998;0.066;0.063000001;0.064000003;0.059999999;
0.067000002;0.068999998;0.068999998;0.067000002;0.064000003;0.064999998;0.066;0.064000003;0.064999998;0.064999998;
0.066;0.07;0.068000004;0.066;0.066;0.061999999;0.064999998;0.066;0.064999998;0.071999997;
0.067000002;0.068000004;0.066;0.064999998;0.066;0.066;0.064999998;0.064000003;0.064000003;0.064000003;
0.064999998;0.066;0.064000003;0.064999998;0.064999998;0.063000001;0.071000002;0.066;0.064999998;0.063000001;
0.067000002;0.064999998;0.07;0.064999998;0.068999998;0.064999998;0.064999998;0.061000001;0.064000003;0.071999997;
0.064000003;0.07;0.071000002;0.071000002;0.067000002;0.064999998;0.064000003;0.066;0.067000002;0.064999998;
0.068000004;0.068999998;0.067000002;0.071000002;0.068999998;0.064000003;0.064999998;0.07;0.066;0.064000003;
0.066;0.066;0.068000004;0.068999998;0.068999998;0.066;0.061000001;0.061000001;0.067000002;0.066;
0.064000003;0.072999999;0.067000002;0.068000004;0.067000002;0.064999998;0.067000002;0.064999998;0.068000004;0.067000002;
0.068999998;0.068999998;0.066;0.064000003;0.064000003;0.067000002;0.064999998;0.064000003;0.063000001;0.064000003;
0.064999998;0.068000004;0.068000004;0.064000003;0.066;0.064000003;0.068000004;0.064000003;0.064000003;0.064000003;
0.068000004;0.07;0.07;0.071000002;0.07;0.068999998;0.07;0.067000002;0.068999998;0.068999998;
0.068999998;0.07;0.071999997;0.07;0.068999998;0.071000002;0.067000002;0.068999998;0.068000004;0.068000004;
0.07;0.068999998;0.067000002;0.071000002;0.07;0.068000004;0.068000004;0.068000004;0.07;0.066;
0.071999997;0.068999998;0.066;0.067000002;0.068000004;0.072999999;0.071999997;0.067000002;0.067000002;0.068000004;
0.068000004;0.064999998;0.071999997;0.068000004;0.068000004;0.066;0.067000002;0.068999998;0.068000004;0.068000004;
0.109;0.072999999;0.071999997;0.07;0.075000003;0.071999997;0.068000004;0.071000002;0.068999998;0.068000004;
0.07;0.07;0.071000002;0.075000003;0.067000002;0.064000003;0.096000001;0.068999998;0.068000004;0.068000004;
0.071000002;0.068999998;0.064999998;0.071999997;0.064999998;0.066;0.067000002;0.066;0.067000002;0.075999998;
0.068000004;0.07;0.068999998;0.068000004;0.072999999;0.061000001;0.066;0.068000004;0.068999998;0.068000004;
0.079999998;0.071000002;0.07;0.068999998;0.064000003;0.075000003;0.074000001;0.066;0.064999998;0.067000002;
0.068999998;0.071000002;0.068999998;0.07;0.071000002;0.071999997;0.067000002;0.064999998;0.064000003;0.068000004;
0.071999997;0.071999997;0.07;0.072999999;0.071000002;0.07;0.068000004;0.066;0.064000003;0.072999999;
0.068999998;0.068000004;0.081;0.068999998;0.074000001;0.068000004;0.068999998;0.068999998;0.064999998;0.068999998;
0.067000002;0.067000002;0.068000004;0.071000002;0.068999998;0.074000001;0.068999998;0.066;0.067000002;0.066;
0.071999997;0.071999997;0.068999998;0.068999998;0.068000004;0.07;0.068000004;0.068000004;0.074000001;0.068000004;
0.067000002;0.07;0.07;0.072999999;0.066;0.07;0.071999997;0.071000002;0.068000004;0.071999997;
0.07;0.072999999;0.068000004;0.068999998;0.071000002;0.067000002;0.071999997;0.07;0.068999998;0.07;
0.068000004;0.068999998;0.071000002;0.068000004;0.066;0.068999998;0.066;0.093000002;0.067000002;0.071000002;
0.071000002;0.066;0.07;0.068999998;0.068999998;0.067000002;0.068999998;0.072999999;0.071000002;0.072999999;
0.067000002;0.061000001;0.064000003;0.071999997;0.067000002;0.068999998;0.071999997;0.071999997;0.071000002;0.068999998;
0.074000001;0.074000001;0.059999999;0.067000002;0.071999997;0.068999998;0.071000002;0.066;0.068999998;0.067000002;
0.066;0.068000004;0.068000004;0.063000001;0.061000001;0.063000001;0.067000002;0.064999998;0.063000001;0.064000003;
0.066;0.066;0.079000004;0.072999999;0.074000001;0.067000002;0.066;0.066;0.064000003;0.07;
0.068000004;0.07;0.079000004;0.068000004;0.066;0.068999998;0.067000002;0.059999999;0.063000001;0.068000004;
0.07;0.064000003;0.071000002;0.071000002;0.067000002;0.064999998;0.075999998;0.072999999;0.064999998;0.066;
0.079999998;0.072999999;0.067000002;0.061000001;0.067000002;0.071000002;0.066;0.071000002;0.07;0.066;
0.068000004;0.068999998;0.068999998;0.068999998;0.064999998;0.07;0.074000001;0.067000002;0.07;0.075000003;
0.067000002;0.066;0.068000004;0.064999998;0.064999998;0.064000003;0.071000002;0.068000004;0.066;0.064999998;
0.07;0.074000001;0.068999998;0.068000004;0.07;0.067000002;0.064999998;0.067000002;0.066;0.067000002;
0.07;0.068999998;0.068000004;0.068999998;0.067000002;0.064000003;0.067000002;0.066;0.064999998;0.061999999;
0.074000001;0.068999998;0.07;0.066;0.067000002;0.067000002;0.068999998;0.072999999;0.064999998;0.068999998;
0.079999998;0.071999997;0.068000004;0.066;0.074000001;0.068999998;0.064999998;0.068999998;0.064000003;0.071999997;
0.067000002;0.07;0.078000002;0.066;0.063000001;0.066;0.063000001;0.071999997;0.07;0.068000004;
0.066;0.068000004;0.066;0.064000003;0.064000003;0.064999998;0.064000003;0.064999998;0.064999998;0.066;
0.107;0.067000002;0.068000004;0.064000003;0.064999998;0.064000003;0.063000001;0.067000002;0.066;0.063000001;
0.066;0.064999998;0.061000001;0.068999998;0.063000001;0.067000002;0.075999998;0.071000002;0.068000004;0.068000004;
0.071999997;0.068999998;0.067000002;0.064000003;0.064999998;0.067000002;0.07;0.075000003;0.064999998;0.068000004;
0.068999998;0.068000004;0.07;0.068999998;0.074000001;0.072999999;0.083999999;0.082000002;0.074000001;0.07;
0.081;0.086000003;0.086999997;0.068999998;0.074000001;0.067000002;0.068999998;0.066;0.075000003;0.092;
0.075999998;0.086999997;0.092;0.082000002;0.075999998;0.071999997;0.082999997;0.079000004;0.074000001;0.082999997;
0.077;0.071999997;0.074000001;0.068999998;0.071999997;0.083999999;0.074000001;0.066;0.068000004;0.068000004;
0.071000002;0.071000002;0.068999998;0.068999998;0.066;0.068999998;0.064999998;0.07;0.075000003;0.066;
0.07;0.074000001;0.07;0.071999997;0.068999998;0.068000004;0.066;0.07;0.07;0.068000004;
0.07;0.067000002;0.07;0.079999998;0.068999998;0.068000004;0.07;0.068999998;0.067000002;0.067000002;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [2000] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
540;541;542;543;544;545;546;547;548;549;
550;551;552;553;554;555;556;557;558;559;
560;561;562;563;564;565;566;567;568;569;
570;571;572;573;574;575;576;577;578;579;
580;581;582;583;584;585;586;587;588;589;
590;591;592;593;594;595;596;597;598;599;
600;601;602;603;604;605;606;607;608;609;
610;611;612;613;614;615;616;617;618;619;
620;621;622;623;624;625;626;627;628;629;
630;631;632;633;634;635;636;637;638;639;
640;641;642;643;644;645;646;647;648;649;
650;651;652;653;654;655;656;657;658;659;
660;661;662;663;664;665;666;667;668;669;
670;671;672;673;674;675;676;677;678;679;
680;681;682;683;684;685;686;687;688;689;
690;691;692;693;694;695;696;697;698;699;
700;701;702;703;704;705;706;707;708;709;
710;711;712;713;714;715;716;717;718;719;
720;721;722;723;724;725;726;727;728;729;
730;731;732;733;734;735;736;737;738;739;
740;741;742;743;744;745;746;747;748;749;
750;751;752;753;754;755;756;757;758;759;
760;761;762;763;764;765;766;767;768;769;
770;771;772;773;774;775;776;777;778;779;
780;781;782;783;784;785;786;787;788;789;
790;791;792;793;794;795;796;797;798;799;
800;801;802;803;804;805;806;807;808;809;
810;811;812;813;814;815;816;817;818;819;
820;821;822;823;824;825;826;827;828;829;
830;831;832;833;834;835;836;837;838;839;
840;841;842;843;844;845;846;847;848;849;
850;851;852;853;854;855;856;857;858;859;
860;861;862;863;864;865;866;867;868;869;
870;871;872;873;874;875;876;877;878;879;
880;881;882;883;884;885;886;887;888;889;
890;891;892;893;894;895;896;897;898;899;
900;901;902;903;904;905;906;907;908;909;
910;911;912;913;914;915;916;917;918;919;
920;921;922;923;924;925;926;927;928;929;
930;931;932;933;934;935;936;937;938;939;
940;941;942;943;944;945;946;947;948;949;
950;951;952;953;954;955;956;957;958;959;
960;961;962;963;964;965;966;967;968;969;
970;971;972;973;974;975;976;977;978;979;
980;981;982;983;984;985;986;987;988;989;
990;991;992;993;994;995;996;997;998;999;
1000;1001;1002;1003;1004;1005;1006;1007;1008;1009;
1010;1011;1012;1013;1014;1015;1016;1017;1018;1019;
1020;1021;1022;1023;1024;1025;1026;1027;1028;1029;
1030;1031;1032;1033;1034;1035;1036;1037;1038;1039;
1040;1041;1042;1043;1044;1045;1046;1047;1048;1049;
1050;1051;1052;1053;1054;1055;1056;1057;1058;1059;
1060;1061;1062;1063;1064;1065;1066;1067;1068;1069;
1070;1071;1072;1073;1074;1075;1076;1077;1078;1079;
1080;1081;1082;1083;1084;1085;1086;1087;1088;1089;
1090;1091;1092;1093;1094;1095;1096;1097;1098;1099;
1100;1101;1102;1103;1104;1105;1106;1107;1108;1109;
1110;1111;1112;1113;1114;1115;1116;1117;1118;1119;
1120;1121;1122;1123;1124;1125;1126;1127;1128;1129;
1130;1131;1132;1133;1134;1135;1136;1137;1138;1139;
1140;1141;1142;1143;1144;1145;1146;1147;1148;1149;
1150;1151;1152;1153;1154;1155;1156;1157;1158;1159;
1160;1161;1162;1163;1164;1165;1166;1167;1168;1169;
1170;1171;1172;1173;1174;1175;1176;1177;1178;1179;
1180;1181;1182;1183;1184;1185;1186;1187;1188;1189;
1190;1191;1192;1193;1194;1195;1196;1197;1198;1199;
1200;1201;1202;1203;1204;1205;1206;1207;1208;1209;
1210;1211;1212;1213;1214;1215;1216;1217;1218;1219;
1220;1221;1222;1223;1224;1225;1226;1227;1228;1229;
1230;1231;1232;1233;1234;1235;1236;1237;1238;1239;
1240;1241;1242;1243;1244;1245;1246;1247;1248;1249;
1250;1251;1252;1253;1254;1255;1256;1257;1258;1259;
1260;1261;1262;1263;1264;1265;1266;1267;1268;1269;
1270;1271;1272;1273;1274;1275;1276;1277;1278;1279;
1280;1281;1282;1283;1284;1285;1286;1287;1288;1289;
1290;1291;1292;1293;1294;1295;1296;1297;1298;1299;
1300;1301;1302;1303;1304;1305;1306;1307;1308;1309;
1310;1311;1312;1313;1314;1315;1316;1317;1318;1319;
1320;1321;1322;1323;1324;1325;1326;1327;1328;1329;
1330;1331;1332;1333;1334;1335;1336;1337;1338;1339;
1340;1341;1342;1343;1344;1345;1346;1347;1348;1349;
1350;1351;1352;1353;1354;1355;1356;1357;1358;1359;
1360;1361;1362;1363;1364;1365;1366;1367;1368;1369;
1370;1371;1372;1373;1374;1375;1376;1377;1378;1379;
1380;1381;1382;1383;1384;1385;1386;1387;1388;1389;
1390;1391;1392;1393;1394;1395;1396;1397;1398;1399;
1400;1401;1402;1403;1404;1405;1406;1407;1408;1409;
1410;1411;1412;1413;1414;1415;1416;1417;1418;1419;
1420;1421;1422;1423;1424;1425;1426;1427;1428;1429;
1430;1431;1432;1433;1434;1435;1436;1437;1438;1439;
1440;1441;1442;1443;1444;1445;1446;1447;1448;1449;
1450;1451;1452;1453;1454;1455;1456;1457;1458;1459;
1460;1461;1462;1463;1464;1465;1466;1467;1468;1469;
1470;1471;1472;1473;1474;1475;1476;1477;1478;1479;
1480;1481;1482;1483;1484;1485;1486;1487;1488;1489;
1490;1491;1492;1493;1494;1495;1496;1497;1498;1499;
1500;1501;1502;1503;1504;1505;1506;1507;1508;1509;
1510;1511;1512;1513;1514;1515;1516;1517;1518;1519;
1520;1521;1522;1523;1524;1525;1526;1527;1528;1529;
1530;1531;1532;1533;1534;1535;1536;1537;1538;1539;
1540;1541;1542;1543;1544;1545;1546;1547;1548;1549;
1550;1551;1552;1553;1554;1555;1556;1557;1558;1559;
1560;1561;1562;1563;1564;1565;1566;1567;1568;1569;
1570;1571;1572;1573;1574;1575;1576;1577;1578;1579;
1580;1581;1582;1583;1584;1585;1586;1587;1588;1589;
1590;1591;1592;1593;1594;1595;1596;1597;1598;1599;
1600;1601;1602;1603;1604;1605;1606;1607;1608;1609;
1610;1611;1612;1613;1614;1615;1616;1617;1618;1619;
1620;1621;1622;1623;1624;1625;1626;1627;1628;1629;
1630;1631;1632;1633;1634;1635;1636;1637;1638;1639;
1640;1641;1642;1643;1644;1645;1646;1647;1648;1649;
1650;1651;1652;1653;1654;1655;1656;1657;1658;1659;
1660;1661;1662;1663;1664;1665;1666;1667;1668;1669;
1670;1671;1672;1673;1674;1675;1676;1677;1678;1679;
1680;1681;1682;1683;1684;1685;1686;1687;1688;1689;
1690;1691;1692;1693;1694;1695;1696;1697;1698;1699;
1700;1701;1702;1703;1704;1705;1706;1707;1708;1709;
1710;1711;1712;1713;1714;1715;1716;1717;1718;1719;
1720;1721;1722;1723;1724;1725;1726;1727;1728;1729;
1730;1731;1732;1733;1734;1735;1736;1737;1738;1739;
1740;1741;1742;1743;1744;1745;1746;1747;1748;1749;
1750;1751;1752;1753;1754;1755;1756;1757;1758;1759;
1760;1761;1762;1763;1764;1765;1766;1767;1768;1769;
1770;1771;1772;1773;1774;1775;1776;1777;1778;1779;
1780;1781;1782;1783;1784;1785;1786;1787;1788;1789;
1790;1791;1792;1793;1794;1795;1796;1797;1798;1799;
1800;1801;1802;1803;1804;1805;1806;1807;1808;1809;
1810;1811;1812;1813;1814;1815;1816;1817;1818;1819;
1820;1821;1822;1823;1824;1825;1826;1827;1828;1829;
1830;1831;1832;1833;1834;1835;1836;1837;1838;1839;
1840;1841;1842;1843;1844;1845;1846;1847;1848;1849;
1850;1851;1852;1853;1854;1855;1856;1857;1858;1859;
1860;1861;1862;1863;1864;1865;1866;1867;1868;1869;
1870;1871;1872;1873;1874;1875;1876;1877;1878;1879;
1880;1881;1882;1883;1884;1885;1886;1887;1888;1889;
1890;1891;1892;1893;1894;1895;1896;1897;1898;1899;
1900;1901;1902;1903;1904;1905;1906;1907;1908;1909;
1910;1911;1912;1913;1914;1915;1916;1917;1918;1919;
1920;1921;1922;1923;1924;1925;1926;1927;1928;1929;
1930;1931;1932;1933;1934;1935;1936;1937;1938;1939;
1940;1941;1942;1943;1944;1945;1946;1947;1948;1949;
1950;1951;1952;1953;1954;1955;1956;1957;1958;1959;
1960;1961;1962;1963;1964;1965;1966;1967;1968;1969;
1970;1971;1972;1973;1974;1975;1976;1977;1978;1979;
1980;1981;1982;1983;1984;1985;1986;1987;1988;1989;
1990;1991;1992;1993;1994;1995;1996;1997;1998;1999;
    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[2] {
    name="TrialTestOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_72";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [40] 199;199;199;199;199;199;199;199;199;199;
199;199;199;199;199;199;199;199;199;199;
199;199;199;199;199;199;199;199;199;199;
199;199;199;199;199;199;199;199;199;199;
      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_73";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [40] 9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
      };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_74";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [40] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
      };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [40] "a_targ_e";"a_f1_e";"a_f2_e";"a_f3_e";"a_f4_e";"a_targ_u";"a_f1_u";"a_f2_u";"a_f3_u";"a_f4_u";
"b_targ_e";"b_f1_e";"b_f2_e";"b_f3_e";"b_f4_e";"b_targ_u";"b_f1_u";"b_f2_u";"b_f3_u";"b_f4_u";
"c_targ_e";"c_f1_e";"c_f2_e";"c_f3_e";"c_f4_e";"c_targ_u";"c_f1_u";"c_f2_u";"c_f3_u";"c_f4_u";
"d_targ_e";"d_f1_e";"d_f2_e";"d_f3_e";"d_f4_e";"d_targ_u";"d_f1_u";"d_f2_u";"d_f3_u";"d_f4_u";
      };
     };
     float_Data @[4] {
      name="minus_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
      ar {
       name="ar";
      [40] 80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
      };
     };
     float_Data @[5] {
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [40] 0.53606021;3.5964689;6.4489141;10.90171;10.691674;2.8106985;3.2957919;8.074544;14.700522;9.5764027;
2.5759175;5.1474056;7.2147765;9.7992525;12.699161;2.8898671;5.5015516;8.629838;11.526306;10.868034;
2.134501;5.067946;8.0197086;12.276152;10.973543;1.9056045;5.3172345;13.598516;13.252754;12.700071;
1.5921481;2.9366975;6.5730395;9.2628231;11.385362;2.2048507;3.2994983;6.5604281;9.9568644;12.628962;
      };
     };
     float_Data @[6] {
      name="DG_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 20;20;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=20;
      matrix_col_width=10;
      ar {
       name="ar";
      [20 20 40] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.96726805;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.97596359;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.8833037;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.97400838;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.96974421;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.91047281;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.52847177;
0;0;0;0;0;8.827725e-12;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1.2659547e-12;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1.3230785e-09;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.00038244508;0;0.00020418223;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.12994415;0;
0;0;0;0;7.0261631e-05;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;3.3114841e-13;0.010407129;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;6.8701594e-10;0;0;0;
0;0;0;0;0;0;0;0;3.0499418e-13;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.2379822e-10;4.1807037e-11;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.5867635e-10;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.89367002;0;0;0.85731113;0.40900025;1.2004973e-10;0;0;0;0;
0;0;0;0;0;1.1029678e-13;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.94409382;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.5357034e-18;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;3.7338629e-14;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;8.1811877e-06;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;2.5032364e-06;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.079749189;0;0;0.75197113;0.28657857;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.83908796;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.1294354e-15;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.98078716;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;2.3414906e-14;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;3.5336159e-12;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;5.9857157e-06;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;6.6789571e-06;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1.0934657e-17;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.97706485;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.31120047;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.44341958;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;3.2771629e-06;0;0;0;0;0;0;0.0093373768;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.92080796;
0;0.025126953;0;0.00082983967;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.74337423;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.85511601;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;4.0132168e-08;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;3.0235927e-09;0;0;0;
0;0;0;0;0;0;0;0;0;0;
2.7459328e-12;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;2.938564e-11;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.80789369;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1.1567201e-14;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1.1531528e-13;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.9391579;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.0036844271;0;
0;0;0;0;0;0;0;0;0.0014975657;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;7.3489127e-07;0;0;
0;0;0;0;0;0;0;0;9.8812389e-11;0;
0;0;0;0;0;0;0;0.00020909322;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.26113585;0;0;1.0604595e-08;7.0849173e-06;2.6888047e-11;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1.4231984e-10;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.84161961;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;2.939259e-06;0;0.9446286;
0;0.0012991256;0;0;0;0;0;0;0;0;
0;0;3.9798394e-11;0;0;0;0;0;0;0;
0;0;0;0;0.0015640638;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.061454866;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.00022556304;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;8.1035054e-13;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.9461652;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.93692696;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.93861306;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.85671455;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.9562512;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;5.8753063e-18;
0;0.95609456;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;3.4393877e-09;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.92951375;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.96695161;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;8.3324654e-09;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.00064068759;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.92826879;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.0026034738;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.9291777;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1.415097e-08;0;0;0;7.0429599e-07;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1.1275173e-05;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.80796671;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.87377602;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
4.5385209e-06;0;0;1.0510061e-05;0.93213373;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.47727543;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.97220749;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.039320063;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;9.3407923e-19;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.97481728;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;2.2296799e-10;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.64672405;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;7.9925903e-06;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;3.2442907e-12;
0;0;0;0;0.0040176567;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
2.1239208e-05;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.0017397912;0;0;0;0;
0;0;1.7508053e-09;0;0;0;0;0;0;0.62726218;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.0053952392;0;0;0;0;0;0.080339327;0;0;
0;0;0;0;0;0;0.81351876;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;9.1164489e-12;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.93361068;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.6218179e-05;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;3.2082612e-06;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.0081114592;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;7.9357435e-13;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.36942616;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1.0774407e-12;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.92305189;0;0;0;0.91692454;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1.910373e-07;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.0019993566;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.86688405;0;0;0;0.96098107;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.96882302;0;0;0;0.96787274;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.003099028;0;
0;0;0;0;2.0978881e-12;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.94691312;0;0;0;0.95450521;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.6001094e-09;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;3.9807008e-11;
0;0;0;0;0;0;0;0;0.72777075;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.85581446;0;0;0;0.96028173;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.14948185;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;5.7919689e-12;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.0010573877;0;
0;0;0;6.8369984e-05;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.86782074;0;
0;0;0;0;0.86514521;0;0;0;0.46061948;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.0068407422;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.0064795977;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2530458;0;0;0;0.47739601;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;3.8227018e-08;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;6.7104018e-12;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1.281672e-06;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.92326874;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.00061787601;0;
0;0;0;0;1.1440716e-07;0;0;0;0;1.9284387e-10;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;6.4655251e-05;0;
0;0;0;0;0;0;0;0;0.86654013;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.69012529;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
3.0339265e-07;0;0;0;0.00062083313;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;9.66571e-09;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.96118444;0;0;0;0.95952696;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.44366729;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1.2204265e-12;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;2.6095192e-11;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.3932919e-09;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;6.641198e-11;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.9367373;0;0;0;0.94766557;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.93801284;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;6.4944709e-11;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;2.3566718e-14;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;4.6592914e-11;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.78686637;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
7.1578243e-06;0;0;0;0.89824986;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.00044753184;0;0;0;0;
0;0;0;0;0;0;1.6704287e-10;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.00019802435;0;0;0;0;0;
0;0;0;0;0.00019512171;0;1.0449945e-07;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
2.9774495e-05;0;0;0;0;2.8418476e-08;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.039348654;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.0011193872;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.74660277;0;0;0;0;0.00022079438;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.4984785e-08;0;0;0;6.3430591e-05;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;9.5540269e-09;0;2.2569573e-06;0;0;0;0;0;
0;0.87393391;0;0.00061318465;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;3.9085949e-13;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.88066959;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.8602307e-08;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;6.6917184e-12;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;9.1945157e-07;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;7.3448173e-06;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;4.3906434e-10;0.90101016;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;6.2362255e-07;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;5.1266597e-06;
0;0.53840762;0;0;0;0;0;0;0;0;
0.88253295;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.04301298;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.040623557;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;2.121766e-13;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95958787;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.96539086;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.80463356;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.93052894;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.94668663;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.012314464;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;5.8283109e-18;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;6.521244e-15;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.93829083;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.94575;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;2.9663783e-09;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.0038026136;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.399488e-08;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.7845532e-15;0;0;0;0;0;0;0;0.00015036568;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.94778675;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;6.9404516e-15;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.82009768;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.00016097572;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.000151999;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.53367907;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1.2800912e-10;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.91494018;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.46115437;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;2.4912312e-12;0;0;0;0;0.51822466;0;0;
0;0;0;0;0;3.4817537e-14;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.81366956;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;9.0882812e-09;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.048784267;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.5448912e-05;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.4046524e-09;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.79075134;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;7.2177496e-13;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.51951355;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;3.1852264e-12;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.95743573;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.63714778;0;0;
2.3905311e-06;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.00010928922;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.88241035;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.0012354363;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;4.7698921e-11;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.93361235;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.6785398e-11;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.86710489;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;3.1424256e-06;0;0.00014885711;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.083999805;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;7.473525e-15;0;0;0;0;5.8315209e-06;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.93571645;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.00065736065;0;0;0;0;0;0;0;
0;5.4215748e-06;0;0;0;0;0;0;0;0;
0;0;0;0;0;1.1733895e-11;0;0;0;0;
0;2.6601967e-07;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;7.7716768e-06;0;0;0;0;0;0;0;0;
2.0888207e-13;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.00040668572;0;0;0;
1.0213091e-12;0;0;0;0;0;0;0;0;0;
0;7.7920281e-11;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;2.0408568e-07;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.5525863e-08;0;0;0.00015144912;0;0;0;0;0;
0;3.1503879e-11;0;0;0;0;0.0012667086;0;2.8893015e-11;0;
0;0;0;0;0;0;0;0;1.0185954e-06;0;
0;0;0;0;0;0;0;0;0.89288116;8.2320832e-07;
0;0;0;0;0;0;0;0;0;7.4188885e-14;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;5.8091487e-08;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.028027795;5.6576329e-07;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.83559102;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;5.1101848e-12;0;0;0;0;0;0;0;0;
4.492901e-07;0;0;0;0;0;0;0.7612229;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.7370689e-09;0;0;0;0;0;0;0;0;
0;1.2935423e-12;0;0;0;0;0;0;0;0;
0;0;4.4950679e-12;0;1.774286e-08;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.13782218;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.00010881893;0;0;0;0;0;0;0;0;0;
0;0;0;1.2533408e-10;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1.0776203e-05;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;4.9406357e-05;0;0;0;0;0.00081444893;0.264716;0;
0;0;0;0;0;0.52996081;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.50900197;0;0;0;
0;0;0;0;0;0;0.0043628667;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.8469488;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.86530137;0;0;
0;0;0;0;0;1.3478222e-05;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;3.6042596e-07;0;0;0;0;0;0;0;0;
0.15786563;0;6.8964445e-10;0.097287044;1.0601801e-05;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
     float_Data @[7] {
      name="CA3_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 10;8;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=10;
      matrix_col_width=10;
      ar {
       name="ar";
      [10 8 40] 0;0.96373844;0;0;0;0;0;0;0.84103662;0.82304651;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.73638439;0;0;0.84543198;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.76900017;0.783297;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.62543118;0;0;0;0.59686941;0;0;
0;0.95885718;0;0;0;0;0;0;0.86892313;0.79392314;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.75777179;0;0;0.86525321;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.80955553;0.74840915;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.038322605;0;0;0;0.2822355;0;0;
0;0.96506774;0;0;0;0;0;0;0.79721183;0.77893502;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.48718071;0;0;0.70366549;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.70216757;0.79929638;0;0;0;
0;0;0;0;0.00037313806;0;0;0;0;0;
0;0;0;0.66167957;0;0;0;0.67096812;0;0;
0;0.80362809;0;0;5.6516303e-09;0;2.4718315e-06;0;0.6209349;0.19972229;
0;0;0;0;0;0;5.50748e-08;0;0;1.591479e-14;
0;0;0;1.0053946e-13;0;0;0;0;0;0;
0;0;0;0;0;0;0.19058904;0;0;0.52593678;
0;0;0;0;0;0;1.9958274e-05;0;0;0;
0;0;0;0;3.8131849e-09;0.0023444728;0.33009306;0;0;0;
9.2287539e-11;0;0;0.0010276628;0;0;0;0;0;0;
0;0;0;0.00079279864;0;0;0;0.9645896;0;0;
0;0.9490931;6.6403977e-08;0;0;0;0;0;0.0012567394;0.0001431485;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.31552124;0;0;2.2124746e-05;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.021812929;0.0018442194;0;0;7.5379219e-08;
0;0;0;0;0.025442012;0;0;0;0;0;
0;0;0;0.45299822;0;0;0;0.93496341;0;0;
0;0.95943898;0;0;0;0;0;0;0.78456247;0.83368886;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.72919083;0;0;0.87823188;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.78184205;0.78094679;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.22240044;0;0;0;0.00032096941;0;0;
0;0.84923583;0;0;0;0;0;0;0.89136273;0.87455362;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.86880761;0;0;0.92229944;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.87922728;0.85797471;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;2.0339062e-08;0;0;0;0;0;0;0;0.94929171;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.87211436;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;4.7267985e-11;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1.6906599e-05;0;0;1.8711439e-14;0;0;0;
0;0;0.9421227;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;2.1153909e-07;0.88014406;0;3.6694246e-08;
0;0;0;0;0;0;0;0;0;0;
1.081879e-11;1.7992627e-10;0;0;0.88753331;0;0;1.6467608e-10;0;0;
0;0;0.91989315;0;0;0;0;0;4.0611724e-07;0;
2.356807e-07;1.2051146e-07;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;9.6222429e-08;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.86501825;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.85670322;0;0;0;0;0;
0;0;0;0;0.82000071;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.80428833;0;0;0;0;0;
0;0;0.87340045;0;0;0;0;0;0;0.85383755;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.89092106;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.91480517;0;0;0;0;0;
0.75280386;0;0.92302203;0.8388651;0;0;0;0;0.85956252;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.88378918;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.90978956;0;0;0;0;0;
0.8271451;0;0.9085896;0.87502092;0;0;0;0;0.86271954;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.90755504;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.93747771;0;0;0;0;0;
0;0;0.92971194;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.91380233;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.00080330466;0;0.93064922;0;0;0;0;0;
0;0;0.92054868;0;0;0;0.00056582526;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.85141635;0.76759571;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.71675164;0;0;0;0.83311629;0;
0;0;0.85731;0;0.81634855;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.89777899;0;0;0;
0;0;0;0;0;0;0;0.8570978;0;0;
0;0;0;0;0;0;0;0.596187;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.77869684;0;0;0;0;0;
0.88021863;0;0.7544592;0.89456511;0;0;0;0;0.91333133;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.89631236;0;0;0.90729189;0;0;0;0;0.9088757;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;7.8266782e-10;0;2.4133439e-07;0;0.73283613;0.88896841;0;
0;0;2.1389283e-07;0;0;0;0;0;0;0;
0;0;0;0;0.85509932;0;0;0;0;0;
3.7779127e-08;0;0.83474201;2.6820211e-07;0.7897644;0;1.5057157e-07;0;2.9637599e-07;0.81832153;
0;0;0;0;0;0;0.77726871;0;1.1900728e-12;2.2684287e-07;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1.2252833e-07;0;0;1.7809976e-08;0;0;2.913863e-07;0;
0;0;0;0;0;0;0.0038891616;0;0;0;
0;0;0;0;0;0;2.1016341e-11;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;8.9044015e-12;0;0;0;0;0;
0;0;0;0;0;0;0.42639112;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.69935232;0;0;0.80823785;0;0;0;
0;0;0;0;0;0;0;0.96954513;0;0;
0;0;0;0;0;0;0.66819143;0;0;0;
0;0;0;0;0;0;5.3050467e-06;0;0;0;
0;0;0;0;0;0;0;0;0.032728188;0;
0;0;0;0;0.034304727;0;0;0;0;0;
0;0;0;0;0;0;0.22506917;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.66409272;0;0;0.86349922;0;0;0;
0;0;0;0;0;0;0;0.96345979;0;0;
0;0;0;0;0;0;0.052708931;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;5.4546024e-07;0;0;0;0;0;
0;0;0;0;0;0;0.65245843;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.87310225;0;0;0.87384003;0;0;0;
0;0;0;0;0;0;0;0.96453738;0;0;
0;0;0;0;0;0;0.17034683;0;0;0;
0;0;0;0;0;0;1.9304662e-06;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;5.3341424e-05;0;0;0;0;0;
0;0;0;0;0;0;0.67363644;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.87452054;0;0;0.83518106;0;0;0;
0;0;0;0;0;0;0;0.9644953;0;0;
0;1.8653994e-09;0;0;0;0;0.14290622;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;2.9198527e-10;0;
0;0;0;0;7.5796675e-06;0;0;0;0;0;
0;0;0;0;0;0;4.2217634e-05;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.27782419;3.4411167e-13;0;0.70317864;0;0;0;
0;0;0;1.333881e-15;0;0;0;0.97483242;0;0;
0;0.050895508;0;0;0;0;3.2172245e-10;2.4337291e-05;0;0;
0;0;9.9932391e-14;0.0001985922;0;2.3739104e-11;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.53969383;
0;0;0;0;0;0;0.84537578;0;0;0;
0;0;0;0;0;0;0.0089101875;0;0;0;
1.6774624e-07;0;0;0;0.00082792796;0;0;0;0;0;
0;0;0;0.74451232;0.33054775;0;0;0.9547863;0;0;
0;0.00018575648;0;0;0;0.81825817;0;0;0;0;
0;0;0;0;0;0;0.82500213;0;0;0;
0;0;0.82745928;0;0.51975083;0;0;0;0;0;
0;0;0.693802;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.78372717;0;0;0;
0;0;0;0;0;0;0;0;0.86012882;0;
1.2441801e-06;0;0;0;0.00025887555;0;0.85031253;0;0;0;
0;0;0.8725931;0.0006047471;0;0;0;0.00060553517;0;0;
0;0;0;0;0;0;0.074490115;0;0;0;
0;0;0;0;0;0;3.8940496e-05;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;5.8234227e-06;0;0;0;0;0;
0;0;0;0;0;0;0.7513445;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.87281489;0;0;0.86479008;0;0;0;
0;0;0;0;0;0;0;0.96160781;0;0;
0;0;0;0;0;0;0.057057645;0;0;0;
0;0;0;0;0;0;0.00012455751;0;0;0;
0;0;0;0;0;0;0;0;1.3847291e-07;0;
0;0;0;0;0.87785578;0;0;0;0;0;
0;0;0;0;0;0;0.69682038;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.85305136;0;0;0.77514595;0;0;0;
0;0;0;0;0;0;0;0.95948815;0;0;
0;0;0;0;0;0;0.80931348;0.88638961;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.86224288;0;0;0;0.83263242;0;
0;0;0.87062311;0;0.78458858;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.86577314;0;0;0;
0;0;0;0;0;0;0;0.71647012;0;0;
0;0;0;0;0;0;0;1.5164095e-07;0;0;
0.83248019;0;0;0;0;0;0;0.69195503;0;0;
0;4.424021e-07;0;0;1.2441656e-07;0;0;0.85128033;0;0;
0.079769157;0.78790057;0.42158312;0;0;0.76038659;0;0;0;0;
0;0;0;0;2.174301e-11;0;0;0;0;0.00085844973;
0;0;0;0;0;0;0;0;0;0;
0;0;0.00052118988;0;0;0;0;0;0.86311346;0.79797709;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.15461029;0;0.74955094;0;0;
0;0;0;0;0;0;0.6365186;0;0;0;
0;0;2.5335352e-11;0;0.75757456;0;0;0;0;0;
0;0;0.9589749;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.50855637;0;0;
0.32036403;0;0;0;0;0;3.4129357e-12;0;0;0;
0;0;0;0;0;0;0.0010752479;0;0;0;
0;0;0;0;0;0;0;0;0;0.75934017;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.70754468;0;0;0;0;0;
0;0;0;0;0.0055700406;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.84845495;0;0;0;0;0;0;
0;0;0.96481425;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.48080987;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.74091697;0;0;0;0;0;
0;0;0;0;0.31929398;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.86286044;0;0;0;0;0;0;
0;0;0.96215987;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.41472462;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.73677099;0;0;0;0;0;
0;0;0;0;0.092818134;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.87017614;0;0;0;0;0;0;
0;0;0.96478242;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1.6828336e-08;0;0;1.7088876e-08;0;
0.80278111;0;0;7.4956688e-08;0;0;0;0;0;8.9364924e-08;
0;0;0;0;0;0;0;0.85375071;0;0;
0;0.8557955;0;0;0;0;0;0;1.1011563e-08;4.4405919e-08;
0;0;0;0;0;0;0;0;0;4.0770335e-08;
0;0;0;0;4.1655163e-08;2.8278478e-08;0;0;0;2.4841185e-08;
0;0;0;0;0;0;0;0;0.85315979;0.84886777;
0;0;0;0;0;0;0;0;0;0;
0;0;3.7448309e-08;0;5.3667556e-08;0;0;0.94327867;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;3.2429796e-08;0.94685453;0;0;0;0;0;
0;0;0.81586337;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;8.2125807e-06;0;0;0;2.0341835e-08;0;0;
0;0;5.1552121e-07;0;0;0;3.6704314e-08;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.16896729;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;3.2533444e-05;0;0;0;0;0;
0.0048119794;0;0;0.047387943;0;0;0;0;0.0038752847;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.87198699;0;0;0;0;0;0;
0;0;0.9557997;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.6183131e-06;0.2672618;0;
4.5363022e-06;0;0;0;0;0;0;0;0;0;
0.77253699;0;0;0.80724812;0;0;0;0;0.79063404;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.88991719;0;0;0;0;0;0;
0;0;0.87904298;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.68633235;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;4.6671821e-06;0;0;0;0;0;
0.81871337;0;0;0.7480135;0;0;0;0;0.83051741;0;
2.0645019e-09;0;0;0;0;0;0;0;0;0;
0;0;0;0.88435489;0;0;0;0;0;0;
0;0;0.89660358;0;0;0;0;0;0;0;
0;0;2.8899976e-11;0;0;0;0;0;0;0;
0;0.79153877;0;0;0;3.7138315e-07;0.00014167579;0;0.000173807;0;
0.85458285;0;0;0;0;0;0;0;0.00055708806;0;
0;0;0;0;0;0;0;0.84750831;0;0;
0;0.85065967;0;0;0;0;0;0;1.6775658e-07;0;
0;0;0.00010476242;0;0;0;0;0;0;0;
0;0;0;0.0035480573;1.3777878e-06;0;0;0;0;0.0015643076;
0;0;2.0645155e-06;0;0.77452922;3.5953901e-05;0;0;0.84521657;0.83508027;
0;0;0;0.7964586;0;0;0;0.83147705;0;0;
0;0.22947785;1.3556813e-07;0;1.8626311e-07;0.78152692;0;0;0;0;
0;9.8639305e-07;0;2.1255798e-06;0;0.00027297545;0;0;0;0;
0;3.014128e-06;0;8.5906606e-08;0;0;0;0.86116898;0;0;
0;0.0004024271;0;0;0;0;0;0;0;0;
0;0;0;0;0;8.3979899e-07;0;0;0;0;
0;0;0;0.8296417;0;0.84935457;0;7.1952222e-08;0;0;
0.00023083022;0;0.81222999;0;0.42341024;0;1.5396644e-07;0;0;0;
0;0.00042826234;0;0.0054332428;0;0;0;0.72120464;0.13857134;0;
      };
     };
     float_Data @[8] {
      name="CA1_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 10;10;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=10;
      matrix_col_width=10;
      ar {
       name="ar";
      [10 10 40] 0.9067117;0;1.5210463e-15;0.92053616;0;2.9443334e-12;0;0;2.9667399e-06;0;
0;0.93621689;0;0;0;0;0;0;0;0;
0.8350758;0.91443932;1.013041e-12;0;0.91562492;0;0.62989891;2.5773506e-10;2.1708031e-14;5.3529843e-14;
0;0.89351487;9.0310123e-16;2.2191933e-15;1.5622947e-13;1.6897294e-13;7.3515692e-15;0;0;0;
0;0;1.9770951e-05;0;0.91383427;0;0.86275387;0;0.91817445;1.0239412e-15;
6.5036738e-07;0;0;0;0.93449014;0.93056893;0;0;0;0.00017368632;
0;4.1764279e-12;1.4990975e-07;0.92294466;2.8245364e-14;0;0;0.93052536;0;0;
0;0.9238376;1.3215707e-16;6.2113286e-06;5.1385803e-07;0;0.9013052;0;0;0.93530518;
0;0;0;6.0202826e-14;7.2301621e-14;0;1.5690506e-14;0;0;1.1567771e-14;
5.3224944e-06;0;0.00086312013;0.90644217;0;0;0;0.92042255;0;1.5308227e-14;
0.91015816;0;9.2349546e-16;0.91376424;0;1.3971726e-13;0;0;0.00017716679;0;
2.1071403e-06;0.9342832;1.2272052e-12;0;0;1.0347081e-15;1.1787362e-15;0;0;0;
0.67305011;0.91496354;0;0;0.91943747;0;0.28065208;1.7625194e-05;7.7665718e-14;0;
0;0.85881579;3.4448971e-11;0;4.3904724e-12;2.4627395e-14;4.7324561e-14;0;0;0;
0;0;0.0001582102;0;0.89891297;0;0.86435992;0;0.91149461;0;
6.5582574e-12;0;0;0;0.91348732;0.90683085;0;0;0;4.2172751e-06;
0;0;0.00039179408;0.88616413;7.0456245e-11;0;0;0.9412533;0;0;
0;0.91356248;0;0.00035612215;1.0684932e-06;0;0.91415888;4.3820134e-10;0;0.93015164;
0;0;8.5304536e-17;1.7518153e-16;0;1.3920919e-13;0;0;0;6.498924e-14;
0.00018181273;9.8679296e-15;0.0002832397;0.84752375;0;0;4.6520486e-14;0.90598679;0;7.2494094e-14;
0.8513701;0;4.6283067e-13;0.87218541;0;0;0;0;8.9791445e-13;0;
0;0.93892014;3.2968659e-09;0;0;0;6.0857184e-07;0;0;0;
0.64352381;0.90888703;0;2.2232856e-09;0.92877328;0;0.067626096;0.00028223824;0;0;
0;0.88452083;6.5120257e-17;0;0;1.1028335e-13;0;0;0;0;
0;0;0.00026327907;0;0.93483806;0;0.81944096;0;0.90439874;0;
0.00089536677;0;0;4.8893736e-12;0.92360723;0.90818077;0;0;5.1385881e-14;0.033933803;
0;8.8958688e-11;4.5959192e-16;0.92751539;2.1208664e-12;0;1.8936236e-13;0.90231526;0;0;
0;0.87854618;5.7427882e-11;9.8760574e-07;9.8927285e-06;0;0.85170305;0.00043653656;0;0.94236434;
9.902376e-05;0;0;4.533852e-06;0;0;0;6.4199195e-17;0;8.497778e-17;
7.791898e-07;6.2956965e-06;3.5012155e-05;0.88605905;0;0;2.2025242e-13;0.91148782;0;1.6816274e-12;
0.82141185;0;2.54318e-17;0.91103905;0.03027417;0;2.3452811e-11;1.7423024e-14;3.6111283e-09;0;
3.1962379e-08;0.92373973;4.4907952e-06;0;0;0;0;0;2.8623486e-11;5.2221699e-12;
0.0010125197;0.78032756;0;0;0.915595;0;0.7618289;0.0067225043;8.1978592e-13;2.3148957e-11;
0;0.77989513;0;3.2640597e-05;1.1750697e-15;1.7161541e-13;0;0;0;0;
1.1799183e-11;0;0.68676579;0;0.82705617;0.0012796074;0.42902976;7.2898416e-08;0.078146406;0;
0.00074295467;4.6034221e-13;0;2.2111276e-13;0.82102406;0.78792334;4.0946207e-13;0;0;3.6963101e-08;
0;8.4137265e-16;0.031173244;0.88281453;6.8452046e-06;2.2716903e-13;2.8669777e-07;0.91741318;0;9.0269026e-14;
0;0.90735555;0;0.45773613;0.0032228276;0;0.90060848;0.0028670633;0;0.91626376;
0.0030800221;0;0;0.0021529319;0;0;0;0.00012899964;0;1.9096656e-15;
4.4222386e-08;0.00078406697;0.76727444;0.87793893;1.8942541e-13;0;0;0.8526175;0;1.1920683e-05;
0.017705726;0;1.9549085e-11;0.77979422;0.015618032;0;0;3.3638723e-09;0.00010964225;1.0248405e-06;
9.610651e-07;0.94143027;2.6608321e-12;0;0;0.00020734081;2.6695795e-07;1.8277936e-11;3.0700821e-06;0;
0.25903913;0.8690936;0;4.0280647e-06;0.90033448;0;0.00043800974;0.010623751;2.4398319e-09;6.2532366e-05;
0;0.0091246832;0;0.00033219872;0;0;0;0;0;1.2459835e-15;
4.7963608e-13;0;0.0091391867;1.0332574e-15;0.90986013;5.7601851e-06;0.028166497;0.00034150589;0.013907398;1.1247733e-10;
0.00011696108;0;0;2.5860116e-13;0.93889546;0.52188003;0;5.3193933e-10;3.1614134e-09;0.00048242055;
0;1.6171732e-11;0.66683447;0.88953638;0;0;3.4517128e-14;0.88570642;2.4224627e-09;0;
0;0.91409171;0;0.86319935;0.75321794;3.2780285e-11;0.92840827;0;1.3464707e-12;0.89561564;
0.036419909;0;0;5.6286805e-15;0;2.2300345e-14;0;0.018940868;2.0599901e-13;0;
0.0088681411;0.0038604417;0.89975852;0.031495653;0;0;1.7579318e-12;0.83434796;0;8.2976672e-12;
0.88022345;0;3.7930551e-11;0.92156345;0;1.8421461e-13;0;0;3.3893888e-11;0;
9.6172532e-12;0.92308694;0;0;0;0;5.244315e-12;0;0;0;
0.83249062;0.91808486;3.1636707e-11;0;0.9096536;0;0.086466581;3.2666203e-10;1.923563e-14;1.161186e-09;
0;0.90068406;0;0;7.2906715e-12;7.3398854e-07;6.2147175e-12;8.6969657e-14;0;0;
0;0;1.7802869e-12;0;0.91366142;1.5864371e-14;0.8797856;0;0.9226315;1.5498642e-11;
9.4797639e-07;0;0;0;0.92612451;0.9206894;0;0;0;8.4090607e-05;
1.298365e-10;7.6573565e-12;0;0.92907953;0;0;0;0.9182781;0;0;
0;0.91633815;0;1.2486619e-06;1.5477754e-12;0;0.87934124;5.6510478e-17;0;0.92476392;
6.3011087e-13;0;4.4108441e-16;5.5467413e-16;2.9699995e-13;1.197879e-12;2.3941168e-10;1.8520965e-14;0;8.3370645e-12;
1.290564e-15;0;4.0576488e-06;0.91085207;0;0;0;0.907287;0;3.4092314e-13;
0.89692318;0;5.639442e-06;0.91759241;0;3.3630715e-15;0;0;0.0078152874;0;
0.0014282825;0.92591733;1.0114182e-11;0;0;9.3709505e-06;0.0013237395;0;0;0;
0.045894034;0.92199463;7.660896e-14;0;0.92483819;0;0.097968943;1.406569e-05;8.2547325e-14;1.9482152e-07;
0;0.88013232;0;0;1.3453442e-07;0;1.1904085e-06;5.3570366e-16;0;0;
0;0;0.00010879982;0;0.89744997;5.1416831e-15;0.88108635;0;0.92911458;4.1787178e-14;
0.00010266548;0;0;0;0.89175779;0.8965584;0;5.3636417e-15;0;5.1369634e-06;
2.7052258e-05;0;8.9705261e-13;0.8741309;2.241659e-14;0;0;0.9226222;0;0;
0;0.90716827;0;0.0022882703;2.7525909e-11;0;0.92839551;1.8933388e-12;0;0.92557925;
6.9284584e-07;0;1.1878978e-11;0;0;2.4334235e-05;6.1426722e-06;0;0;5.6512713e-06;
1.3279264e-11;0;0.0057132943;0.89278179;0;0;0;0.88750738;0;1.4609146e-12;
1.3672963e-12;0;7.035154e-05;0.32827288;0;0;0;0;0.092751734;0;
0.0041987794;0.94322735;0.091433227;0;1.8709256e-19;0;0.90548593;5.8203864e-10;0;0;
2.751784e-06;0.94605708;8.129787e-14;0.88475627;0.9440431;0;2.8307469e-11;0.89018691;0;0.081680678;
0;0.6397711;0;0;1.1697712e-15;0;5.0248874e-15;0;4.0022349e-15;0;
0;0;3.8239909e-06;0;0.94851929;0;0.0012808956;0;0.71981251;1.0292503e-13;
0.77033782;0;0;6.3450899e-15;0.011708375;0.016359732;0;0;3.9553554e-15;0.85686159;
0.67656827;1.9654424e-05;0;0.92636859;0;0;0;1.3965187e-06;0;0;
0;0.00098154391;3.3074134e-11;0.64806771;8.0087006e-11;0;0.9215275;6.5428417e-06;0;0.9443872;
0.90297258;0;0;1.200719e-10;3.6786397e-16;0;4.5082384e-13;1.657274e-15;0;6.4375133e-13;
0;4.7649097e-13;0.021429053;0.77873027;0;0;0;8.4334516e-07;0;6.5341044e-12;
5.0071944e-06;0;0.022421742;0.76774567;5.8467884e-07;0;4.1673848e-13;0;0.0034553967;0;
0.74675709;0.94251007;0.7888906;0;0;1.1704802e-10;0.67488557;5.1616349e-05;2.0327595e-14;8.0717568e-17;
0;0.93818402;0;0.77527976;0.94509602;0;0.0041445969;0.88283247;6.8238595e-13;0.7932139;
0;0.010423061;0;5.1108953e-05;2.3902524e-13;1.1589014e-12;9.151975e-16;2.0161202e-13;9.2738178e-11;0;
3.223308e-14;5.4508709e-13;0.00011015151;8.2090802e-16;0.92049795;7.4630247e-05;1.106621e-15;0.0020403778;0.00012537485;0;
0.14790605;4.2114588e-15;3.5603505e-15;0;2.3958885e-11;0.00024455271;5.173372e-13;0;0;3.3367284e-09;
0.7096855;2.316539e-15;3.6605934e-07;0.83081692;6.660706e-11;0;0;0.0050566173;0;1.980103e-09;
0;0.012564201;0;0.89936703;8.5360142e-07;0;0.94411004;5.8171787e-11;0;0.92791516;
0.91067654;0;3.616542e-12;1.9213312e-05;0;6.1284785e-14;0;0.013157477;0;2.4771036e-11;
0;0.013769684;0.095007181;0.050056335;1.7403946e-15;0;0;9.0042279e-11;9.530789e-14;0.00040956482;
0;0;0.0064351959;0.8819555;0;0;0;6.7536866e-06;0.90772933;0.061015107;
0.87126315;0.92890334;0.0015751336;0;0;9.9159406e-06;0.88547421;4.5462339e-06;0;0;
0.00015278537;0.88751274;0;0.81826079;0.90115923;0;0;0.69832236;6.6504591e-10;0.83869427;
0;3.6601545e-05;0;4.7216586e-06;0;0;0;7.5198354e-12;6.2024956e-05;1.3189946e-12;
0;0;7.5815828e-06;6.3330782e-12;0.92305207;4.4025046e-15;0;3.9717481e-05;6.5940128e-08;3.9172972e-09;
0.061679587;0;0;0;0.0082615586;0.00035471423;0;3.3075662e-06;6.086845e-05;0.89553368;
0.74653107;0;3.8561496e-10;0.90466547;0;0;0;0.00010249454;4.3953319e-15;0;
0;1.0036928e-07;0;0.91354197;0.00058854069;9.1548165e-11;0.93201017;0;0;0.91246581;
0.89927679;0;0;0;0;0.00015243186;0;0.0023135464;6.5680722e-15;0;
1.747687e-13;0;0.88989115;9.808255e-05;0;0;0;1.6338733e-09;0;1.0437318e-11;
0;0;0.90888929;0;0;0;0;0;0.00035819167;2.1837155e-14;
0;0.93990123;0.92170697;0;0;6.8060293e-13;0.93661439;0.91063344;0;0;
0;0.94935387;0;0.93693745;0.93743634;0;0;0.93201256;4.6429359e-14;0;
0;9.3773539e-12;0;0;0;0;6.909323e-14;0;3.2906247e-12;0;
0;0;2.5164528e-12;6.4226045e-15;0.93017966;8.5442368e-14;3.1948706e-12;0;0.92179161;0;
0;0;0;2.9306459e-05;3.4899588e-12;0;6.1717416e-14;0;0;0.00033656458;
0.00025301572;2.8393512e-13;0;5.5217864e-05;0;0;0;4.3192386e-16;0;5.3993817e-14;
2.3506127e-14;0;1.9664668e-13;0.85388488;6.0995297e-14;0;0.93182206;1.2718512e-15;0;0.9431749;
0.94422179;0;0;0;0;0;0;1.8925439e-15;0;3.255057e-12;
0;0.9147104;5.8779709e-12;0;0;0;0;0;0;4.3900509e-13;
0;0;0.89435446;8.7250746e-15;0;0;0;0;0.00039263908;7.0101226e-14;
0;0.93883365;0.9158079;0;0;1.2561484e-12;0.93913257;0.91036868;9.4615613e-15;1.1249065e-11;
0;0.94291675;0;0.93250138;0.93962806;0;0;0.9341383;5.2440017e-15;0;
0;9.4660578e-07;0;0;0;0;2.5053608e-13;0;1.3766639e-12;0;
2.7443074e-12;0;3.1682872e-11;1.002624e-12;0.93137765;9.6354381e-07;1.4507931e-11;0;0.89262003;0;
0;0;0;5.3495864e-06;1.0673693e-06;0;2.4674495e-13;0;9.0270758e-15;0.00097064412;
0.00076859974;2.6141736e-14;0;0.00035135064;0;0;0;0;1.4253079e-13;5.8258706e-15;
0;0;5.4874775e-16;0.87929541;1.1840695e-09;3.1590382e-13;0.91812009;0;0;0.93176478;
0.94678777;0;0;3.9441234e-15;0;0;0;6.0980833e-15;0;1.8206439e-16;
0;0.92366195;5.2597732e-10;2.9334213e-12;0;0;0;0;0;6.9350569e-13;
2.0122754e-13;0;0.8908428;0.001666383;0;0;0;0;0.0046798494;0;
1.9373829e-06;0.9409129;0.87009698;0;0;5.9298406e-11;0.90921152;0.88282621;0;3.8115456e-16;
0;0.93836695;6.1608086e-13;0.89169276;0.91566062;0;0;0.88927442;2.2999696e-13;0.00073259824;
0;0.027464671;0;0;0;4.2065541e-16;3.5168954e-13;0;2.9963727e-12;0;
2.7100463e-13;0;6.7513237e-13;7.7006441e-13;0.92540318;0;1.98948e-05;0;0.91522264;0;
7.4102852e-10;0;0;9.0734466e-06;6.4449113e-11;4.7706513e-15;0;0;0;0;
0.10121844;0;7.4020422e-15;6.4400056e-06;3.3964489e-12;0;0;1.7538117e-07;0;6.1255661e-15;
4.6482712e-16;0;0;0.86414349;1.4728896e-09;0;0.93769312;1.3950943e-15;0;0.93354338;
0.94030088;5.9852619e-15;0;0;0;1.1756795e-11;0;5.3344041e-07;0;0.026458094;
0;0.81740767;8.2328864e-09;3.5385401e-06;0;0;0;0;6.7784537e-12;2.9546257e-14;
0;0;0.50558203;0.0015884039;4.1553511e-10;4.7886637e-16;0;0;0.00063824595;0;
4.7662335e-05;0.93412483;0.85597539;0;0;1.0406555e-12;0.9164142;0.15511213;5.0112861e-14;0;
0;0.945885;0;0.92105353;0.94208074;0;5.863745e-10;0.90331441;1.0278662e-11;0.0059322119;
2.2483026e-11;0.00045170798;0;1.8973068e-07;0;0;1.427805e-12;4.8523763e-09;5.9120914e-16;0;
5.59782e-12;0;1.6888869e-07;8.9876544e-13;0.91021597;3.3974957e-06;1.6155525e-05;1.0874264e-10;0.72711802;2.2866409e-13;
0.00083934475;0;6.0479382e-09;0;2.4153347e-05;1.943688e-10;0;0;0;3.8620428e-06;
0.27687344;1.107478e-12;3.9772033e-11;0.34509084;5.3181218e-14;1.5771872e-15;0;2.3071991e-06;0;2.139001e-06;
0;8.9372188e-06;0;0.83917326;4.1900438e-07;0;0.94099969;0;0;0.92275286;
0.92964745;5.3724166e-16;0;3.2650417e-11;0;1.8237449e-12;0;0.0030085214;6.0805416e-10;3.5291625e-09;
0;0.72319078;0.060341332;0.013102617;0;0;0;2.954752e-10;4.4319322e-09;1.7618975e-08;
0;0;0.032677334;0.0022150169;0.019417977;1.0771048e-12;0;0;0.025339762;1.2716084e-14;
0;0.9512741;0.0010021139;0;2.5344234e-15;8.9863724e-15;0.53809208;0.00087354;0;0;
0.013690031;0.93001819;8.2016373e-11;0.00036727462;0.94815183;0;0.0018929576;0.93330652;0;0.0064551011;
5.5307321e-15;0.0005000105;0;7.2646035e-15;0;0;0;1.8420168e-10;6.6724837e-12;0;
6.4607579e-05;0;0.82090962;1.341334e-10;0.86075354;5.5197891e-11;0.017476963;0;0.75458664;2.2063912e-10;
6.3180146e-06;0;2.4383565e-14;0;0.039380651;0.00060014828;0;0;0;0.0013340461;
2.90104e-10;3.2776835e-12;0.0038967505;0.8317011;0;1.2112151e-13;0;0.84315759;0;1.1295287e-09;
0;0.89207929;0;0.91587681;0.56712914;1.8544951e-14;0.94247955;1.9254241e-13;0;0.86932391;
0.84822005;1.5441871e-14;0;1.116496e-12;6.3385588e-16;5.7067164e-06;1.768165e-13;0.0043420861;0;0.38279355;
0;0.84932023;0.81161982;0.65498507;2.4446101e-11;0;2.8959209e-14;0.7904678;1.8806964e-14;1.7218273e-09;
5.8502439e-11;1.072397e-13;0.89235955;0;0;0;0;0;0.00024496249;1.2169143e-14;
0;0.9399268;0.906753;0;0;0;0.9236961;0.86620808;7.186156e-13;1.2284822e-11;
0;0.93965393;0;0.9387027;0.92590189;0;1.2468585e-15;0.92520779;1.8579024e-13;0;
0;2.1872138e-11;0;0;0;8.0185788e-07;0;0;0;0;
3.1933531e-12;0;4.2786521e-12;0;0.91665095;0;6.2102276e-12;0;0.91907179;0;
0;0;0;0.0046377569;0.00010541562;5.0340159e-15;1.1433281e-13;0;0;0.00030877109;
0;2.8297614e-13;5.4165256e-11;0.00078138412;7.2113444e-12;0;0;8.7332824e-10;7.4400541e-11;3.840108e-13;
1.5696968e-15;6.5611996e-13;7.2522327e-13;0.86446315;3.7474575e-13;0;0.93017673;0;0;0.93826872;
0.92903596;0;0;0;0;0;0;0;0;1.1156008e-15;
2.3452426e-14;0.93122846;3.1190648e-13;0;1.9460363e-14;0;0;8.1617178e-12;0;6.0272533e-14;
2.279126e-06;2.5748533e-14;0.81511587;4.3050145e-13;0;0;0;1.8164582e-13;0.0096127372;2.6982753e-14;
0;0.92868525;0.87646812;0;0;4.4555895e-06;0.89916301;0.80598426;0.00017202338;5.7085686e-05;
0;0.91679794;0;0.91794169;0.92639798;0;1.127374e-11;0.91264528;1.5843028e-14;0;
0;0.00041215404;0;0;0;0;0;0;0;0;
1.7313393e-07;0;1.5041033e-05;1.6529028e-15;0.91053104;0;2.0090469e-11;1.3386959e-06;0.8358075;0;
0;0;0;0.0040754606;0.058358632;0;2.2988897e-13;0;7.8181182e-14;0.05508789;
0;1.4271018e-14;9.2634757e-05;0.004755103;1.2094148e-06;0;0;7.6247103e-05;0.000159972;3.8558971e-07;
0;6.3445325e-12;3.1455814e-15;0.87087637;9.1409485e-05;1.8010966e-14;0.88268089;0;0;0.90524709;
0.9124251;0;0;2.5419077e-13;0;0;0;0;0;0;
8.6262852e-14;0.9300741;5.8448339e-05;0;0;0;0;0.00012067195;0;8.1378934e-14;
0.00094971695;0;0.79640639;0.016860347;5.7148475e-07;0;0;0;0.015308911;1.7737829e-12;
5.1667438e-12;0.94998688;0.83285177;0;0;2.7450894e-06;0.86821508;0.05534438;4.0436502e-13;2.0478464e-11;
1.1025319e-06;0.93962729;2.5391517e-15;0.77909613;0.94113326;0;1.8970936e-14;0.90986007;6.8845461e-13;3.2829953e-06;
0;0.083664283;2.222859e-12;0;0;4.8677117e-12;0;0;0;0;
1.0710932e-10;0;5.670639e-06;3.7535464e-13;0.94021225;0;2.3002556e-06;0;0.92932767;0;
9.1684993e-12;0;0;0.00038486024;0.00041946722;2.2181963e-12;0;0;0;6.6914918e-10;
0.01009637;0;1.8023925e-08;0.019091612;1.1050774e-09;0;8.4004509e-15;0.62958634;0;1.116766e-12;
0;0.0001272458;0;0.89656872;0.0028098885;0;0.93997282;0;0;0.93186796;
0.93924779;2.4975313e-06;0;4.3538673e-11;0;0;0;5.1378338e-06;0;0.014039939;
2.423342e-13;0.91732502;0.0045380038;5.3114186e-06;2.4429935e-14;0;2.4176627e-09;6.6868392e-06;0;1.5280751e-15;
4.2906668e-06;0;0;0.0040798117;0.85973668;1.3185019e-13;0;0;0.00038493899;0;
0;0.93005353;1.6988827e-10;0;0;1.7350814e-05;7.0993024e-06;0;8.0201686e-11;0;
5.6945632e-14;0.73832464;0;0.00056282774;0.92633533;0;0.00051467423;0.81965339;2.089502e-11;0;
3.5736778e-12;0.094835155;0;3.5921803e-06;0;0;0;9.2249071e-13;0;0;
0.00036527921;0;0.89197034;0;0.013410494;3.6708532e-06;0.017713044;0;3.0443293e-12;0;
3.7857485e-11;0;0;0;0.90894532;5.491808e-05;0;0;2.449053e-15;7.313693e-10;
0;1.8268369e-11;0.8442508;0.87034708;6.845391e-06;6.364762e-12;6.4583958e-14;0.90491438;0;0.00012399165;
0;0.8734042;0;0.89730871;0.83809847;0;0.9278143;0;0;0.022257006;
0.00019785007;9.7455651e-16;0;2.217953e-10;0;0;0;0.91105145;0;3.6717119e-13;
0;0.86953467;0.92073995;0.0021897333;0;0;0;0.83979446;0;1.8948302e-05;
0.00013017726;0;3.0895078e-11;7.1019757e-10;0.81275082;2.5386527e-07;0;3.2274297e-13;0.0057200314;4.3167145e-15;
0;0.93273932;5.8731998e-15;0;0;0;1.4917438e-06;1.0623212e-16;2.3306029e-13;0;
0.062973954;0.74704146;3.1952726e-12;1.4240205e-13;0.91197455;0;0.63621545;0.89071941;0;2.0128634e-12;
0;3.0352392e-05;0;6.6820681e-13;0;0;0;1.0260065e-12;0;0;
0.00017571231;0;0.91438538;2.8563599e-12;0.004459444;1.4872745e-11;0.0089280745;0;0.00045399941;5.2717786e-13;
3.1211878e-12;0;0;0;0.88520283;0.0035406975;0;0;0;3.7850554e-09;
0;6.3793129e-07;0.86965221;0.86573583;0;9.9532674e-11;0;0.91042763;0;0;
0;0.94071537;0;0.91560453;0.78401071;5.5355604e-16;0.92903656;4.4259481e-14;0;0.017903859;
3.4034046e-11;1.68929e-14;0;7.569486e-11;0;2.3650052e-11;0;0.68342596;0;0.024636179;
0.00033640055;0.76170647;0.86084145;0.00015084555;2.6984454e-10;0;7.3247259e-12;0.92044616;0;7.5011886e-10;
1.1650448e-12;2.4337238e-12;5.4443017e-13;0;0.91364425;1.3978787e-14;0;0;0;0;
1.7454105e-13;0.93259215;4.8333755e-12;0;0;4.028092e-05;1.2041241e-14;0;0;0;
0.00022428163;0.00076549972;0;0;0.89840144;0;0.00017234382;0.88330001;9.7800382e-14;0;
3.2413853e-17;0;0;1.4983638e-14;0;0;0;0;0;0;
0.00028281973;0;0.90615672;0;9.6330936e-05;1.5674492e-07;3.9967782e-07;1.5032876e-14;0;0;
1.3251037e-12;0;0;0;0.93393183;3.0232868e-11;0;0;0;0;
0;0;0.90745234;0.92777807;0;2.1208886e-13;0;0.9427222;0;4.8415493e-15;
1.7510231e-13;0.93293864;0;0.92156035;0.914222;0;0.9215796;0;0;4.5970069e-06;
8.4611561e-16;3.2619293e-14;0;1.9939832e-14;0;3.4996441e-15;1.1986555e-15;0.90725458;6.7211387e-14;1.520567e-05;
0;0.89016646;0.91087258;4.4389166e-11;0;0;0;0.90005821;0;8.4944672e-14;
1.2480308e-12;3.2751024e-14;3.4903673e-12;1.1478245e-14;0.91999555;0;0;0;0;0;
0;0.93838823;6.631995e-11;0;0;5.5665401e-05;1.6250621e-12;0;0;0;
1.2809761e-05;0.0086883809;0;3.1177361e-12;0.91320586;0;0.00037108813;0.90347338;0;2.6526676e-14;
4.1980029e-15;4.0661552e-16;0;1.2625585e-12;0;0;0;0;0;0;
0.00020425388;0;0.90235871;0;0.4377169;0.0001669499;5.8243668e-06;1.4431117e-15;0;0;
1.2582765e-12;0;0;0;0.928505;5.3737158e-12;0;0;5.8255477e-11;1.209604e-13;
3.1368147e-14;0;0.87170219;0.94028503;0;0;1.9283308e-13;0.93309397;2.8744076e-16;3.6314274e-14;
2.2908146e-13;0.92511809;0;0.90256572;0.87034923;0;0.91179836;1.6383182e-16;0;0.00012658826;
5.4508308e-11;1.0265326e-13;0;2.1832018e-12;7.5805077e-11;0;0;0.89784944;0;2.6886821e-13;
0;0.9030953;0.87420678;5.6112782e-14;2.1276083e-15;0;0;0.89317942;0;2.0747926e-13;
0.012190089;0;1.3012084e-15;1.5468137e-05;0.50936586;7.5160321e-12;0;0;5.2667035e-09;0;
0;0.93394613;3.5922127e-07;0;0;4.408378e-13;2.3476262e-13;0;0;1.1920777e-14;
0.00014135083;0.016034706;0;1.3966004e-13;0.90352261;0;3.1862048e-05;0.84918422;3.962621e-12;9.1223266e-14;
0;5.9617161e-10;0;0;2.2265152e-14;0.00033055843;0;0;0;0;
5.2578496e-05;0;0.88192606;8.0397558e-07;0.0021113863;0.00016485511;0.00030606179;0;0.0023729431;0;
0;0;0;0;0.92102975;0.00015895224;0;0;8.8704387e-16;0;
0;0;0.90362459;0.87949938;5.1150901e-06;7.156461e-10;0;0.92236477;0;1.2908723e-05;
2.1874837e-12;0.88299197;0;0.90886748;0.88330799;0;0.88344818;0.00057559425;0;0.79833227;
5.1905901e-12;0;0;2.4146098e-06;9.8051043e-15;0;5.7639352e-14;0.68757218;3.2414793e-11;0.00081353378;
0;0.8730883;0.86244029;0.026113054;0;0;3.0138168e-12;0.88178825;0;0;
0.62520671;0;0;0.00027288191;0.8942104;6.3403299e-06;0;1.1168269e-10;0.0041897474;0.0047190683;
1.4256079e-06;0.9193415;0.00042761475;0;0;8.8568755e-05;4.2515371e-06;3.1181416e-12;5.4792068e-14;0;
0.32401738;0.65200526;0;0;0.91214484;6.4258127e-11;2.4786684e-10;0.6982339;0;1.8550691e-07;
1.9492608e-15;0.003300572;1.9798325e-12;1.6095507e-12;0;1.4014692e-10;0;0;0;0;
4.1966045e-11;0;0.60126311;0;0.79654586;0.0027631666;7.8090983e-05;0;0.011504713;0;
0;2.1717743e-12;0;0;0.94658536;0.026760673;0;0;0;1.7351369e-09;
0;1.0627259e-12;0.12521878;0.9265883;1.4005835e-08;3.0262842e-10;4.1440558e-07;0.91929346;0;0;
3.557698e-12;0.92884594;1.1851561e-11;0.91459525;0.89264494;0;0.8949061;0;0;0.63875663;
0;7.6051979e-13;0;2.2332845e-10;0;2.8053475e-05;1.2509308e-06;0.30689749;1.450919e-10;1.2352338e-05;
0.0092613157;0.79916096;0.84422004;2.4156377e-09;0;5.2347439e-11;1.2647383e-06;0.84642601;0;0;
0.00039624545;1.63067e-07;0;6.2100651e-07;0.88839167;0.0019812894;0.00030443459;3.46258e-09;0.013797755;0.0020018674;
5.5186246e-12;0.87811774;0.035627939;0.00037563971;0;4.461111e-09;0.0081698755;9.0867217e-13;1.7195032e-10;0;
0.00019841902;0.86435008;0;0.0022525059;0.92537093;0;0.52831107;0.89878452;1.0319616e-12;1.4555251e-05;
3.2965301e-11;0.012411101;1.647714e-06;1.697826e-05;1.0813531e-12;0;9.2512239e-13;0;0;0;
7.3704032e-06;0;0.81122303;3.1603871e-05;0.15169697;4.906035e-06;0.78781444;0.0026638042;7.119823e-07;0.00016357613;
0;0.00042472724;3.755839e-15;0;0.89794081;0.0017488354;0;1.9999578e-13;9.4417192e-07;1.2566177e-08;
0;3.3997475e-11;0.60033196;0.84376812;0;5.289655e-12;0.00010137291;0.74531597;2.8327822e-12;1.4931612e-11;
0;0.91512609;0;0.9001711;0.88174802;1.5510119e-14;0.93391734;0;0;0.0073365145;
0;0.00028064253;0;2.683232e-06;3.4280729e-06;1.6908881e-12;0;0.75112998;1.8334438e-11;1.6396267e-05;
0;0.89610839;0.83699876;2.0099186e-08;8.9053661e-05;0;5.6827568e-13;0.12487541;0;5.1570971e-13;
0;1.1561201e-15;1.1550902e-09;2.3954553e-13;0.90219498;0;0;0;1.1031789e-15;0;
1.7149591e-10;0.92615479;1.6048402e-11;0;0;0.000156269;6.0929747e-06;0;0;0;
4.4067579e-06;0.0011034675;0;0;0.89332205;0;1.7320385e-06;0.88228697;5.973212e-14;1.2837661e-10;
7.9246221e-14;0;0;0;0;0;1.4710169e-15;0;2.5292832e-15;0;
6.4693268e-05;0;0.8972922;3.9208871e-13;5.5834162e-06;1.9050584e-11;5.8045575e-06;0;8.4120059e-13;4.9657374e-14;
3.6748632e-10;0;0;0;0.93210524;6.2425271e-13;0;0;0;1.7605896e-17;
9.4765436e-14;0;0.87151998;0.93656623;0;0;0;0.93706846;0;2.6743553e-14;
1.1990656e-12;0.93075603;0;0.92540079;0.91691649;0;0.9230563;6.9933115e-16;0;2.1835789e-10;
1.4998415e-10;5.6657072e-14;0;0;0;2.1040509e-07;1.6941396e-10;0.9199841;5.064872e-15;0.0013197836;
0;0.85828489;0.90963036;3.319041e-09;0;0;0;0.87850934;0;1.0416405e-12;
3.9688679e-13;0;1.5815823e-09;8.6303706e-14;0.90902007;0;0;0;7.4801224e-12;0;
1.3855942e-12;0.9266544;1.3651134e-10;0;0;2.3370931e-05;5.9246321e-07;4.0952266e-11;0;0;
7.487202e-10;0.0013349763;1.385894e-14;5.7495686e-13;0.92012239;0;1.3602718e-13;0.89617598;0;1.083414e-09;
4.2687527e-11;8.93147e-10;0;4.2942893e-14;0;0;0;0;1.6661679e-13;0;
6.7205028e-06;0;0.88598347;7.8864453e-16;0.63422716;3.9736787e-09;5.8234227e-06;0;4.6730131e-07;4.3997323e-13;
2.6540647e-10;0;0;0;0.92509967;1.4957174e-14;0;0;4.3299931e-07;2.829481e-12;
4.2968056e-09;0;0.76826131;0.95171833;0;0;0;0.93243009;0;1.2080414e-13;
1.2010117e-12;0.91909909;0;0.9200651;0.89457333;0;0.90526879;8.9315093e-15;0;5.4605905e-05;
0.00022736088;1.0669486e-13;0;8.5795886e-14;1.4626837e-10;4.0218571e-12;3.4440367e-11;0.91033632;0;0.000301961;
0;0.89206129;0.89013135;2.0562083e-11;3.3751631e-13;0;0;0.86313707;0;1.536347e-12;
0.00030793092;0;0.041748274;0.00036757888;6.1919422e-07;6.189688e-13;0;0;0.028571228;0;
4.4369867e-06;0.95259982;0.82490188;0;0;5.5849887e-11;0.72464651;0.014588373;0;0;
3.6338216e-10;0.92116737;0;0.020508733;0.95007157;0;0;0.93879801;2.4549193e-12;0.048689973;
0;0.00301671;0;0;8.5936299e-06;5.2495943e-06;6.6403362e-07;0;0;0;
8.9606885e-07;0;0.024905482;1.7270643e-09;0.88775635;8.3932937e-05;4.4006512e-05;0;0.84864527;1.178617e-14;
6.9856629e-12;0;0;0;0.11062001;1.6085952e-14;0;0;5.081742e-07;2.8886996e-06;
0.0020621114;0;0.00075750769;0.80236548;1.7469105e-12;3.689149e-11;0;0.74241328;0;0.0016974106;
0.00015588982;0.0014047199;0;0.92796409;0.38850847;0;0.92720962;3.8087554e-05;0;0.91129869;
0.90564495;0;0;1.7914996e-05;7.3851285e-14;0;1.5176792e-05;0.00015414848;1.4475884e-11;0.074377365;
0;0.91473144;0.054248698;0.068369046;0;0;3.7236778e-14;3.0502906e-05;1.7882512e-13;5.9086647e-16;
0.0031941552;4.6949053e-06;0.00238384;0.025968533;0.00050660945;0.0029993367;0;4.4297663e-13;0.77331614;0.77324158;
0.011783022;0.81384146;0.85087448;0;0;0.024313319;0.84515816;6.8900656e-05;0;0;
0.0078889914;0.83489424;1.4446051e-13;0.00082937413;0.94539374;9.590252e-05;0;0.85178554;1.051902e-08;0.75812441;
2.0907199e-13;1.0535552e-05;0;0;1.8184273e-14;0.00062233926;1.5942996e-15;2.7533215e-06;0.0004317344;0;
1.0859293e-14;0.0010881607;0.0010163867;0.00010520791;0.93158323;7.7511031e-05;9.2732524e-05;0.00035763899;0.21180473;0;
0.058771774;5.541981e-07;0.00078889471;0;0.88949978;0.0015704426;0;0;0;0.015778225;
0.0062025241;1.9914544e-06;0.0034635093;0.74250352;1.5033162e-07;7.7629168e-13;0;0.52016842;0;0;
0.00019429442;0.38283795;4.8888046e-12;0.91600579;0.04364695;0;0.92029059;0.0006153016;0;0.8055684;
0.055187467;5.213181e-07;0.0044999318;0;0;0.065730214;2.7564345e-06;0.12108363;2.3260844e-05;8.4337316e-06;
1.7850563e-05;0.0044959057;0.81518805;3.3063982e-10;0;1.5770571e-05;0.019632298;0.0020679322;0;6.7238543e-15;
7.0323185e-13;5.9525791e-15;0.0059988904;3.954161e-06;0.059189413;1.0212147e-12;1.8245421e-06;3.8841624e-10;0.0011398895;4.0414395e-08;
0.0018031759;0.90079176;0.88098627;2.9634225e-12;0;5.2701909e-11;0.91762191;0.77299315;7.4724442e-15;0;
3.4679812e-05;0.93980229;2.9131791e-13;0.86779618;0.9367671;0;0.0013174971;0.8990798;6.4479379e-13;0.51799208;
4.9078295e-14;4.1724117e-05;0;1.429572e-09;6.8283365e-11;0;2.1016298e-10;1.0356413e-12;2.2178406e-09;0;
9.8184169e-12;0;3.0901039e-05;1.6968806e-05;0.89954615;0.00064931653;0.0003433064;2.5838533e-13;0.19833815;2.3560311e-05;
6.9274968e-09;0.0018081191;8.6804272e-11;0;0.00011736898;0.00036937313;0;2.7039441e-12;0;0.00017091037;
0.032598596;4.9430204e-12;0;0.051637746;0;0;0;6.9176467e-06;0;3.9550497e-07;
0;0.77766407;0;0.91375864;0.0055775447;5.0702541e-13;0.93100655;0;0;0.8990168;
0.81639838;2.2850149e-06;0;0;0;2.4175577e-09;0;0.00063216337;1.4069308e-12;0.0001535058;
0;0.66026217;0.042598225;0.00013802994;5.5292617e-14;0;0;3.3043535e-10;0;3.2957474e-12;
0;0;3.2580744e-11;0.85934389;4.3416434e-12;0;0;0;0.86547661;0;
0.84901297;0.92278832;0;0;0;6.8802101e-14;0.90825629;6.0612297e-07;0;8.152659e-17;
0;0.92107123;0;0.93426925;0.92555022;0;1.2542992e-15;0.89763558;0;0.88607824;
0;0;0;0;5.1446182e-12;0;0;0;1.833079e-13;6.8424335e-13;
2.1932268e-14;0;5.8087283e-14;0;0.93492895;0;1.7243861e-15;6.9928416e-13;0;1.924533e-16;
0.83775395;3.5575114e-16;0;0;0;1.9982921e-05;0;0;4.1053214e-14;0.85535318;
0.88773972;1.5921902e-14;0;0.92092186;0;0;0;1.463259e-12;0;0;
5.1844166e-16;3.3769311e-12;0;0.91525269;1.6723485e-13;2.2937794e-15;0.93697494;0;0;0.91352755;
0.90180689;1.663894e-12;6.3736311e-15;0;1.3178133e-13;0;0;3.0583453e-16;4.4638416e-15;0;
0;0;0.87367028;1.057022e-13;0;0;0;0;0;0;
0;0;7.9671242e-11;0.79389453;5.0227142e-11;0;0;0;0.81625265;5.9988968e-05;
0.8456021;0.89994514;1.893764e-11;5.8958262e-06;3.203078e-12;6.741608e-11;0.91183954;5.0876424e-06;2.1251853e-13;0;
3.1410946e-07;0.90879434;0;0.92262888;0.92725855;0;0;0.87309068;0;0.89610481;
0;2.9515226e-14;0;0;1.4637995e-14;0;0;4.792488e-12;6.6892377e-12;2.9102408e-11;
3.8644472e-15;0;0.0012606974;0;0.94030774;1.528847e-10;3.8268468e-12;6.3945448e-15;5.6663386e-05;0;
0.84230942;0;0;0;1.3028167e-10;0.00057170278;0;0;0;0.85050923;
0.74755722;2.0518939e-15;0;0.90927273;0;0;0;4.4479926e-14;0;0;
2.7386531e-12;1.4404497e-05;0;0.90164661;1.7502361e-11;0;0.92318779;0;0;0.88640791;
0.89943355;2.3017731e-13;0;9.2836161e-17;5.3609927e-13;0;0;3.5708381e-11;0;2.8016968e-12;
0;0;0.85983831;1.8019293e-12;0;0;0;1.2889316e-12;0;1.8073227e-13;
6.6050539e-05;0;1.1961975e-14;0.86025918;3.3541435e-16;0;0;0;0.72041762;2.7477657e-14;
0.86719376;0.90320045;2.4771964e-05;2.0061113e-14;0;5.7528182e-15;0.92788911;0.00030953303;0;2.529733e-14;
0;0.92632622;0;0.93028212;0.90282947;0;0;0.89277768;0;0.80006194;
0;0;0;0;1.6285385e-09;0;0;3.753465e-12;1.4267174e-13;0;
1.4011756e-14;0;6.3929663e-05;1.3985148e-14;0.93290144;3.2438706e-15;0;0;0.0058375616;3.2692276e-11;
0.75411123;0;0;1.6611067e-17;0;0.00095512188;0;2.1689414e-14;0;0.82640994;
0.84915233;7.0177685e-13;0;0.77645242;6.7417731e-14;0;0;2.5164492e-11;0;0;
0;1.3281364e-12;0;0.90944803;0;5.681483e-16;0.92030674;3.8876879e-06;0;0.93011582;
0.9054836;0;1.6827543e-14;1.5167099e-12;4.1788691e-16;0;0;2.3823212e-15;2.7220272e-12;1.1320351e-13;
3.3253282e-11;0;0.74690807;0;2.4233599e-13;0;0;1.9299575e-12;1.2823919e-11;2.2227581e-14;
0.018765815;0;0.49693945;0.77105308;1.6434069e-05;0;2.9525308e-06;0;0.8131128;7.5341518e-06;
0.78062195;0.59885842;9.0369082e-05;2.2607123e-15;0;1.7190241e-05;0.6845296;2.8530415e-06;0;0;
0;0.74425697;1.1862683e-12;0.8229804;0.92818737;0;0;0.7918697;3.6950609e-10;0.68783122;
0;2.4120475e-06;0;0;0;0;7.9976566e-14;0;0;0;
0;0;0.00014976194;1.0988317e-13;0.90962034;6.7026222e-06;0;0;0.0023869553;5.6840036e-05;
0.89093614;4.0419627e-07;3.4280391e-05;2.806837e-15;0.00041071521;0.033436444;0;0;6.0624742e-13;0.88463724;
0.68896401;0;0.00061014446;0.65123355;0;0;0;0.0005625161;0;6.2713346e-12;
1.0030498e-05;1.4166319e-05;0;0.92761958;2.6924688e-05;0;0.92464316;4.7510318e-10;0;0.91503304;
0.7923438;6.3030175e-14;1.2757253e-07;6.8255106e-12;0;0.041081738;0;0;0;5.5242308e-12;
0;2.2331641e-07;0.86825192;9.3391114e-05;0;0;0;0;3.1451232e-06;0;
1.8987016e-14;0;0.84601104;0.0026030801;0;0;0;0;0.0070193866;0;
0.0012966198;0.90080315;0.50221425;0;2.8054844e-14;5.6285575e-13;0.9272126;0.78222096;0;5.412729e-16;
1.6601443e-05;0.94404274;0;0.91620255;0.9211539;0;0;0.89635783;7.3873979e-10;0.066575482;
4.8774705e-14;0.0018111146;0;0;0;0.00070829917;5.1111518e-11;2.358329e-08;0;1.8776619e-12;
0;5.9978832e-12;1.6145045e-09;0;0.92912585;4.4752624e-13;0;8.1035412e-14;0.91371787;1.0985302e-15;
0.0034188367;0;0;3.2905775e-11;3.890737e-13;0.00057493767;0;0;0;6.1442643e-07;
0.071837492;0;0;0.0017278062;1.3361942e-12;0;0;9.9938543e-06;0;0;
2.3947717e-12;0;0;0.8989827;0.014037065;0;0.94465548;9.0861995e-15;0;0.93513441;
0.93346864;0;0;0;0;0;1.6412625e-11;0.00044152176;5.1470804e-15;0.0013979746;
0;0.00349836;0.56683445;0.0025019594;0;0;0;0;0.0012135105;0;
2.521957e-13;7.9661077e-15;7.7203275e-15;0.86038619;8.0985745e-07;0;0;0;0.84933078;0;
0.816387;0.91316402;0;2.8563044e-15;0;0;0.85531235;0;1.656009e-11;3.1257035e-11;
2.8652215e-12;0.87507641;0;0.92802298;0.89328909;0;4.2478049e-11;0.88039017;0;0.80267811;
0;1.2101472e-14;1.3608756e-15;1.0182573e-15;3.7274204e-13;0;0;0;0;2.7568466e-15;
5.6686766e-11;0;4.2883974e-13;0;0.92325139;0;3.2482541e-14;6.9929183e-07;0;0;
0.79180026;2.2633733e-12;0;9.8891747e-14;2.1301728e-14;2.3372531e-05;0;0;1.0402718e-12;0.80888188;
0.84546834;4.8241054e-14;5.6807095e-14;0.92097104;9.3023458e-18;0;0;0.00072026771;2.2267387e-14;0;
6.0994743e-18;0.0048201326;0;0.91926873;1.2226539e-06;1.2253226e-16;0.9330315;0;0;0.89337939;
0.84485358;4.8039836e-12;0;1.0452232e-13;2.4181877e-13;0;0;0;3.4469256e-13;0;
3.2599812e-10;0;0.88491935;0;0;0;0;1.0916782e-11;0;0;
2.3939316e-14;4.1040704e-09;3.903196e-08;0.81330657;0.00075287622;0;0;0;0.83900106;6.1781946e-05;
0.54584372;0.92262155;0.0019398686;0.00029823178;2.9209212e-13;4.1325366e-05;0.85722297;4.6015521e-06;4.5242516e-05;1.7464043e-15;
5.239647e-05;0.86758208;0;0.92449498;0.92387116;0;1.8070406e-13;0.90635848;0;0.74684739;
0;2.1357443e-12;2.396742e-15;0.00010401833;0;0;0;4.7181419e-07;0;6.8519067e-13;
2.1802908e-11;0;0.059019037;0;0.9334954;1.3553326e-05;1.5123121e-09;7.1994273e-06;0.001062415;0;
0.77103168;2.5812286e-14;0;0;0.0038563854;0.0019729801;0;0;0;0.84717286;
0.048235502;4.654261e-15;0;0.89723676;0;0;0;0.00021116518;2.7134894e-12;0;
1.3417247e-12;0.013440505;0;0.87967187;0.00024898042;0;0.93061721;0;0;0.85417122;
0.88609076;4.4482945e-13;0;1.6347487e-13;5.9038896e-13;0;0;1.7911417e-06;3.5008401e-15;5.3814671e-15;
1.7106074e-11;0.00082105858;0.85829723;0;0;0;0;0.012992125;0;4.7824768e-14;
0.0034488265;0;0;0.85353619;2.4003937e-12;0;4.39988e-13;0;0.82099515;2.6881793e-14;
0.73703778;0.90595675;0.00048260586;3.3738854e-14;0;0;0.91057181;0.00040673782;7.5475982e-14;6.6774399e-11;
3.5552439e-14;0.91095185;0;0.93885648;0.90682364;0;0;0.89280331;0;0.062521644;
0;0;4.261199e-11;0;4.2419931e-10;5.3795109e-15;0;1.5018383e-15;0;0;
2.9357742e-11;0;0.00028819707;0;0.93176633;0;0;1.9168842e-12;0.011743705;1.9516905e-14;
0.093489215;1.7221202e-13;0;2.4566139e-12;0;0.00018396422;0;7.9552731e-16;0;0.85272664;
0.55001992;8.1067824e-13;1.4142004e-10;0.68948293;3.7625898e-06;0;0;0.00078070594;0;0;
0;3.1329719e-06;0;0.92157865;2.6883095e-11;0;0.92440426;5.4822657e-12;0;0.92808819;
0.88408619;0;0;2.9969353e-11;1.0103375e-16;0;0;3.0644862e-11;2.1799791e-11;0;
2.463253e-07;0.00042162341;0.7345956;0;9.0866308e-12;0;0;0.0022115307;0;1.6116752e-15;
0.2697975;4.1869401e-07;0.0052031614;0.87722576;0.012179115;0;9.4405133e-09;2.6670741e-06;0.77088791;4.605476e-05;
0.026988119;0.86567664;1.1361479e-06;3.9752923e-14;0;4.6651721e-07;0.028458843;1.7144145e-06;0;6.5022027e-07;
0.00058235251;0.71364301;1.3031407e-09;0.69187266;0.92972589;0;3.0192576e-10;0.51830709;2.3810793e-09;0.5399434;
8.941901e-12;0.0025324901;1.3349553e-10;0.0011611289;0;8.3027176e-09;0;0;0;0;
1.534524e-10;0;0.0015232794;0;0.94081062;4.8748978e-05;4.7891235e-06;0;0.24148685;7.10981e-07;
0.88237888;2.6258935e-08;2.2851596e-10;2.3540872e-05;0.67681873;0.21705653;0;0;9.2439786e-06;0.86578506;
0.0010155307;0.00032574843;0.011728057;0.8834883;2.8654176e-11;0;0;0.44143358;0;1.4820993e-09;
1.1743194e-07;0.051936436;0;0.93388319;0.030090433;0;0.93493229;6.3920156e-06;1.8881459e-14;0.92632252;
0.64411563;8.9615156e-08;0;4.9876361e-09;0;0.0017137928;0;0;3.3874789e-05;3.0006902e-15;
0.0037186365;0.014849039;0.88330036;0.0005225463;1.9189624e-12;0;0;7.9687907e-06;1.1960209e-14;0;
0.00066928368;5.6295851e-15;4.6916779e-07;0.82522053;0.00012414361;0;0;3.6273609e-09;0.0056140358;5.396085e-08;
0.0064609735;0.90380961;1.7004058e-06;0;1.5709084e-10;2.0657521e-07;0.00087713328;3.0502832e-08;0;1.1920533e-10;
0.73201895;0.86152178;7.471518e-13;0.0036798357;0.92418939;0;1.7377386e-07;0.65453684;1.0948563e-06;0.0025993772;
0;0.0033746816;2.1563789e-11;1.1692339e-11;7.441644e-10;0.00034661958;2.5005786e-11;4.2083091e-08;0;1.0001536e-14;
7.5165346e-13;8.6575884e-09;0.68919933;0;0.92434156;2.5253796e-06;0.001262823;1.2951732e-05;0.88697541;0;
0.0092078056;0;0;2.5486967e-08;0.83302921;0.52773374;1.5455364e-13;0;0;0.01725677;
2.0138452e-06;1.474585e-06;0.032823846;0.91221493;3.1857293e-05;2.8788217e-15;0;0.80005163;0;1.80662e-12;
2.6071376e-10;0.80652231;1.2942703e-15;0.90380532;0.87259573;0;0.9489876;7.5543113e-11;2.6713094e-11;0.91577232;
0.27850497;0;1.1945009e-10;0;4.4559745e-10;0;0;0.0066557406;1.9379147e-09;4.3729127e-09;
0.012256531;0.00081832474;0.90563232;0.028058097;0;0;2.3923498e-05;0.56245893;6.8605921e-05;0;
      };
     };
     float_Data @[9] {
      name="EC_in_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 1;54;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=9;
      matrix_col_width=10;
      ar {
       name="ar";
      [1 54 40] 0;0;0;0;0;0;0;0;0.91080695;0;
0.854635;0;0.93642074;0.95155352;0;0;0.93222231;0;0.93613386;0;
0;0.92209786;0;0.95227087;0;0;0;0;0.94377261;0;
0;0;0;0;0;0;0;0;0;0;
0.9363417;0;0;0;0;0.94977671;0;0;0;0;
0;0;0.93431997;0.91239434;0;0;0;0;0;0;
0;0;0;0;0.90664363;0;0.9488827;0;0;0;
0.93395293;0;0.94127995;0;0;0.93379802;0;0.95802563;0;0;
0;0.74741882;0.95665437;0;0;0;0;0;0;0;
0;0;0;0;0.94377398;0;0;0;0;0.94838345;
0;0;0;0;0;0;0.94885206;0.92719156;0;5.8104945e-08;
0;0;0;0;0;0;0.91838646;0.91364765;0;0;
0.94968724;0.94955343;0.86098993;0;0;4.1272088e-09;0;0;0;0.93095303;
0;0;0;0;0;0;0.958354;0;0;0;
0;0;0;0;0;0;0;0;0.9435606;0;
1.2587963e-14;0;0;0.94301575;0;0;0;0;0;0;
0.95621455;0.93129039;0;0;0;0;0;0;0;0;
0;0;8.145842e-06;0;0;0;0.86743033;0;0.94646215;0;
0.88295919;0;0;0;0;0.96632516;0;0.074476391;0;0;
0.96442413;0;0;0;0.82960474;0;0.67121053;0;0;0.89286101;
0;0;0.95817059;0;0;0;0;0;0.00053540926;0;
0;0;0;4.3696411e-09;0.9672007;0.94695199;0;0;0;0;
0;1.764502e-08;0;0;0.9667263;0;0.85668445;0;0.97132897;0;
0;0;0;0;0;0;0.89985412;0;0;0.9752143;
0;0;0;0;0.30651996;0.86658084;0.88789678;0;0;0;
0;4.1134189e-08;0;0;0;0.93986231;0;0.96242809;1.4271104e-09;0;
0;0;0;0;0;0;0;0.8052724;0.9759196;0.96983677;
0;0;0;0;0;0;0;0;0.88573343;0;
0.8848753;0;0.943524;0.94850594;0;0;0.90663934;0;0.93744075;0;
0;0.92240489;0;0.95688695;0;0;0;0;0.95283711;0;
0;0;0;0;0;0;0;0;0;0;
0.93606585;0;0;0;0;0.9348309;0;0;2.5807245e-09;0;
0.028820436;0;0;0;0;0.80998653;0;0;0;0;
0;0;0;0;0.95632261;0;0.96536386;0;0;0;
0.95935196;0;0.95543027;0;0;0.95871902;0;0.96724725;0;0;
0;0.90883648;0.970972;0;0;0;0;0;0;0;
0;0;0;0;0.96301806;0;0;0;0;0.96352458;
0;0;0.58545351;0;0.89866894;0;0;2.4975559e-06;0;1.0204319e-06;
0;0;0;0;0;0;0.96614271;0.9773134;0;0;
0.97011179;0.92115545;0.97099817;0;0;0.66815275;0;0;0.84190005;0.82132286;
1.2839207e-09;0;0;0;0;0;0.96547234;0;0;0;
0;0;0;0;0;0;0;0;0.96955818;0;
2.358807e-16;0;0;0.91787785;0;0;0.96044141;0.25190419;0.97035074;0;
0;0;0;0;0;0;0;0;0;0;
2.2051503e-12;0;0;0;0;0;0.95982867;0;0.75369287;0;
0.81961775;0;0.75201297;0;0;0.89360267;0;0.76664424;0;0;
0.91814834;0;0;0;0.89513171;0;0.85146004;0;0;0.92303145;
0;0;0.95889896;0;0;0;0;0;0.87089515;0;
0.95770359;0.32123783;0.96661991;0;0;0;0;0;0;0;
0;0.50570124;0;0.0011458648;0.96867371;0;0;0;0.96957457;0;
0;0;0;0;0;0;0.87616765;0;0.47834501;0.9505263;
0;0;0;0;0;0.920964;0.89725387;0;0;0;
0;0.63192016;0;0;0;0.95408779;0;0.96282583;2.5505475e-05;0;
0;0;0.31655478;0;0.95815939;0.0012979596;0.96682262;0;0;0;
0;0;0;0;0.95687473;0;0;0;0;0.96768904;
0;0;0.95397794;0;0;0;0;0.88590831;0;0;
0.93519872;0;0;0;0;0;0.95282906;0.93586463;0.95360959;0;
0;0;0;0;0.93720466;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.90825719;0;
0.94504958;0;0;0;0;0;0;0;0.95848715;0;
0;0;6.7514012e-09;0.96843433;0;0;0.95526373;0;0;0;
0;0.8910026;0;0;0.93867362;0;0;0;0;0;
0.9535718;0.93660307;0;0;0;0;0.85546744;0;0.93934977;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.91488016;0;0.94755322;0;0;0;0;0;
0.0038841395;0;0.96391404;0;0.91951686;0;0;0;0;0;
0.96288067;0;0;0;0;0.91353959;0.85448807;0;0.95138252;0;
0;0;0;0;0;0.94980979;0.96248525;0;0;0.14254558;
0;0;0.95043725;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.941356;3.480671e-08;0.95932484;0;
0;0;0;0;0;0;0.94784933;0;0;0;
0;0;0;0;0.95117033;0;0.63653016;0;0;1.0030103e-06;
5.6514036e-05;0;0.93948752;0;0;0.091532886;0;0;0;0;
0.95828444;0;0;0;0.12392569;0;0;0;0;0.77748513;
0;0;0;0;0;0;0.78524733;0;0;0;
0.94044161;0;0.95399153;0;0;0;0;0;0;0;
0;0;0;0;0.95230758;0;0.83989346;0.90141678;2.180952e-08;0;
0;0;0;0.79833674;0.90262836;0;0.96818334;0;0;0.96722013;
0;0;0;0;0.97554427;0;0;0;0;0.77643269;
0;0;0;0;0;0;0;0.72420126;1.8573625e-11;2.4890123e-09;
0.9440459;0;0;0;0.90930593;0;0.96152085;0;0;0.86605668;
0;0;0;0;0.96025294;0;0;0;0;0.96993238;
0;0;0.95769078;0;0;0;0;0.90564638;0;0;
0.94400531;0;0;0;0;0;0.95655555;0.94217402;0.95835936;0;
0;0;0;0;0.94488722;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.85796881;0.057099938;0;3.3881178e-09;0;0;0.96451467;0;
0;0;0.34449208;0.97215027;0;0;0.9617849;0;0;9.4472052e-12;
0;0.92323869;0;0;0.95198315;0;0;0;0;0;
0.96068513;0.94764906;0;0;0;0;0.90711421;0;0.95196021;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.89259827;0.65657783;0;0;
0.89926302;0;0.95951396;0;0.9416374;0;0;8.2329791e-07;0;0;
0.97020358;0;0;0;0;0.94021875;0.91369146;0;0.96517938;0;
0;0;0;0;0;0.94306618;0.97375435;0;0;0.82771438;
0;0;0.96699154;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.82781696;0;2.1423097e-07;0;
0.92916334;0.87082291;0;0;0;0;0.92578632;0;0;0;
0;0;7.881788e-07;0;0.72682184;0;0.91055274;0;0;0.018582983;
0.81879008;0;0.95407856;0;0;0.96772635;0;0;0;0;
0.96889406;0;0;0;0.95864421;0;0;0;0;0.92288041;
0;0;0;6.6544349e-06;0;0;0.92382878;0;0;0;
0;0;0;0;0.96644682;0.95580035;0;0;0;0;
0;0;0;0;0.88623303;0;0.83000869;0.9693591;0;0;
0;0;0;0.88499314;0.92856079;0;0.96553987;0;0;0.97476256;
0;0;0;0;0.97527844;0;0;0;0;0.87821823;
0;0;0;0;0;0;0;0.68023646;3.6251419e-11;5.4497341e-06;
0.95369846;0;0;0;0;0;0;0.44416788;0.97235322;0.96891981;
0;0;0;0;0;0;0;0;0;0;
0.91467679;0.93089461;0;0;0;0;0;0;0;0;
0.90472662;0;0;0.95919532;0;0;0;0;0.95650214;0;
0;0.89586496;0.94833958;0;0;0;0.95715511;0;0;0;
0;0.90250355;0;0;0;0;0;0.91153628;0;0;
0;0;0.95113182;0.92786628;0;0;3.6017361e-15;0;0;0;
0;0;0;0.88653642;0.92342609;0.91381902;0;0.67688817;0;0;
0;0;0;0;0.92110944;0;0;0.96024442;0;0;
0;0;0;0;0;0;0.94174337;0;0;0;
0.94928813;0;0;0;0;0.91455597;0;0;0;0;
0;0.82172793;0;0;0;0;0.95551568;0.92513257;0;0;
1.9274344e-09;0;0.83380997;0;0.72255981;0;0;0;0.93670547;0.8914901;
0;0;0;0;0;0;0;0;0;0;
0;0.95892644;0;0;0;0.0062559652;0.95875204;0;0;0;
0.94240528;0;0;0;0.93698925;0;0;0;0;0;
0;0;0;0.46172255;0;0;0;0;0;0;
0.95656306;0.94303083;0;0;0.90059286;0.92149454;0;0;0;0;
0;0;0.82028121;0;0;0;0;0;0;0;
0;0.00216799;0.96256655;0.78994101;0;0.97417825;0.53901976;0;0;0;
0.0019554151;0;0.85791034;0.8988381;0;0;0;0;0.93663073;0;
0;0;0;0.79005647;0;0;0;0.9118591;0;0;
0;0;0;0.5620324;0.97376513;0.96730095;1.7923153e-14;0;0.85841465;0.91714239;
0;0;0;0;0.36876172;0;0.044442929;0;0;0;
0;0;0.81332308;0;0;0;0.95866048;0;0.89351559;0.97102237;
0;0;0.92090583;0;0;0;0.73218429;0;0;0;
0;3.7131114e-09;0;0;0;0;0;0.00033617794;0;0;
0.93076456;0;0;0;0;0;0;1.2612602e-06;0.96599728;0.96202213;
0;0;0;0;0;0;0;0;0;0;
0.92184889;0.93398798;0;0;0;0;0;0;0;0;
0.91512698;0;0;0.9608683;0;0;0;0;0.95846325;0;
0;0.9048956;0.95003217;0;0;0;0.9587363;0;0;0;
0;0.91251618;0;0;0;0;0;0.91722941;4.2626658e-09;0;
0.55221933;0;0;0;0;0;0.0083775306;0;0;0;
0;0;0;0.90667003;0.93960416;0.92484456;0;0.80039132;0;0;
0;0;0;0;0.93828553;0;0;0.96445429;0;0;
0;0;0;0;1.3512686e-06;0;0.94943941;0;0;0;
0.9527601;0;0;0;0;0.9331913;0;0;0;0;
0;0.82851225;1.3279338e-09;0;0.13250943;0;0;6.8457048e-08;0;0;
0.80783111;0;0.91456521;0;0.89228755;0;0;0;0.85365266;0.70439821;
0;0;0;0;0;0;0;0;0.6603713;0;
0;0.86770719;0;0;0;0.80534428;0.97014117;0;1.3845224e-08;0;
0.87009162;0;0;0;0.91686517;0;0;0;0;2.707759e-10;
0;0;0;0.86746478;0;0;0.95261723;0;0.96151143;0;
0;2.161722e-07;0;0.00020107297;0.90424198;0.93236595;0;0;0;0;
2.2990121e-06;0;0.0026650317;0;1.1099949e-06;0;0;0;0;0;
0;0.2780045;0.96589977;0.85329854;0;0.92545426;0.76467967;0;0;0;
0.0035244408;0;0.89306736;0.73435932;0;0;0;0;0.94390565;0;
0;0;0;0.76581156;0;0;0;0.92533666;0;0;
0.9525013;0.58638048;0.9511016;0;0;2.6827079e-11;0;0;0.88721275;0.93414688;
0;0;0;0;0.79299462;0;0;0;6.0475049e-06;0;
0;0;0.8801192;0;0;0;0.96521401;0;0.92012429;0.92752683;
0;0;0.96970505;0;0;0;1.1829761e-05;0;0;0;
0;4.3814765e-09;0;0;0;0;0;4.7584925e-07;0;0;
0.94308043;0;0;0;0.95878965;0.82075369;0.96919084;0;0;0;
0;0;0;0;0;0;0;0.88107204;0.92845422;0.96368241;
0;0;0.94395906;0;0.95210975;0;0;0;0;0;
0.92769343;0;0.94228256;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.94452399;0.89186019;0;0;0;0;0.91967559;0;0.8998794;0;
0.94434518;0;0;0;0;0;0;0.88179874;0;0;
0;0.90884089;0.93729597;0.9672628;0;0;0.951419;0;0.95678133;0;
0;0;0;0;0.93885213;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.94972658;0.91855687;0;0;0;0;
0;0.00028535788;0.92003429;0;0.95014942;0;0;0;0;0;
0;0;0;0;0;0.88438177;0;0.96747267;0;0;
0.95390236;0;0.95582062;0;0;0;0;0;1.9736657e-08;0;
0;0;0;0;0.90137452;0.828435;0;0;0;0;
0;1.8622386e-05;0;0;0;0;0;0.89748108;0.95275986;0;
0;0;0;0;0.93511415;0;0.92399156;0;0.95541829;0;
0;0;0;0;0;0;0.95052147;4.9121911e-09;0;0.93967468;
0;0.97647977;0;0;0;0;0;0;0;0;
0;0;0.87376797;0;0.95702499;0.93793523;0;0;0;0;
0;0;0.84325582;0.84578615;0;0;0;0;0;0;
0;0;0.96757001;0;0;0;0;0;0;0;
0.95578343;0.083401442;0.96928728;0;0;0;0;0.47590217;0;0;
0.95869195;3.4402281e-09;0.93670046;0.52927738;1.5309366e-09;0.0022707172;0;0;0.97148889;0;
0;0.82976425;0;0;0;0;0.89949864;0;0;0;
0.79767138;0;0;0;0.97202241;0;0;0.77568346;0;0;
0;0;0;0;0;0;0.92600143;0;3.1267818e-11;0;
0;0;0;0;0.96499747;0.82767659;0.97240651;0;0;0;
0;0;0;0;0;0;0;0.91625887;0.94207579;0.96775281;
0;0;0.95337659;0;0.95795661;0;0;0;0;0;
0.94477344;0;0.95065141;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.95285666;0.92241323;0;0;0;0;0.93716693;0;0;0;
0;0;0.86508036;0.1208187;0;0;0;0.93395567;0;0;
0;0.95001483;0.95410776;0.9746685;0;0;0.96569622;0;0.96621501;0;
0;0;0;0;0.95997912;0;0;0;0;0;
0;0;0;0;0.12327716;0;0;0;0;0;
0;0;0;0;0.96073151;0.95168763;0;0;0;0;
0;0.8234846;0;0;0;0;0.91964525;0.83514208;0;0;
0;0;0;0;0;0.87905306;0;0.96983641;0;0;
0.95675576;0;0.95433754;0;0;0;0;0;0.3364329;0;
0;0;0;0;0.91261905;0.8598668;0;0;6.1014998e-07;0;
0;0.0058697835;0;0;0;0;0;0.90957743;0.95155156;7.7480528e-10;
0;0;0;0;0.9492563;0;7.3530648e-09;0;0;0;
0.87762046;0.4277086;0;0;3.7264539e-07;0;0.95427895;0.016069219;0;0.95848632;
0.74544615;0.97656012;0;0;0.48235628;0;0;7.2496543e-05;0;0;
0;0;0.89489114;0;0.96643078;0.94372487;0;0;0;0;
0;0;0.88898546;0.87689573;0;0;0;0;0;0;
0;0;0.97179145;0.82643354;0;0;0;0;0;0;
0.25587547;0;0;0;0.93921447;0.90065008;0;0;0;0;
0.95445037;0.0004992215;0.94886267;0.8310886;0.28777751;1.8440956e-06;0.74343055;0;0.97271961;0;
0;1.5587699e-05;0;0;0;0;0.92759794;0;0;0;
0.8851577;0;0;0;0.97661525;0;0;0.87842023;0;0;
0;0;0;0;0;0;0.97101325;0.14415708;5.6554667e-10;0;
0;0;0;0;0.0061396705;0;0;0;0.97624421;0.96771973;
      };
     };
     float_Data @[10] {
      name="EC_out_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 1;54;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=10;
      matrix_col_width=10;
      ar {
       name="ar";
      [1 54 40] 0;0.55355734;0;0;0;0;0;0;0.53206962;0;
0.46785474;0;0.57509649;0.54610002;0;0;0.53416258;0;0.52077568;0;
0;0.50958449;0;0.56269026;0;0;0;0;0.52398324;0;
0;0;0;0;0;0;0;0;0;0;
0.56023675;0;0;0;0;0.53642696;0;0;0;0;
0;0.47760755;0.41380769;0.50287342;0;0.52577746;2.7113242e-12;0;0;0;
0;0;0.44259489;0;0.46737283;0;0.5695228;0.42459264;0;0;
0.42500752;0;0.43693048;0;6.6486582e-12;0.45286345;0;0.52642018;0;0;
0;0;0.56856704;0;3.8302651e-12;0;0;0;0;0;
0;0;0;0;0.5002417;7.9150497e-12;0;0;0;0.39522305;
0;0;0;0;1.7062212e-14;0.4324117;0.43288291;0.45395392;0;0.56889111;
1.84824e-09;0;4.5004558e-14;0;0;0;0.46904156;1.3380569e-10;0.52904993;0;
0.60612375;0.42696986;3.8557357e-13;2.221884e-13;0.38474268;0;0.45648474;0;4.0820242e-10;0.46954444;
4.6502743e-13;0.56833416;0;0;3.2253819e-14;0;0.61931688;0;6.2362798e-10;0;
0;0;1.619893e-12;0;0;0;0;0;0.52471292;5.3196497e-10;
0;0;0;0.36819351;0;0;1.0726814e-13;9.8042251e-12;4.2981597e-11;0.46136746;
0.55002749;0.50263637;0;0.20819354;5.7108187e-05;0;6.0140191e-11;0;0;0;
0.74883556;2.9317659e-10;0.81079894;0;0.66767424;0.4602859;1.2980213e-06;1.0001407e-12;0.5369854;0;
0.18536787;0;0.0096432511;0.28667915;2.8565257e-05;0.74804914;0;0;0;2.0583843e-15;
0.75922281;0;0.050059106;1.6393483e-12;1.1466852e-11;0;3.2227942e-13;0;0;0;
0;0;0.72601688;0.00016699618;0;0;0;0.58762592;0;0;
2.3216897e-11;1.1174566e-09;2.698016e-07;0.72741842;0.79523051;0.66359401;0;0.011561279;0.4348284;0;
0;0;0;1.944004e-12;0.71330303;0.00017570228;0.77822304;0.00053749577;0.77111566;0.012633322;
0.0048014452;8.0791842e-06;0.0026534041;0;0.0038196235;0;0.77634555;0.002502162;7.6756232e-06;0.76168877;
0;0;0;0;0.82069761;0;0.72423381;8.8332796e-05;0.011026513;0;
0;0;9.9840929e-07;0;0;0;0.49918365;0.72459006;0;0;
0;0.010239477;1.47506e-11;0;4.9674354e-06;6.143652e-05;0.0047855796;0.75135523;0.81835711;0.77364886;
0;0.56280434;0;0;0;0;0;0;0.41441283;0;
0.48096985;0;0.58976263;0.46371955;0;0;0.36789528;0;0.48896581;0;
9.4710305e-14;0.46694165;0;0.58915764;0;0;0;0;0.584526;0;
0;0;0;0;0;0;0;0;0;0;
0.5133245;0;0;0;0;0.35742015;0;0;0;0;
0;0.48603928;0.53519493;0.5163247;0;0.57324803;3.4730064e-13;0;0;0;
0;0;0.53630859;3.1614644e-12;0.61151004;0;0.6402939;0.35329676;6.1663771e-16;1.8334314e-15;
0.50147951;0;0.39557272;0;2.6093824e-10;0.52142376;6.4611727e-14;0.520459;0;0;
1.1445883e-14;0;0.69864368;0;1.4672707e-11;0;0;0;0;0;
0;0;0;0;0.56597161;4.6640764e-12;0;0;0;0.43346289;
0;0;5.3535892e-13;7.824042e-13;2.3150164e-11;0.41137615;0.56733423;0.45734975;0;0.40198919;
0.024384828;0;0.001539726;0;0;0.017677465;0.78801107;0.78116012;4.3649502e-06;0;
0.81609929;2.749777e-11;0.61355817;0.52354622;2.7509488e-11;3.5679048e-07;2.0475618e-11;0;0.75757247;5.3712969e-13;
0.616696;0;0;0;0.0021611592;0.0022000535;0.5722729;0;0.42976657;0;
0;0;0.0048271371;0;0;0;0;0;0.78423917;0.053569943;
0;0;0;9.119836e-12;0.02809114;0;0.70599073;0.66014975;0.74456447;0;
5.2877047e-05;2.4433137e-05;0;0.0003112306;0.042128723;0;0.036532227;0;0;0.16985065;
0.55163115;0.71536601;5.09973e-09;0;0.79372197;7.7745072e-15;0.41549051;0.7676875;4.178103e-11;3.0516087e-05;
2.1641928e-11;0;0.7656647;1.8505385e-13;0.38943318;0;0;0;0.0018841056;0.0079492582;
0.14701636;0;0.53091788;0;0;0;0.0050253132;0;0;0;
0;0;0.6146673;0.64085811;0;0;0;9.1913239e-13;0.16985597;0;
0.74266171;0.75672746;0.71722776;5.1590932e-12;7.3620491e-08;3.4059033e-11;0;3.4280373e-10;0.0001721118;0;
7.1765395e-14;0;0;0.41188836;0.61511308;0.53011781;2.4963559e-10;0;0.54925066;1.1726923e-13;
0.40692091;0.6062364;9.3690535e-15;2.772638e-11;0;0;0.5626933;0;0.54834425;0;
0;0;7.2212967e-14;2.4045512e-08;0.00020348582;0;0.59043318;0;0;0;
0;0;0;0;0;0;0.55727088;0.5788433;0;0;
0;0;0.45800725;0;0.4291074;0.38376549;0.40357798;5.0605489e-14;1.1197089e-11;0;
0;0.40153396;0.49882743;0;0.39407662;0;0;0;0;0.56814128;
0;0;0.64212465;0;0;0.57905549;0;0.35258365;0;0;
0.61815959;0;0;0;0;0;0.39159542;0.35716128;0.52718496;0;
3.2337887e-06;0;0;0;0.37000549;0;0;0;0;0;
4.0548734e-05;4.0602931e-06;0;0;0;0;0;0;0.45760918;0.49123755;
0.45556143;0;0;0;0;0.38177952;0.5034278;0;0.39862102;0;
0;0;0;0.5704208;0;0;0.64020097;0;8.364716e-14;0.58485818;
0;0.34683183;0;0;0.62490243;0;0;0;0;0;
0.38855663;0.34700927;0.52612501;0;4.3532527e-06;0;0;0;0.37173906;0;
0;0;0;0;4.2396052e-05;5.6721719e-06;0;0;0;0;
0;0;0.46587372;0.50170183;0.4654102;0;0;0;0;0.41717398;
0.5162499;0;0.38984972;0;0;0;5.386131e-10;0.59271407;2.8058553e-14;0;
0.66465712;0;2.1634493e-07;0.61101866;0;0.30257505;0;0;0.63687706;0;
1.1018653e-11;0;0;0;0.42171478;0.34951535;0.54187536;0;1.3464793e-05;0;
0;0;0.36062038;0;0;0;0;0;0.00013865014;6.3982079e-06;
0;0;0;0;6.9946083e-13;0;0.50476867;0.53483677;0.50858557;0;
0;2.8386264e-13;0;0.47990954;0.69658709;0;0.4629561;0;0;0.001499264;
0.028099;0.75604665;9.5219308e-05;1.0773098e-14;0.75388533;1.094578e-09;0.017933322;0.79938972;2.7265818e-14;0.096435666;
0;0;0.78791571;0;0.027324436;2.2579612e-11;0;0;0.33049947;0.26952884;
0.73938316;0;0.14490899;0;0;0;0.47242931;0;0;0;
0;0;0.15042827;0.21973279;0;0;0;0;0.0027303575;0;
0.77316779;0.76780319;0.69699538;3.4928019e-11;9.9445406e-06;5.3943999e-08;0;0.048384134;0.83636588;0;
0.0089461459;0;0;4.1439562e-06;0.48292762;0.41693392;0.79326707;0.00099584355;0.74413532;6.4617249e-11;
0.01342136;0.083409265;3.7405077e-15;9.4255622e-05;2.4307118e-14;0;0.8623265;0;0.0349872;0.53673428;
0;0;6.0554016e-06;0.00064536219;0.87768304;0;0.76558781;0;5.6724311e-06;0;
0.00056382385;0;0;0;0;0;0.75186902;0.72159952;0;0;
0;7.4013486e-12;0;6.7283297e-12;0.2203944;0.29795963;0.45446458;0.041538686;0.72860068;0.71296686;
0;0.39113426;0.49676961;0;0.38751039;0;0;0;0;0.56922805;
0;0;0.63755316;0;0;0.58707488;0;0.3440176;0;0;
0.62212515;0;0;0;0;0;0.38601559;0.34367943;0.53047943;0;
4.2171682e-06;0;0;0;0.36619735;0;0;0;0;0;
5.0476239e-05;5.4129209e-06;0;0;0;0;0;0;0.47057456;0.50101203;
0.45282045;0;0;0;0;0.37359166;0.51609027;0;0.4085775;0;
0;0;2.141131e-11;0.58332688;2.9021783e-13;0;0.63780004;0;2.3374956e-12;0.61226976;
0;0.34703285;0;0;0.64316201;0;5.6612468e-13;0;0;0;
0.38282895;0.32984853;0.54501283;0;1.519422e-05;0;0;0;0.38473922;0;
0;0;0;0;9.2241979e-05;2.6437174e-05;0;0;0;0;
2.3217586e-14;0;0.51493311;0.54398924;0.48840538;0;9.6169315e-16;1.0254203e-13;0;0.60306728;
0.68367368;0;0.15047491;0;0;1.5180122e-10;1.8258303e-05;0.71595728;3.572068e-06;0;
0.72129935;3.9413819e-14;2.2743615e-07;0.6940726;8.8563664e-15;0.31160676;0;0;0.73752677;1.3204525e-14;
1.7499127e-06;9.0380633e-13;0;0;0.41332585;0.12961988;0.75243449;0;0.0048921551;0;
0;0;0.52631873;0;0;0;0;0;0.017016929;0.01255431;
0;0;0;0;7.7355784e-09;0;0.71725023;0.68436676;0.57954472;0;
1.5840551e-09;4.4907935e-09;0;9.7112665e-09;0.68452448;0;1.3759158e-11;0;0;0;
1.5700145e-07;3.2148803e-10;0.64670306;0.54507774;1.2848369e-05;3.5868454e-11;7.5915385e-10;1.3865262e-09;7.9975653e-12;0;
0;0;0.71063519;2.6198255e-11;1.4759169e-10;0.65198302;0;0;3.4810318e-15;1.5474371e-15;
0.74771833;0;0.67743635;0.2452822;0.4422119;0;9.283266e-15;0;0.21299577;0;
0;0;6.5739222e-08;0.69909805;0;0;0;0;0;0.36245441;
2.2174778e-11;1.6220367e-09;2.0314967e-08;0.5331111;0.6392504;0.62513226;0;4.4610022e-09;0.69487315;0;
7.7192381e-13;0;0;0;7.1773775e-07;3.3859766e-11;0.66227841;0.56734318;0.00015065268;2.0775048e-09;
1.4913759e-09;1.884257e-11;5.3407861e-10;0;1.464727e-10;0;0.67367721;1.9084161e-11;4.3297458e-12;0.65787125;
0;0;0;0;0.74267733;0;0.71507841;0.2934345;0.48254436;0;
0;0;0.31304666;0;0;0;3.2395155e-07;0.58282888;0;0;
0;5.9178457e-10;0;0.088324949;5.4148157e-12;3.3955603e-14;9.0504201e-11;0.57007653;0.57763177;0.66098529;
0;0;0.5333302;0;0;0;0;0;0;0;
0.5363825;0.41214213;0;0;0;0;0;0;0;0;
0.51494145;0;0;0.59726596;0;0;0;0;0.61148387;0;
0.53254735;0.43712348;0.43240443;0;0;0;0.43029508;0;0;0;
0;0.54074389;0;0;0;0;0;0.43583298;0;0;
0;0.48022616;0.50333804;0.50371844;0;0;0.66580802;0;0;0;
0;0;1.8820028e-12;0;0.6430589;0.38875318;1.5515141e-07;0;0;0;
0;0;0;0;0.6477527;0;0;0.68379915;0;0;
0;0;0.69767165;0;0.65789866;0.32594022;0.43535033;0;0;0;
0.38374913;0;0;0;2.6366656e-13;0.65103078;0;0;0;0;
0;0.32636243;0;0;1.6433884e-13;0.59091574;0.62792742;0.55832005;0;1.2417657e-10;
0.67461079;0;6.0317376e-12;0;0;0;8.0157871e-09;5.3642334e-12;0.74242598;0.33732736;
0.00034772546;0;6.9614745e-11;2.6671382e-10;0;0;5.5469117e-13;0;0.74641812;4.3406138e-12;
0;0.67982095;0;0;0;0;0.74096096;0;0.68278724;0.61157894;
0.46223825;0;1.757137e-12;0;0.28588459;0;0;0;4.2007649e-08;0.72064018;
0;0;0;9.7464517e-14;0;0.24763249;3.255711e-11;8.6780569e-11;2.3009212e-09;0.62763232;
0.66272438;0.70555496;0;0.0018635028;0.80092692;0;0;0;0;0;
0.30494595;1.6235127e-08;0.85157204;0.15354843;0.63401794;1.3849069e-05;1.2213855e-05;0.0012833385;5.2428192e-07;0;
5.6636372e-07;0;0.79779518;7.1496993e-07;1.1594756e-08;0.82576859;0;0;0;0;
0.86706787;0;0.78071868;0.23790953;0.51399511;0;0;0;0.044160981;0;
0;0;0.19510183;0.83107662;0;0;0;1.0805686e-06;0;0.018604267;
8.779719e-08;0.00062924885;0.020410122;0.77909327;0.83061701;0.809147;0;1.620969e-06;0.74001104;0;
0;0;0;0;4.0383606e-05;1.1798923e-10;0.70367801;0.55076486;0.000905575;1.0164096e-08;
3.3511583e-08;1.4103419e-08;2.0686372e-08;0;2.5178837e-10;0;0.76208937;1.8359154e-09;5.3275655e-11;0.7190659;
0;0;1.88459e-14;0;0.78657079;0;0.71769762;0.21301624;0.20230147;0;
1.1771764e-10;0;0.49196202;0;0;0;0.00013062736;0.61865056;0;0;
0;6.4982977e-11;0;0.1508359;1.4122157e-14;4.360443e-08;7.2389576e-06;0.59693074;0.58577162;0.68865311;
0;0;0.5245015;0;0;0;0;0;1.2923815e-14;0;
0.54104924;0.40539804;6.5223261e-13;0;0;0;0;0;0;0;
0.52091819;0;0;0.59616244;0;0;0;0;0.61409312;0;
0.53530604;0.43433535;0.42828354;0;0;0;0.42919055;0;0;0;
0;0.54271591;0;0;0;0;0;0.43301225;0;0;
0;0.48143342;0.50785643;0.49380073;0;1.9702749e-10;0.70405024;0;7.6135584e-14;0;
0;3.9191473e-15;1.5277854e-08;3.5530044e-11;0.69011235;0.38333318;3.7132286e-06;3.7901309e-14;4.5958556e-11;3.6153933e-09;
0;0;0;0;0.69358921;0;2.4017132e-12;0.71437567;0;0;
1.7632249e-15;3.6601893e-14;0.73285496;0;0.69641054;0.27739128;0.45584238;0;6.3879479e-13;0;
0.37345779;0;0;0;5.2575162e-09;0.69286555;0;0;0;0;
3.8539528e-14;0.2752848;3.9051089e-12;8.860741e-10;5.6907039e-09;0.62447441;0.68317276;0.57385695;0;0.49917296;
0.77032006;0;0.087041594;0;0;1.397445e-06;0.070062995;0.69840318;0.21836418;9.8754038e-10;
0.77556825;1.9823153e-14;0.00037767956;0.6986984;0;0.025822945;1.4117817e-13;0;0.79128128;4.5667671e-11;
0.00013142837;5.142302e-05;0;0;0.035051271;0.020923896;0.8371526;0;0.062881343;1.465219e-12;
6.7072814e-12;0;0.52845973;0;8.4820822e-14;0;0;0;0.41303191;0.66865808;
0;0;0;0;7.2662436e-07;2.4131403e-11;0.74242795;0.65569049;0.63742352;3.92777e-07;
0.0025644058;0.0077822488;0;0.0053673587;0.74500906;0;0.00049475825;0;0;0.034425545;
0.69613069;0.60841262;0.50363535;9.6569721e-09;0.77549577;2.8685588e-06;0.29271719;0.7769686;3.4262268e-07;9.1317279e-06;
1.8237274e-09;0;0.80377382;0;0.012925314;0.00019282328;0;0;0.015140605;0.00035729364;
0.78771037;0;0.78153092;2.9644137e-10;8.5068363e-10;0;3.71328e-06;0;3.7513953e-10;0;
0;0;0.084612682;0.75689059;0;0;0;2.0291718e-07;0.0077287145;3.8921777e-09;
0.58200383;0.64672971;0.29325083;0.0011375353;0.00014090686;3.0153125e-05;0;0.21644878;0.68589723;0;
0.59672165;0;0;0.0002374717;0.0073630987;0.7057997;8.7916305e-06;0;0.76128042;0;
0.01375656;0.75331783;0;0.060146149;0;0;0.78079295;0;0.0072197681;0;
0;0;0.57923305;0.31757963;0.67086923;0;0.047153264;0;2.100774e-13;0;
0.38523218;0;0;0;0;0;0.010806907;0.34586468;0;0;
0;0;0.00021956109;0;0.61482674;0.75017941;0.6550588;6.2525685e-16;1.0312273e-11;9.7128726e-14;
0;0;5.2099599e-06;0;0;0;0;0.45815912;0.54017174;0.50316966;
0;0;0.56458783;0;0.42147645;0.43693945;0;0;0;0;
0.60857457;0;0.41860697;0;0;0;0;0;1.0517873e-05;0;
0.52607346;0;0;0;0;0;0;0;0;0;
0.55368888;0.50552082;0;0;0;0;0.44429132;0;0.46813336;0.42360094;
0.49032381;0;0;0;0;0;7.3144943e-06;0;0;0;
0;0.46514818;0.53563923;0.52317756;0;0;0.57544214;0;0.42252329;0.43683782;
0;0;0;0;0.61488521;0;0.40998366;0;0;0;
0;2.5510596e-12;1.5492104e-05;0;0.51907718;0;0;0;0;0;
0;0;0;0;0.54533905;0.52454531;0;0;0;0;
0.42735738;0;0.47672218;0.41451228;0.48438033;0;0;0;0;2.3716806e-10;
8.1379912e-06;0;1.3227999e-11;0;0;0.36757606;0.49906147;0.49909443;0;0;
0.57933664;0;0.37245828;0.46139675;0;9.3239427e-12;0;0;0.61003488;0;
0.40045026;0;0;0;2.7094993e-09;5.0898424e-10;2.1048161e-05;0;0.48489782;0;
0;0;1.0423892e-10;0;0;0;0;0;0.54282737;0.44673797;
0;0;0;0;0.42860177;0;0.46252468;0.45685214;0.5237385;0;
0;0;0;1.477258e-14;4.4364439e-05;0;0;0;0;0.36336902;
0.50190163;0.61838675;0;0;0.6507147;0;0.49128848;0.48497218;0;0;
0;0;0.68634546;0;0.26220903;0;0;0;1.1243396e-06;9.6716003e-06;
6.271559e-05;0;0.61893874;0;0;0;7.5031246e-15;0;0;0;
0;0;0.60202134;0.409244;0;0;0;0;0.42415529;0;
0.51378411;0.5338425;0.5938499;0;0;0;0;0.52000785;0.67735022;0;
0.15660875;0;0;0.001961323;0.04262726;0.75818497;0;0;0.78860468;3.0152939e-13;
0.056191612;0.74284637;0;0.26069954;0;0;0.78637946;0;0.0025392293;0;
0;0;0.55968231;0.55474144;0.7076959;0;0.088806584;0;0;0;
0.16813385;0;0;0;0;0;0.06841597;0.0060990984;0;0;
0;0;0.044269234;0;0.71673495;0.70752329;0.72305053;0;0;1.0461846e-06;
0;1.2371785e-12;6.097694e-06;0;0;0;0;0.44687629;0.52642769;0.49045479;
2.6575352e-14;0;0.55571717;0;0.39579573;0.42475325;0;0;0;0;
0.62034297;0;0.39444771;0;0;0;5.1844151e-15;8.4589921e-14;1.9652134e-05;0;
0.52804685;0;0;0;1.276554e-15;0;0;0;0;0;
0.53639686;0.49323004;0;0;0;0;0.43450251;0;0.46687591;0.41994795;
0.47579274;0;1.8300583e-15;0;0;1.4513484e-09;5.8502046e-05;0;2.1600736e-13;0;
0;0.52926481;0.50322425;0.60245669;1.0357244e-08;5.5135313e-13;0.64090466;3.5408739e-13;0.42119262;0.35498822;
0;0;0;0;0.68197793;0;0.44165921;1.043164e-12;0;0;
2.6926662e-12;6.0503094e-06;0.00051458611;0;0.52721411;0;0;0;3.7406276e-14;0;
0;0;0;0;0.49861851;0.57825422;0;0;0;0;
0.42030567;0;0.54502934;0.41128591;0.46955448;2.9605714e-11;1.0166278e-08;4.4260093e-10;0;2.7503685e-07;
0.001740564;0;4.0146283e-13;0;0;0.31246132;0.47487339;0.53599358;4.0344186e-10;0;
0.58055645;4.8112404e-13;0.31675655;0.61638838;0;3.434299e-11;0;0;0.68808103;0;
0.4948999;0;0;0;2.4696135e-07;1.1453742e-05;0.018155077;0;0.57487857;0;
0;0;1.8469966e-10;0;0;0;0;0;0.49052873;0.48365399;
0;0;0;3.1519053e-15;0.52735537;0;0.54338235;0.52236795;0.56548363;3.8875153e-15;
1.6938435e-11;5.5331476e-11;0;0.00014332587;0.0015978641;0;0;0;0;0.51424265;
0.7829836;0.57333302;9.1911366e-05;7.6948142e-11;0.77840978;1.7192583e-06;0.50622261;0.29279304;0;0;
0;0;0.7013669;0;0.36806512;7.5821566e-10;0;0;1.4906725e-06;6.4291481e-07;
0.056850333;0;0.6830247;4.705362e-12;2.0339352e-14;0;2.9125977e-10;0;0;0;
0;0;0.73908061;0.72086775;0;0;0;0;0.34152308;0;
0.53746229;0.46916956;0.53402501;6.4720293e-06;0.00052303757;9.8995793e-07;0;0.0075148013;0.49445343;0;
5.9425849e-07;0;0;6.0016126e-05;0.64516479;0.0077547738;0.71567678;6.713359e-07;0.73407435;0.00033549347;
0.0027852003;0.0046274858;9.8001146e-06;5.6613088e-09;1.9528863e-14;0;0.79416496;1.1922401e-05;8.6526734e-06;0.65715522;
0;0;1.1501348e-07;6.009273e-06;0.82442486;0;0.56749195;0;4.2044676e-06;0;
4.2167903e-06;0;0;0;0;0;0.65959054;0.48219538;0;0;
0;2.0565818e-05;0.00018156899;0;0.009720467;0.00074319728;0.032620091;0.53691483;0.78013706;0.6658597;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [40] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[3] {
    name="LastTestOutputData";
    desc="just for the last test epoch";
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_72";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [40] 199;199;199;199;199;199;199;199;199;199;
199;199;199;199;199;199;199;199;199;199;
199;199;199;199;199;199;199;199;199;199;
199;199;199;199;199;199;199;199;199;199;
      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_73";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [40] 9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
      };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_74";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [40] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
      };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [40] "a_targ_e";"a_f1_e";"a_f2_e";"a_f3_e";"a_f4_e";"a_targ_u";"a_f1_u";"a_f2_u";"a_f3_u";"a_f4_u";
"b_targ_e";"b_f1_e";"b_f2_e";"b_f3_e";"b_f4_e";"b_targ_u";"b_f1_u";"b_f2_u";"b_f3_u";"b_f4_u";
"c_targ_e";"c_f1_e";"c_f2_e";"c_f3_e";"c_f4_e";"c_targ_u";"c_f1_u";"c_f2_u";"c_f3_u";"c_f4_u";
"d_targ_e";"d_f1_e";"d_f2_e";"d_f3_e";"d_f4_e";"d_targ_u";"d_f1_u";"d_f2_u";"d_f3_u";"d_f4_u";
      };
     };
     float_Data @[4] {
      name="minus_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
      ar {
       name="ar";
      [40] 80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
      };
     };
     float_Data @[5] {
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [40] 0.53606021;3.5964689;6.4489141;10.90171;10.691674;2.8106985;3.2957919;8.074544;14.700522;9.5764027;
2.5759175;5.1474056;7.2147765;9.7992525;12.699161;2.8898671;5.5015516;8.629838;11.526306;10.868034;
2.134501;5.067946;8.0197086;12.276152;10.973543;1.9056045;5.3172345;13.598516;13.252754;12.700071;
1.5921481;2.9366975;6.5730395;9.2628231;11.385362;2.2048507;3.2994983;6.5604281;9.9568644;12.628962;
      };
     };
     float_Data @[6] {
      name="DG_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 20;20;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=20;
      matrix_col_width=10;
      ar {
       name="ar";
      [20 20 40] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.96726805;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.97596359;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.8833037;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.97400838;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.96974421;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.91047281;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.52847177;
0;0;0;0;0;8.827725e-12;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1.2659547e-12;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1.3230785e-09;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.00038244508;0;0.00020418223;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.12994415;0;
0;0;0;0;7.0261631e-05;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;3.3114841e-13;0.010407129;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;6.8701594e-10;0;0;0;
0;0;0;0;0;0;0;0;3.0499418e-13;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.2379822e-10;4.1807037e-11;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.5867635e-10;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.89367002;0;0;0.85731113;0.40900025;1.2004973e-10;0;0;0;0;
0;0;0;0;0;1.1029678e-13;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.94409382;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.5357034e-18;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;3.7338629e-14;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;8.1811877e-06;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;2.5032364e-06;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.079749189;0;0;0.75197113;0.28657857;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.83908796;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.1294354e-15;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.98078716;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;2.3414906e-14;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;3.5336159e-12;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;5.9857157e-06;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;6.6789571e-06;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1.0934657e-17;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.97706485;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.31120047;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.44341958;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;3.2771629e-06;0;0;0;0;0;0;0.0093373768;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.92080796;
0;0.025126953;0;0.00082983967;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.74337423;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.85511601;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;4.0132168e-08;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;3.0235927e-09;0;0;0;
0;0;0;0;0;0;0;0;0;0;
2.7459328e-12;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;2.938564e-11;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.80789369;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1.1567201e-14;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1.1531528e-13;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.9391579;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.0036844271;0;
0;0;0;0;0;0;0;0;0.0014975657;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;7.3489127e-07;0;0;
0;0;0;0;0;0;0;0;9.8812389e-11;0;
0;0;0;0;0;0;0;0.00020909322;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.26113585;0;0;1.0604595e-08;7.0849173e-06;2.6888047e-11;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1.4231984e-10;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.84161961;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;2.939259e-06;0;0.9446286;
0;0.0012991256;0;0;0;0;0;0;0;0;
0;0;3.9798394e-11;0;0;0;0;0;0;0;
0;0;0;0;0.0015640638;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.061454866;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.00022556304;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;8.1035054e-13;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.9461652;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.93692696;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.93861306;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.85671455;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.9562512;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;5.8753063e-18;
0;0.95609456;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;3.4393877e-09;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.92951375;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.96695161;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;8.3324654e-09;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.00064068759;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.92826879;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.0026034738;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.9291777;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1.415097e-08;0;0;0;7.0429599e-07;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1.1275173e-05;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.80796671;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.87377602;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
4.5385209e-06;0;0;1.0510061e-05;0.93213373;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.47727543;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.97220749;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.039320063;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;9.3407923e-19;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.97481728;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;2.2296799e-10;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.64672405;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;7.9925903e-06;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;3.2442907e-12;
0;0;0;0;0.0040176567;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
2.1239208e-05;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.0017397912;0;0;0;0;
0;0;1.7508053e-09;0;0;0;0;0;0;0.62726218;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.0053952392;0;0;0;0;0;0.080339327;0;0;
0;0;0;0;0;0;0.81351876;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;9.1164489e-12;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.93361068;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.6218179e-05;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;3.2082612e-06;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.0081114592;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;7.9357435e-13;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.36942616;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1.0774407e-12;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.92305189;0;0;0;0.91692454;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1.910373e-07;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.0019993566;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.86688405;0;0;0;0.96098107;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.96882302;0;0;0;0.96787274;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.003099028;0;
0;0;0;0;2.0978881e-12;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.94691312;0;0;0;0.95450521;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.6001094e-09;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;3.9807008e-11;
0;0;0;0;0;0;0;0;0.72777075;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.85581446;0;0;0;0.96028173;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.14948185;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;5.7919689e-12;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.0010573877;0;
0;0;0;6.8369984e-05;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.86782074;0;
0;0;0;0;0.86514521;0;0;0;0.46061948;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.0068407422;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.0064795977;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2530458;0;0;0;0.47739601;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;3.8227018e-08;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;6.7104018e-12;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1.281672e-06;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.92326874;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.00061787601;0;
0;0;0;0;1.1440716e-07;0;0;0;0;1.9284387e-10;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;6.4655251e-05;0;
0;0;0;0;0;0;0;0;0.86654013;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.69012529;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
3.0339265e-07;0;0;0;0.00062083313;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;9.66571e-09;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.96118444;0;0;0;0.95952696;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.44366729;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1.2204265e-12;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;2.6095192e-11;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.3932919e-09;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;6.641198e-11;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.9367373;0;0;0;0.94766557;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.93801284;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;6.4944709e-11;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;2.3566718e-14;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;4.6592914e-11;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.78686637;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
7.1578243e-06;0;0;0;0.89824986;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.00044753184;0;0;0;0;
0;0;0;0;0;0;1.6704287e-10;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.00019802435;0;0;0;0;0;
0;0;0;0;0.00019512171;0;1.0449945e-07;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
2.9774495e-05;0;0;0;0;2.8418476e-08;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.039348654;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.0011193872;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.74660277;0;0;0;0;0.00022079438;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.4984785e-08;0;0;0;6.3430591e-05;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;9.5540269e-09;0;2.2569573e-06;0;0;0;0;0;
0;0.87393391;0;0.00061318465;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;3.9085949e-13;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.88066959;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.8602307e-08;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;6.6917184e-12;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;9.1945157e-07;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;7.3448173e-06;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;4.3906434e-10;0.90101016;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;6.2362255e-07;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;5.1266597e-06;
0;0.53840762;0;0;0;0;0;0;0;0;
0.88253295;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.04301298;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.040623557;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;2.121766e-13;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.95958787;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.96539086;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.80463356;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.93052894;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.94668663;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.012314464;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;5.8283109e-18;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;6.521244e-15;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.93829083;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.94575;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;2.9663783e-09;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.0038026136;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.399488e-08;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.7845532e-15;0;0;0;0;0;0;0;0.00015036568;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.94778675;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;6.9404516e-15;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.82009768;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.00016097572;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.000151999;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.53367907;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1.2800912e-10;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.91494018;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.46115437;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;2.4912312e-12;0;0;0;0;0.51822466;0;0;
0;0;0;0;0;3.4817537e-14;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.81366956;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;9.0882812e-09;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.048784267;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.5448912e-05;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.4046524e-09;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.79075134;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;7.2177496e-13;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.51951355;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;3.1852264e-12;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.95743573;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.63714778;0;0;
2.3905311e-06;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.00010928922;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.88241035;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.0012354363;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;4.7698921e-11;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.93361235;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.6785398e-11;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.86710489;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;3.1424256e-06;0;0.00014885711;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.083999805;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;7.473525e-15;0;0;0;0;5.8315209e-06;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.93571645;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.00065736065;0;0;0;0;0;0;0;
0;5.4215748e-06;0;0;0;0;0;0;0;0;
0;0;0;0;0;1.1733895e-11;0;0;0;0;
0;2.6601967e-07;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;7.7716768e-06;0;0;0;0;0;0;0;0;
2.0888207e-13;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.00040668572;0;0;0;
1.0213091e-12;0;0;0;0;0;0;0;0;0;
0;7.7920281e-11;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;2.0408568e-07;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.5525863e-08;0;0;0.00015144912;0;0;0;0;0;
0;3.1503879e-11;0;0;0;0;0.0012667086;0;2.8893015e-11;0;
0;0;0;0;0;0;0;0;1.0185954e-06;0;
0;0;0;0;0;0;0;0;0.89288116;8.2320832e-07;
0;0;0;0;0;0;0;0;0;7.4188885e-14;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;5.8091487e-08;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.028027795;5.6576329e-07;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.83559102;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;5.1101848e-12;0;0;0;0;0;0;0;0;
4.492901e-07;0;0;0;0;0;0;0.7612229;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.7370689e-09;0;0;0;0;0;0;0;0;
0;1.2935423e-12;0;0;0;0;0;0;0;0;
0;0;4.4950679e-12;0;1.774286e-08;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.13782218;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.00010881893;0;0;0;0;0;0;0;0;0;
0;0;0;1.2533408e-10;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1.0776203e-05;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;4.9406357e-05;0;0;0;0;0.00081444893;0.264716;0;
0;0;0;0;0;0.52996081;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.50900197;0;0;0;
0;0;0;0;0;0;0.0043628667;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.8469488;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.86530137;0;0;
0;0;0;0;0;1.3478222e-05;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;3.6042596e-07;0;0;0;0;0;0;0;0;
0.15786563;0;6.8964445e-10;0.097287044;1.0601801e-05;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
     float_Data @[7] {
      name="CA3_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 10;8;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=10;
      matrix_col_width=10;
      ar {
       name="ar";
      [10 8 40] 0;0.96373844;0;0;0;0;0;0;0.84103662;0.82304651;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.73638439;0;0;0.84543198;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.76900017;0.783297;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.62543118;0;0;0;0.59686941;0;0;
0;0.95885718;0;0;0;0;0;0;0.86892313;0.79392314;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.75777179;0;0;0.86525321;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.80955553;0.74840915;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.038322605;0;0;0;0.2822355;0;0;
0;0.96506774;0;0;0;0;0;0;0.79721183;0.77893502;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.48718071;0;0;0.70366549;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.70216757;0.79929638;0;0;0;
0;0;0;0;0.00037313806;0;0;0;0;0;
0;0;0;0.66167957;0;0;0;0.67096812;0;0;
0;0.80362809;0;0;5.6516303e-09;0;2.4718315e-06;0;0.6209349;0.19972229;
0;0;0;0;0;0;5.50748e-08;0;0;1.591479e-14;
0;0;0;1.0053946e-13;0;0;0;0;0;0;
0;0;0;0;0;0;0.19058904;0;0;0.52593678;
0;0;0;0;0;0;1.9958274e-05;0;0;0;
0;0;0;0;3.8131849e-09;0.0023444728;0.33009306;0;0;0;
9.2287539e-11;0;0;0.0010276628;0;0;0;0;0;0;
0;0;0;0.00079279864;0;0;0;0.9645896;0;0;
0;0.9490931;6.6403977e-08;0;0;0;0;0;0.0012567394;0.0001431485;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.31552124;0;0;2.2124746e-05;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.021812929;0.0018442194;0;0;7.5379219e-08;
0;0;0;0;0.025442012;0;0;0;0;0;
0;0;0;0.45299822;0;0;0;0.93496341;0;0;
0;0.95943898;0;0;0;0;0;0;0.78456247;0.83368886;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.72919083;0;0;0.87823188;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.78184205;0.78094679;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.22240044;0;0;0;0.00032096941;0;0;
0;0.84923583;0;0;0;0;0;0;0.89136273;0.87455362;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.86880761;0;0;0.92229944;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.87922728;0.85797471;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;2.0339062e-08;0;0;0;0;0;0;0;0.94929171;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.87211436;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;4.7267985e-11;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1.6906599e-05;0;0;1.8711439e-14;0;0;0;
0;0;0.9421227;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;2.1153909e-07;0.88014406;0;3.6694246e-08;
0;0;0;0;0;0;0;0;0;0;
1.081879e-11;1.7992627e-10;0;0;0.88753331;0;0;1.6467608e-10;0;0;
0;0;0.91989315;0;0;0;0;0;4.0611724e-07;0;
2.356807e-07;1.2051146e-07;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;9.6222429e-08;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.86501825;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.85670322;0;0;0;0;0;
0;0;0;0;0.82000071;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.80428833;0;0;0;0;0;
0;0;0.87340045;0;0;0;0;0;0;0.85383755;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.89092106;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.91480517;0;0;0;0;0;
0.75280386;0;0.92302203;0.8388651;0;0;0;0;0.85956252;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.88378918;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.90978956;0;0;0;0;0;
0.8271451;0;0.9085896;0.87502092;0;0;0;0;0.86271954;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.90755504;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.93747771;0;0;0;0;0;
0;0;0.92971194;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.91380233;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.00080330466;0;0.93064922;0;0;0;0;0;
0;0;0.92054868;0;0;0;0.00056582526;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.85141635;0.76759571;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.71675164;0;0;0;0.83311629;0;
0;0;0.85731;0;0.81634855;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.89777899;0;0;0;
0;0;0;0;0;0;0;0.8570978;0;0;
0;0;0;0;0;0;0;0.596187;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.77869684;0;0;0;0;0;
0.88021863;0;0.7544592;0.89456511;0;0;0;0;0.91333133;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.89631236;0;0;0.90729189;0;0;0;0;0.9088757;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;7.8266782e-10;0;2.4133439e-07;0;0.73283613;0.88896841;0;
0;0;2.1389283e-07;0;0;0;0;0;0;0;
0;0;0;0;0.85509932;0;0;0;0;0;
3.7779127e-08;0;0.83474201;2.6820211e-07;0.7897644;0;1.5057157e-07;0;2.9637599e-07;0.81832153;
0;0;0;0;0;0;0.77726871;0;1.1900728e-12;2.2684287e-07;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1.2252833e-07;0;0;1.7809976e-08;0;0;2.913863e-07;0;
0;0;0;0;0;0;0.0038891616;0;0;0;
0;0;0;0;0;0;2.1016341e-11;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;8.9044015e-12;0;0;0;0;0;
0;0;0;0;0;0;0.42639112;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.69935232;0;0;0.80823785;0;0;0;
0;0;0;0;0;0;0;0.96954513;0;0;
0;0;0;0;0;0;0.66819143;0;0;0;
0;0;0;0;0;0;5.3050467e-06;0;0;0;
0;0;0;0;0;0;0;0;0.032728188;0;
0;0;0;0;0.034304727;0;0;0;0;0;
0;0;0;0;0;0;0.22506917;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.66409272;0;0;0.86349922;0;0;0;
0;0;0;0;0;0;0;0.96345979;0;0;
0;0;0;0;0;0;0.052708931;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;5.4546024e-07;0;0;0;0;0;
0;0;0;0;0;0;0.65245843;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.87310225;0;0;0.87384003;0;0;0;
0;0;0;0;0;0;0;0.96453738;0;0;
0;0;0;0;0;0;0.17034683;0;0;0;
0;0;0;0;0;0;1.9304662e-06;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;5.3341424e-05;0;0;0;0;0;
0;0;0;0;0;0;0.67363644;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.87452054;0;0;0.83518106;0;0;0;
0;0;0;0;0;0;0;0.9644953;0;0;
0;1.8653994e-09;0;0;0;0;0.14290622;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;2.9198527e-10;0;
0;0;0;0;7.5796675e-06;0;0;0;0;0;
0;0;0;0;0;0;4.2217634e-05;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.27782419;3.4411167e-13;0;0.70317864;0;0;0;
0;0;0;1.333881e-15;0;0;0;0.97483242;0;0;
0;0.050895508;0;0;0;0;3.2172245e-10;2.4337291e-05;0;0;
0;0;9.9932391e-14;0.0001985922;0;2.3739104e-11;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.53969383;
0;0;0;0;0;0;0.84537578;0;0;0;
0;0;0;0;0;0;0.0089101875;0;0;0;
1.6774624e-07;0;0;0;0.00082792796;0;0;0;0;0;
0;0;0;0.74451232;0.33054775;0;0;0.9547863;0;0;
0;0.00018575648;0;0;0;0.81825817;0;0;0;0;
0;0;0;0;0;0;0.82500213;0;0;0;
0;0;0.82745928;0;0.51975083;0;0;0;0;0;
0;0;0.693802;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.78372717;0;0;0;
0;0;0;0;0;0;0;0;0.86012882;0;
1.2441801e-06;0;0;0;0.00025887555;0;0.85031253;0;0;0;
0;0;0.8725931;0.0006047471;0;0;0;0.00060553517;0;0;
0;0;0;0;0;0;0.074490115;0;0;0;
0;0;0;0;0;0;3.8940496e-05;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;5.8234227e-06;0;0;0;0;0;
0;0;0;0;0;0;0.7513445;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.87281489;0;0;0.86479008;0;0;0;
0;0;0;0;0;0;0;0.96160781;0;0;
0;0;0;0;0;0;0.057057645;0;0;0;
0;0;0;0;0;0;0.00012455751;0;0;0;
0;0;0;0;0;0;0;0;1.3847291e-07;0;
0;0;0;0;0.87785578;0;0;0;0;0;
0;0;0;0;0;0;0.69682038;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.85305136;0;0;0.77514595;0;0;0;
0;0;0;0;0;0;0;0.95948815;0;0;
0;0;0;0;0;0;0.80931348;0.88638961;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.86224288;0;0;0;0.83263242;0;
0;0;0.87062311;0;0.78458858;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.86577314;0;0;0;
0;0;0;0;0;0;0;0.71647012;0;0;
0;0;0;0;0;0;0;1.5164095e-07;0;0;
0.83248019;0;0;0;0;0;0;0.69195503;0;0;
0;4.424021e-07;0;0;1.2441656e-07;0;0;0.85128033;0;0;
0.079769157;0.78790057;0.42158312;0;0;0.76038659;0;0;0;0;
0;0;0;0;2.174301e-11;0;0;0;0;0.00085844973;
0;0;0;0;0;0;0;0;0;0;
0;0;0.00052118988;0;0;0;0;0;0.86311346;0.79797709;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.15461029;0;0.74955094;0;0;
0;0;0;0;0;0;0.6365186;0;0;0;
0;0;2.5335352e-11;0;0.75757456;0;0;0;0;0;
0;0;0.9589749;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.50855637;0;0;
0.32036403;0;0;0;0;0;3.4129357e-12;0;0;0;
0;0;0;0;0;0;0.0010752479;0;0;0;
0;0;0;0;0;0;0;0;0;0.75934017;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.70754468;0;0;0;0;0;
0;0;0;0;0.0055700406;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.84845495;0;0;0;0;0;0;
0;0;0.96481425;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.48080987;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.74091697;0;0;0;0;0;
0;0;0;0;0.31929398;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.86286044;0;0;0;0;0;0;
0;0;0.96215987;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.41472462;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.73677099;0;0;0;0;0;
0;0;0;0;0.092818134;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.87017614;0;0;0;0;0;0;
0;0;0.96478242;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1.6828336e-08;0;0;1.7088876e-08;0;
0.80278111;0;0;7.4956688e-08;0;0;0;0;0;8.9364924e-08;
0;0;0;0;0;0;0;0.85375071;0;0;
0;0.8557955;0;0;0;0;0;0;1.1011563e-08;4.4405919e-08;
0;0;0;0;0;0;0;0;0;4.0770335e-08;
0;0;0;0;4.1655163e-08;2.8278478e-08;0;0;0;2.4841185e-08;
0;0;0;0;0;0;0;0;0.85315979;0.84886777;
0;0;0;0;0;0;0;0;0;0;
0;0;3.7448309e-08;0;5.3667556e-08;0;0;0.94327867;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;3.2429796e-08;0.94685453;0;0;0;0;0;
0;0;0.81586337;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;8.2125807e-06;0;0;0;2.0341835e-08;0;0;
0;0;5.1552121e-07;0;0;0;3.6704314e-08;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.16896729;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;3.2533444e-05;0;0;0;0;0;
0.0048119794;0;0;0.047387943;0;0;0;0;0.0038752847;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.87198699;0;0;0;0;0;0;
0;0;0.9557997;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1.6183131e-06;0.2672618;0;
4.5363022e-06;0;0;0;0;0;0;0;0;0;
0.77253699;0;0;0.80724812;0;0;0;0;0.79063404;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.88991719;0;0;0;0;0;0;
0;0;0.87904298;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.68633235;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;4.6671821e-06;0;0;0;0;0;
0.81871337;0;0;0.7480135;0;0;0;0;0.83051741;0;
2.0645019e-09;0;0;0;0;0;0;0;0;0;
0;0;0;0.88435489;0;0;0;0;0;0;
0;0;0.89660358;0;0;0;0;0;0;0;
0;0;2.8899976e-11;0;0;0;0;0;0;0;
0;0.79153877;0;0;0;3.7138315e-07;0.00014167579;0;0.000173807;0;
0.85458285;0;0;0;0;0;0;0;0.00055708806;0;
0;0;0;0;0;0;0;0.84750831;0;0;
0;0.85065967;0;0;0;0;0;0;1.6775658e-07;0;
0;0;0.00010476242;0;0;0;0;0;0;0;
0;0;0;0.0035480573;1.3777878e-06;0;0;0;0;0.0015643076;
0;0;2.0645155e-06;0;0.77452922;3.5953901e-05;0;0;0.84521657;0.83508027;
0;0;0;0.7964586;0;0;0;0.83147705;0;0;
0;0.22947785;1.3556813e-07;0;1.8626311e-07;0.78152692;0;0;0;0;
0;9.8639305e-07;0;2.1255798e-06;0;0.00027297545;0;0;0;0;
0;3.014128e-06;0;8.5906606e-08;0;0;0;0.86116898;0;0;
0;0.0004024271;0;0;0;0;0;0;0;0;
0;0;0;0;0;8.3979899e-07;0;0;0;0;
0;0;0;0.8296417;0;0.84935457;0;7.1952222e-08;0;0;
0.00023083022;0;0.81222999;0;0.42341024;0;1.5396644e-07;0;0;0;
0;0.00042826234;0;0.0054332428;0;0;0;0.72120464;0.13857134;0;
      };
     };
     float_Data @[8] {
      name="CA1_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 10;10;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=10;
      matrix_col_width=10;
      ar {
       name="ar";
      [10 10 40] 0.9067117;0;1.5210463e-15;0.92053616;0;2.9443334e-12;0;0;2.9667399e-06;0;
0;0.93621689;0;0;0;0;0;0;0;0;
0.8350758;0.91443932;1.013041e-12;0;0.91562492;0;0.62989891;2.5773506e-10;2.1708031e-14;5.3529843e-14;
0;0.89351487;9.0310123e-16;2.2191933e-15;1.5622947e-13;1.6897294e-13;7.3515692e-15;0;0;0;
0;0;1.9770951e-05;0;0.91383427;0;0.86275387;0;0.91817445;1.0239412e-15;
6.5036738e-07;0;0;0;0.93449014;0.93056893;0;0;0;0.00017368632;
0;4.1764279e-12;1.4990975e-07;0.92294466;2.8245364e-14;0;0;0.93052536;0;0;
0;0.9238376;1.3215707e-16;6.2113286e-06;5.1385803e-07;0;0.9013052;0;0;0.93530518;
0;0;0;6.0202826e-14;7.2301621e-14;0;1.5690506e-14;0;0;1.1567771e-14;
5.3224944e-06;0;0.00086312013;0.90644217;0;0;0;0.92042255;0;1.5308227e-14;
0.91015816;0;9.2349546e-16;0.91376424;0;1.3971726e-13;0;0;0.00017716679;0;
2.1071403e-06;0.9342832;1.2272052e-12;0;0;1.0347081e-15;1.1787362e-15;0;0;0;
0.67305011;0.91496354;0;0;0.91943747;0;0.28065208;1.7625194e-05;7.7665718e-14;0;
0;0.85881579;3.4448971e-11;0;4.3904724e-12;2.4627395e-14;4.7324561e-14;0;0;0;
0;0;0.0001582102;0;0.89891297;0;0.86435992;0;0.91149461;0;
6.5582574e-12;0;0;0;0.91348732;0.90683085;0;0;0;4.2172751e-06;
0;0;0.00039179408;0.88616413;7.0456245e-11;0;0;0.9412533;0;0;
0;0.91356248;0;0.00035612215;1.0684932e-06;0;0.91415888;4.3820134e-10;0;0.93015164;
0;0;8.5304536e-17;1.7518153e-16;0;1.3920919e-13;0;0;0;6.498924e-14;
0.00018181273;9.8679296e-15;0.0002832397;0.84752375;0;0;4.6520486e-14;0.90598679;0;7.2494094e-14;
0.8513701;0;4.6283067e-13;0.87218541;0;0;0;0;8.9791445e-13;0;
0;0.93892014;3.2968659e-09;0;0;0;6.0857184e-07;0;0;0;
0.64352381;0.90888703;0;2.2232856e-09;0.92877328;0;0.067626096;0.00028223824;0;0;
0;0.88452083;6.5120257e-17;0;0;1.1028335e-13;0;0;0;0;
0;0;0.00026327907;0;0.93483806;0;0.81944096;0;0.90439874;0;
0.00089536677;0;0;4.8893736e-12;0.92360723;0.90818077;0;0;5.1385881e-14;0.033933803;
0;8.8958688e-11;4.5959192e-16;0.92751539;2.1208664e-12;0;1.8936236e-13;0.90231526;0;0;
0;0.87854618;5.7427882e-11;9.8760574e-07;9.8927285e-06;0;0.85170305;0.00043653656;0;0.94236434;
9.902376e-05;0;0;4.533852e-06;0;0;0;6.4199195e-17;0;8.497778e-17;
7.791898e-07;6.2956965e-06;3.5012155e-05;0.88605905;0;0;2.2025242e-13;0.91148782;0;1.6816274e-12;
0.82141185;0;2.54318e-17;0.91103905;0.03027417;0;2.3452811e-11;1.7423024e-14;3.6111283e-09;0;
3.1962379e-08;0.92373973;4.4907952e-06;0;0;0;0;0;2.8623486e-11;5.2221699e-12;
0.0010125197;0.78032756;0;0;0.915595;0;0.7618289;0.0067225043;8.1978592e-13;2.3148957e-11;
0;0.77989513;0;3.2640597e-05;1.1750697e-15;1.7161541e-13;0;0;0;0;
1.1799183e-11;0;0.68676579;0;0.82705617;0.0012796074;0.42902976;7.2898416e-08;0.078146406;0;
0.00074295467;4.6034221e-13;0;2.2111276e-13;0.82102406;0.78792334;4.0946207e-13;0;0;3.6963101e-08;
0;8.4137265e-16;0.031173244;0.88281453;6.8452046e-06;2.2716903e-13;2.8669777e-07;0.91741318;0;9.0269026e-14;
0;0.90735555;0;0.45773613;0.0032228276;0;0.90060848;0.0028670633;0;0.91626376;
0.0030800221;0;0;0.0021529319;0;0;0;0.00012899964;0;1.9096656e-15;
4.4222386e-08;0.00078406697;0.76727444;0.87793893;1.8942541e-13;0;0;0.8526175;0;1.1920683e-05;
0.017705726;0;1.9549085e-11;0.77979422;0.015618032;0;0;3.3638723e-09;0.00010964225;1.0248405e-06;
9.610651e-07;0.94143027;2.6608321e-12;0;0;0.00020734081;2.6695795e-07;1.8277936e-11;3.0700821e-06;0;
0.25903913;0.8690936;0;4.0280647e-06;0.90033448;0;0.00043800974;0.010623751;2.4398319e-09;6.2532366e-05;
0;0.0091246832;0;0.00033219872;0;0;0;0;0;1.2459835e-15;
4.7963608e-13;0;0.0091391867;1.0332574e-15;0.90986013;5.7601851e-06;0.028166497;0.00034150589;0.013907398;1.1247733e-10;
0.00011696108;0;0;2.5860116e-13;0.93889546;0.52188003;0;5.3193933e-10;3.1614134e-09;0.00048242055;
0;1.6171732e-11;0.66683447;0.88953638;0;0;3.4517128e-14;0.88570642;2.4224627e-09;0;
0;0.91409171;0;0.86319935;0.75321794;3.2780285e-11;0.92840827;0;1.3464707e-12;0.89561564;
0.036419909;0;0;5.6286805e-15;0;2.2300345e-14;0;0.018940868;2.0599901e-13;0;
0.0088681411;0.0038604417;0.89975852;0.031495653;0;0;1.7579318e-12;0.83434796;0;8.2976672e-12;
0.88022345;0;3.7930551e-11;0.92156345;0;1.8421461e-13;0;0;3.3893888e-11;0;
9.6172532e-12;0.92308694;0;0;0;0;5.244315e-12;0;0;0;
0.83249062;0.91808486;3.1636707e-11;0;0.9096536;0;0.086466581;3.2666203e-10;1.923563e-14;1.161186e-09;
0;0.90068406;0;0;7.2906715e-12;7.3398854e-07;6.2147175e-12;8.6969657e-14;0;0;
0;0;1.7802869e-12;0;0.91366142;1.5864371e-14;0.8797856;0;0.9226315;1.5498642e-11;
9.4797639e-07;0;0;0;0.92612451;0.9206894;0;0;0;8.4090607e-05;
1.298365e-10;7.6573565e-12;0;0.92907953;0;0;0;0.9182781;0;0;
0;0.91633815;0;1.2486619e-06;1.5477754e-12;0;0.87934124;5.6510478e-17;0;0.92476392;
6.3011087e-13;0;4.4108441e-16;5.5467413e-16;2.9699995e-13;1.197879e-12;2.3941168e-10;1.8520965e-14;0;8.3370645e-12;
1.290564e-15;0;4.0576488e-06;0.91085207;0;0;0;0.907287;0;3.4092314e-13;
0.89692318;0;5.639442e-06;0.91759241;0;3.3630715e-15;0;0;0.0078152874;0;
0.0014282825;0.92591733;1.0114182e-11;0;0;9.3709505e-06;0.0013237395;0;0;0;
0.045894034;0.92199463;7.660896e-14;0;0.92483819;0;0.097968943;1.406569e-05;8.2547325e-14;1.9482152e-07;
0;0.88013232;0;0;1.3453442e-07;0;1.1904085e-06;5.3570366e-16;0;0;
0;0;0.00010879982;0;0.89744997;5.1416831e-15;0.88108635;0;0.92911458;4.1787178e-14;
0.00010266548;0;0;0;0.89175779;0.8965584;0;5.3636417e-15;0;5.1369634e-06;
2.7052258e-05;0;8.9705261e-13;0.8741309;2.241659e-14;0;0;0.9226222;0;0;
0;0.90716827;0;0.0022882703;2.7525909e-11;0;0.92839551;1.8933388e-12;0;0.92557925;
6.9284584e-07;0;1.1878978e-11;0;0;2.4334235e-05;6.1426722e-06;0;0;5.6512713e-06;
1.3279264e-11;0;0.0057132943;0.89278179;0;0;0;0.88750738;0;1.4609146e-12;
1.3672963e-12;0;7.035154e-05;0.32827288;0;0;0;0;0.092751734;0;
0.0041987794;0.94322735;0.091433227;0;1.8709256e-19;0;0.90548593;5.8203864e-10;0;0;
2.751784e-06;0.94605708;8.129787e-14;0.88475627;0.9440431;0;2.8307469e-11;0.89018691;0;0.081680678;
0;0.6397711;0;0;1.1697712e-15;0;5.0248874e-15;0;4.0022349e-15;0;
0;0;3.8239909e-06;0;0.94851929;0;0.0012808956;0;0.71981251;1.0292503e-13;
0.77033782;0;0;6.3450899e-15;0.011708375;0.016359732;0;0;3.9553554e-15;0.85686159;
0.67656827;1.9654424e-05;0;0.92636859;0;0;0;1.3965187e-06;0;0;
0;0.00098154391;3.3074134e-11;0.64806771;8.0087006e-11;0;0.9215275;6.5428417e-06;0;0.9443872;
0.90297258;0;0;1.200719e-10;3.6786397e-16;0;4.5082384e-13;1.657274e-15;0;6.4375133e-13;
0;4.7649097e-13;0.021429053;0.77873027;0;0;0;8.4334516e-07;0;6.5341044e-12;
5.0071944e-06;0;0.022421742;0.76774567;5.8467884e-07;0;4.1673848e-13;0;0.0034553967;0;
0.74675709;0.94251007;0.7888906;0;0;1.1704802e-10;0.67488557;5.1616349e-05;2.0327595e-14;8.0717568e-17;
0;0.93818402;0;0.77527976;0.94509602;0;0.0041445969;0.88283247;6.8238595e-13;0.7932139;
0;0.010423061;0;5.1108953e-05;2.3902524e-13;1.1589014e-12;9.151975e-16;2.0161202e-13;9.2738178e-11;0;
3.223308e-14;5.4508709e-13;0.00011015151;8.2090802e-16;0.92049795;7.4630247e-05;1.106621e-15;0.0020403778;0.00012537485;0;
0.14790605;4.2114588e-15;3.5603505e-15;0;2.3958885e-11;0.00024455271;5.173372e-13;0;0;3.3367284e-09;
0.7096855;2.316539e-15;3.6605934e-07;0.83081692;6.660706e-11;0;0;0.0050566173;0;1.980103e-09;
0;0.012564201;0;0.89936703;8.5360142e-07;0;0.94411004;5.8171787e-11;0;0.92791516;
0.91067654;0;3.616542e-12;1.9213312e-05;0;6.1284785e-14;0;0.013157477;0;2.4771036e-11;
0;0.013769684;0.095007181;0.050056335;1.7403946e-15;0;0;9.0042279e-11;9.530789e-14;0.00040956482;
0;0;0.0064351959;0.8819555;0;0;0;6.7536866e-06;0.90772933;0.061015107;
0.87126315;0.92890334;0.0015751336;0;0;9.9159406e-06;0.88547421;4.5462339e-06;0;0;
0.00015278537;0.88751274;0;0.81826079;0.90115923;0;0;0.69832236;6.6504591e-10;0.83869427;
0;3.6601545e-05;0;4.7216586e-06;0;0;0;7.5198354e-12;6.2024956e-05;1.3189946e-12;
0;0;7.5815828e-06;6.3330782e-12;0.92305207;4.4025046e-15;0;3.9717481e-05;6.5940128e-08;3.9172972e-09;
0.061679587;0;0;0;0.0082615586;0.00035471423;0;3.3075662e-06;6.086845e-05;0.89553368;
0.74653107;0;3.8561496e-10;0.90466547;0;0;0;0.00010249454;4.3953319e-15;0;
0;1.0036928e-07;0;0.91354197;0.00058854069;9.1548165e-11;0.93201017;0;0;0.91246581;
0.89927679;0;0;0;0;0.00015243186;0;0.0023135464;6.5680722e-15;0;
1.747687e-13;0;0.88989115;9.808255e-05;0;0;0;1.6338733e-09;0;1.0437318e-11;
0;0;0.90888929;0;0;0;0;0;0.00035819167;2.1837155e-14;
0;0.93990123;0.92170697;0;0;6.8060293e-13;0.93661439;0.91063344;0;0;
0;0.94935387;0;0.93693745;0.93743634;0;0;0.93201256;4.6429359e-14;0;
0;9.3773539e-12;0;0;0;0;6.909323e-14;0;3.2906247e-12;0;
0;0;2.5164528e-12;6.4226045e-15;0.93017966;8.5442368e-14;3.1948706e-12;0;0.92179161;0;
0;0;0;2.9306459e-05;3.4899588e-12;0;6.1717416e-14;0;0;0.00033656458;
0.00025301572;2.8393512e-13;0;5.5217864e-05;0;0;0;4.3192386e-16;0;5.3993817e-14;
2.3506127e-14;0;1.9664668e-13;0.85388488;6.0995297e-14;0;0.93182206;1.2718512e-15;0;0.9431749;
0.94422179;0;0;0;0;0;0;1.8925439e-15;0;3.255057e-12;
0;0.9147104;5.8779709e-12;0;0;0;0;0;0;4.3900509e-13;
0;0;0.89435446;8.7250746e-15;0;0;0;0;0.00039263908;7.0101226e-14;
0;0.93883365;0.9158079;0;0;1.2561484e-12;0.93913257;0.91036868;9.4615613e-15;1.1249065e-11;
0;0.94291675;0;0.93250138;0.93962806;0;0;0.9341383;5.2440017e-15;0;
0;9.4660578e-07;0;0;0;0;2.5053608e-13;0;1.3766639e-12;0;
2.7443074e-12;0;3.1682872e-11;1.002624e-12;0.93137765;9.6354381e-07;1.4507931e-11;0;0.89262003;0;
0;0;0;5.3495864e-06;1.0673693e-06;0;2.4674495e-13;0;9.0270758e-15;0.00097064412;
0.00076859974;2.6141736e-14;0;0.00035135064;0;0;0;0;1.4253079e-13;5.8258706e-15;
0;0;5.4874775e-16;0.87929541;1.1840695e-09;3.1590382e-13;0.91812009;0;0;0.93176478;
0.94678777;0;0;3.9441234e-15;0;0;0;6.0980833e-15;0;1.8206439e-16;
0;0.92366195;5.2597732e-10;2.9334213e-12;0;0;0;0;0;6.9350569e-13;
2.0122754e-13;0;0.8908428;0.001666383;0;0;0;0;0.0046798494;0;
1.9373829e-06;0.9409129;0.87009698;0;0;5.9298406e-11;0.90921152;0.88282621;0;3.8115456e-16;
0;0.93836695;6.1608086e-13;0.89169276;0.91566062;0;0;0.88927442;2.2999696e-13;0.00073259824;
0;0.027464671;0;0;0;4.2065541e-16;3.5168954e-13;0;2.9963727e-12;0;
2.7100463e-13;0;6.7513237e-13;7.7006441e-13;0.92540318;0;1.98948e-05;0;0.91522264;0;
7.4102852e-10;0;0;9.0734466e-06;6.4449113e-11;4.7706513e-15;0;0;0;0;
0.10121844;0;7.4020422e-15;6.4400056e-06;3.3964489e-12;0;0;1.7538117e-07;0;6.1255661e-15;
4.6482712e-16;0;0;0.86414349;1.4728896e-09;0;0.93769312;1.3950943e-15;0;0.93354338;
0.94030088;5.9852619e-15;0;0;0;1.1756795e-11;0;5.3344041e-07;0;0.026458094;
0;0.81740767;8.2328864e-09;3.5385401e-06;0;0;0;0;6.7784537e-12;2.9546257e-14;
0;0;0.50558203;0.0015884039;4.1553511e-10;4.7886637e-16;0;0;0.00063824595;0;
4.7662335e-05;0.93412483;0.85597539;0;0;1.0406555e-12;0.9164142;0.15511213;5.0112861e-14;0;
0;0.945885;0;0.92105353;0.94208074;0;5.863745e-10;0.90331441;1.0278662e-11;0.0059322119;
2.2483026e-11;0.00045170798;0;1.8973068e-07;0;0;1.427805e-12;4.8523763e-09;5.9120914e-16;0;
5.59782e-12;0;1.6888869e-07;8.9876544e-13;0.91021597;3.3974957e-06;1.6155525e-05;1.0874264e-10;0.72711802;2.2866409e-13;
0.00083934475;0;6.0479382e-09;0;2.4153347e-05;1.943688e-10;0;0;0;3.8620428e-06;
0.27687344;1.107478e-12;3.9772033e-11;0.34509084;5.3181218e-14;1.5771872e-15;0;2.3071991e-06;0;2.139001e-06;
0;8.9372188e-06;0;0.83917326;4.1900438e-07;0;0.94099969;0;0;0.92275286;
0.92964745;5.3724166e-16;0;3.2650417e-11;0;1.8237449e-12;0;0.0030085214;6.0805416e-10;3.5291625e-09;
0;0.72319078;0.060341332;0.013102617;0;0;0;2.954752e-10;4.4319322e-09;1.7618975e-08;
0;0;0.032677334;0.0022150169;0.019417977;1.0771048e-12;0;0;0.025339762;1.2716084e-14;
0;0.9512741;0.0010021139;0;2.5344234e-15;8.9863724e-15;0.53809208;0.00087354;0;0;
0.013690031;0.93001819;8.2016373e-11;0.00036727462;0.94815183;0;0.0018929576;0.93330652;0;0.0064551011;
5.5307321e-15;0.0005000105;0;7.2646035e-15;0;0;0;1.8420168e-10;6.6724837e-12;0;
6.4607579e-05;0;0.82090962;1.341334e-10;0.86075354;5.5197891e-11;0.017476963;0;0.75458664;2.2063912e-10;
6.3180146e-06;0;2.4383565e-14;0;0.039380651;0.00060014828;0;0;0;0.0013340461;
2.90104e-10;3.2776835e-12;0.0038967505;0.8317011;0;1.2112151e-13;0;0.84315759;0;1.1295287e-09;
0;0.89207929;0;0.91587681;0.56712914;1.8544951e-14;0.94247955;1.9254241e-13;0;0.86932391;
0.84822005;1.5441871e-14;0;1.116496e-12;6.3385588e-16;5.7067164e-06;1.768165e-13;0.0043420861;0;0.38279355;
0;0.84932023;0.81161982;0.65498507;2.4446101e-11;0;2.8959209e-14;0.7904678;1.8806964e-14;1.7218273e-09;
5.8502439e-11;1.072397e-13;0.89235955;0;0;0;0;0;0.00024496249;1.2169143e-14;
0;0.9399268;0.906753;0;0;0;0.9236961;0.86620808;7.186156e-13;1.2284822e-11;
0;0.93965393;0;0.9387027;0.92590189;0;1.2468585e-15;0.92520779;1.8579024e-13;0;
0;2.1872138e-11;0;0;0;8.0185788e-07;0;0;0;0;
3.1933531e-12;0;4.2786521e-12;0;0.91665095;0;6.2102276e-12;0;0.91907179;0;
0;0;0;0.0046377569;0.00010541562;5.0340159e-15;1.1433281e-13;0;0;0.00030877109;
0;2.8297614e-13;5.4165256e-11;0.00078138412;7.2113444e-12;0;0;8.7332824e-10;7.4400541e-11;3.840108e-13;
1.5696968e-15;6.5611996e-13;7.2522327e-13;0.86446315;3.7474575e-13;0;0.93017673;0;0;0.93826872;
0.92903596;0;0;0;0;0;0;0;0;1.1156008e-15;
2.3452426e-14;0.93122846;3.1190648e-13;0;1.9460363e-14;0;0;8.1617178e-12;0;6.0272533e-14;
2.279126e-06;2.5748533e-14;0.81511587;4.3050145e-13;0;0;0;1.8164582e-13;0.0096127372;2.6982753e-14;
0;0.92868525;0.87646812;0;0;4.4555895e-06;0.89916301;0.80598426;0.00017202338;5.7085686e-05;
0;0.91679794;0;0.91794169;0.92639798;0;1.127374e-11;0.91264528;1.5843028e-14;0;
0;0.00041215404;0;0;0;0;0;0;0;0;
1.7313393e-07;0;1.5041033e-05;1.6529028e-15;0.91053104;0;2.0090469e-11;1.3386959e-06;0.8358075;0;
0;0;0;0.0040754606;0.058358632;0;2.2988897e-13;0;7.8181182e-14;0.05508789;
0;1.4271018e-14;9.2634757e-05;0.004755103;1.2094148e-06;0;0;7.6247103e-05;0.000159972;3.8558971e-07;
0;6.3445325e-12;3.1455814e-15;0.87087637;9.1409485e-05;1.8010966e-14;0.88268089;0;0;0.90524709;
0.9124251;0;0;2.5419077e-13;0;0;0;0;0;0;
8.6262852e-14;0.9300741;5.8448339e-05;0;0;0;0;0.00012067195;0;8.1378934e-14;
0.00094971695;0;0.79640639;0.016860347;5.7148475e-07;0;0;0;0.015308911;1.7737829e-12;
5.1667438e-12;0.94998688;0.83285177;0;0;2.7450894e-06;0.86821508;0.05534438;4.0436502e-13;2.0478464e-11;
1.1025319e-06;0.93962729;2.5391517e-15;0.77909613;0.94113326;0;1.8970936e-14;0.90986007;6.8845461e-13;3.2829953e-06;
0;0.083664283;2.222859e-12;0;0;4.8677117e-12;0;0;0;0;
1.0710932e-10;0;5.670639e-06;3.7535464e-13;0.94021225;0;2.3002556e-06;0;0.92932767;0;
9.1684993e-12;0;0;0.00038486024;0.00041946722;2.2181963e-12;0;0;0;6.6914918e-10;
0.01009637;0;1.8023925e-08;0.019091612;1.1050774e-09;0;8.4004509e-15;0.62958634;0;1.116766e-12;
0;0.0001272458;0;0.89656872;0.0028098885;0;0.93997282;0;0;0.93186796;
0.93924779;2.4975313e-06;0;4.3538673e-11;0;0;0;5.1378338e-06;0;0.014039939;
2.423342e-13;0.91732502;0.0045380038;5.3114186e-06;2.4429935e-14;0;2.4176627e-09;6.6868392e-06;0;1.5280751e-15;
4.2906668e-06;0;0;0.0040798117;0.85973668;1.3185019e-13;0;0;0.00038493899;0;
0;0.93005353;1.6988827e-10;0;0;1.7350814e-05;7.0993024e-06;0;8.0201686e-11;0;
5.6945632e-14;0.73832464;0;0.00056282774;0.92633533;0;0.00051467423;0.81965339;2.089502e-11;0;
3.5736778e-12;0.094835155;0;3.5921803e-06;0;0;0;9.2249071e-13;0;0;
0.00036527921;0;0.89197034;0;0.013410494;3.6708532e-06;0.017713044;0;3.0443293e-12;0;
3.7857485e-11;0;0;0;0.90894532;5.491808e-05;0;0;2.449053e-15;7.313693e-10;
0;1.8268369e-11;0.8442508;0.87034708;6.845391e-06;6.364762e-12;6.4583958e-14;0.90491438;0;0.00012399165;
0;0.8734042;0;0.89730871;0.83809847;0;0.9278143;0;0;0.022257006;
0.00019785007;9.7455651e-16;0;2.217953e-10;0;0;0;0.91105145;0;3.6717119e-13;
0;0.86953467;0.92073995;0.0021897333;0;0;0;0.83979446;0;1.8948302e-05;
0.00013017726;0;3.0895078e-11;7.1019757e-10;0.81275082;2.5386527e-07;0;3.2274297e-13;0.0057200314;4.3167145e-15;
0;0.93273932;5.8731998e-15;0;0;0;1.4917438e-06;1.0623212e-16;2.3306029e-13;0;
0.062973954;0.74704146;3.1952726e-12;1.4240205e-13;0.91197455;0;0.63621545;0.89071941;0;2.0128634e-12;
0;3.0352392e-05;0;6.6820681e-13;0;0;0;1.0260065e-12;0;0;
0.00017571231;0;0.91438538;2.8563599e-12;0.004459444;1.4872745e-11;0.0089280745;0;0.00045399941;5.2717786e-13;
3.1211878e-12;0;0;0;0.88520283;0.0035406975;0;0;0;3.7850554e-09;
0;6.3793129e-07;0.86965221;0.86573583;0;9.9532674e-11;0;0.91042763;0;0;
0;0.94071537;0;0.91560453;0.78401071;5.5355604e-16;0.92903656;4.4259481e-14;0;0.017903859;
3.4034046e-11;1.68929e-14;0;7.569486e-11;0;2.3650052e-11;0;0.68342596;0;0.024636179;
0.00033640055;0.76170647;0.86084145;0.00015084555;2.6984454e-10;0;7.3247259e-12;0.92044616;0;7.5011886e-10;
1.1650448e-12;2.4337238e-12;5.4443017e-13;0;0.91364425;1.3978787e-14;0;0;0;0;
1.7454105e-13;0.93259215;4.8333755e-12;0;0;4.028092e-05;1.2041241e-14;0;0;0;
0.00022428163;0.00076549972;0;0;0.89840144;0;0.00017234382;0.88330001;9.7800382e-14;0;
3.2413853e-17;0;0;1.4983638e-14;0;0;0;0;0;0;
0.00028281973;0;0.90615672;0;9.6330936e-05;1.5674492e-07;3.9967782e-07;1.5032876e-14;0;0;
1.3251037e-12;0;0;0;0.93393183;3.0232868e-11;0;0;0;0;
0;0;0.90745234;0.92777807;0;2.1208886e-13;0;0.9427222;0;4.8415493e-15;
1.7510231e-13;0.93293864;0;0.92156035;0.914222;0;0.9215796;0;0;4.5970069e-06;
8.4611561e-16;3.2619293e-14;0;1.9939832e-14;0;3.4996441e-15;1.1986555e-15;0.90725458;6.7211387e-14;1.520567e-05;
0;0.89016646;0.91087258;4.4389166e-11;0;0;0;0.90005821;0;8.4944672e-14;
1.2480308e-12;3.2751024e-14;3.4903673e-12;1.1478245e-14;0.91999555;0;0;0;0;0;
0;0.93838823;6.631995e-11;0;0;5.5665401e-05;1.6250621e-12;0;0;0;
1.2809761e-05;0.0086883809;0;3.1177361e-12;0.91320586;0;0.00037108813;0.90347338;0;2.6526676e-14;
4.1980029e-15;4.0661552e-16;0;1.2625585e-12;0;0;0;0;0;0;
0.00020425388;0;0.90235871;0;0.4377169;0.0001669499;5.8243668e-06;1.4431117e-15;0;0;
1.2582765e-12;0;0;0;0.928505;5.3737158e-12;0;0;5.8255477e-11;1.209604e-13;
3.1368147e-14;0;0.87170219;0.94028503;0;0;1.9283308e-13;0.93309397;2.8744076e-16;3.6314274e-14;
2.2908146e-13;0.92511809;0;0.90256572;0.87034923;0;0.91179836;1.6383182e-16;0;0.00012658826;
5.4508308e-11;1.0265326e-13;0;2.1832018e-12;7.5805077e-11;0;0;0.89784944;0;2.6886821e-13;
0;0.9030953;0.87420678;5.6112782e-14;2.1276083e-15;0;0;0.89317942;0;2.0747926e-13;
0.012190089;0;1.3012084e-15;1.5468137e-05;0.50936586;7.5160321e-12;0;0;5.2667035e-09;0;
0;0.93394613;3.5922127e-07;0;0;4.408378e-13;2.3476262e-13;0;0;1.1920777e-14;
0.00014135083;0.016034706;0;1.3966004e-13;0.90352261;0;3.1862048e-05;0.84918422;3.962621e-12;9.1223266e-14;
0;5.9617161e-10;0;0;2.2265152e-14;0.00033055843;0;0;0;0;
5.2578496e-05;0;0.88192606;8.0397558e-07;0.0021113863;0.00016485511;0.00030606179;0;0.0023729431;0;
0;0;0;0;0.92102975;0.00015895224;0;0;8.8704387e-16;0;
0;0;0.90362459;0.87949938;5.1150901e-06;7.156461e-10;0;0.92236477;0;1.2908723e-05;
2.1874837e-12;0.88299197;0;0.90886748;0.88330799;0;0.88344818;0.00057559425;0;0.79833227;
5.1905901e-12;0;0;2.4146098e-06;9.8051043e-15;0;5.7639352e-14;0.68757218;3.2414793e-11;0.00081353378;
0;0.8730883;0.86244029;0.026113054;0;0;3.0138168e-12;0.88178825;0;0;
0.62520671;0;0;0.00027288191;0.8942104;6.3403299e-06;0;1.1168269e-10;0.0041897474;0.0047190683;
1.4256079e-06;0.9193415;0.00042761475;0;0;8.8568755e-05;4.2515371e-06;3.1181416e-12;5.4792068e-14;0;
0.32401738;0.65200526;0;0;0.91214484;6.4258127e-11;2.4786684e-10;0.6982339;0;1.8550691e-07;
1.9492608e-15;0.003300572;1.9798325e-12;1.6095507e-12;0;1.4014692e-10;0;0;0;0;
4.1966045e-11;0;0.60126311;0;0.79654586;0.0027631666;7.8090983e-05;0;0.011504713;0;
0;2.1717743e-12;0;0;0.94658536;0.026760673;0;0;0;1.7351369e-09;
0;1.0627259e-12;0.12521878;0.9265883;1.4005835e-08;3.0262842e-10;4.1440558e-07;0.91929346;0;0;
3.557698e-12;0.92884594;1.1851561e-11;0.91459525;0.89264494;0;0.8949061;0;0;0.63875663;
0;7.6051979e-13;0;2.2332845e-10;0;2.8053475e-05;1.2509308e-06;0.30689749;1.450919e-10;1.2352338e-05;
0.0092613157;0.79916096;0.84422004;2.4156377e-09;0;5.2347439e-11;1.2647383e-06;0.84642601;0;0;
0.00039624545;1.63067e-07;0;6.2100651e-07;0.88839167;0.0019812894;0.00030443459;3.46258e-09;0.013797755;0.0020018674;
5.5186246e-12;0.87811774;0.035627939;0.00037563971;0;4.461111e-09;0.0081698755;9.0867217e-13;1.7195032e-10;0;
0.00019841902;0.86435008;0;0.0022525059;0.92537093;0;0.52831107;0.89878452;1.0319616e-12;1.4555251e-05;
3.2965301e-11;0.012411101;1.647714e-06;1.697826e-05;1.0813531e-12;0;9.2512239e-13;0;0;0;
7.3704032e-06;0;0.81122303;3.1603871e-05;0.15169697;4.906035e-06;0.78781444;0.0026638042;7.119823e-07;0.00016357613;
0;0.00042472724;3.755839e-15;0;0.89794081;0.0017488354;0;1.9999578e-13;9.4417192e-07;1.2566177e-08;
0;3.3997475e-11;0.60033196;0.84376812;0;5.289655e-12;0.00010137291;0.74531597;2.8327822e-12;1.4931612e-11;
0;0.91512609;0;0.9001711;0.88174802;1.5510119e-14;0.93391734;0;0;0.0073365145;
0;0.00028064253;0;2.683232e-06;3.4280729e-06;1.6908881e-12;0;0.75112998;1.8334438e-11;1.6396267e-05;
0;0.89610839;0.83699876;2.0099186e-08;8.9053661e-05;0;5.6827568e-13;0.12487541;0;5.1570971e-13;
0;1.1561201e-15;1.1550902e-09;2.3954553e-13;0.90219498;0;0;0;1.1031789e-15;0;
1.7149591e-10;0.92615479;1.6048402e-11;0;0;0.000156269;6.0929747e-06;0;0;0;
4.4067579e-06;0.0011034675;0;0;0.89332205;0;1.7320385e-06;0.88228697;5.973212e-14;1.2837661e-10;
7.9246221e-14;0;0;0;0;0;1.4710169e-15;0;2.5292832e-15;0;
6.4693268e-05;0;0.8972922;3.9208871e-13;5.5834162e-06;1.9050584e-11;5.8045575e-06;0;8.4120059e-13;4.9657374e-14;
3.6748632e-10;0;0;0;0.93210524;6.2425271e-13;0;0;0;1.7605896e-17;
9.4765436e-14;0;0.87151998;0.93656623;0;0;0;0.93706846;0;2.6743553e-14;
1.1990656e-12;0.93075603;0;0.92540079;0.91691649;0;0.9230563;6.9933115e-16;0;2.1835789e-10;
1.4998415e-10;5.6657072e-14;0;0;0;2.1040509e-07;1.6941396e-10;0.9199841;5.064872e-15;0.0013197836;
0;0.85828489;0.90963036;3.319041e-09;0;0;0;0.87850934;0;1.0416405e-12;
3.9688679e-13;0;1.5815823e-09;8.6303706e-14;0.90902007;0;0;0;7.4801224e-12;0;
1.3855942e-12;0.9266544;1.3651134e-10;0;0;2.3370931e-05;5.9246321e-07;4.0952266e-11;0;0;
7.487202e-10;0.0013349763;1.385894e-14;5.7495686e-13;0.92012239;0;1.3602718e-13;0.89617598;0;1.083414e-09;
4.2687527e-11;8.93147e-10;0;4.2942893e-14;0;0;0;0;1.6661679e-13;0;
6.7205028e-06;0;0.88598347;7.8864453e-16;0.63422716;3.9736787e-09;5.8234227e-06;0;4.6730131e-07;4.3997323e-13;
2.6540647e-10;0;0;0;0.92509967;1.4957174e-14;0;0;4.3299931e-07;2.829481e-12;
4.2968056e-09;0;0.76826131;0.95171833;0;0;0;0.93243009;0;1.2080414e-13;
1.2010117e-12;0.91909909;0;0.9200651;0.89457333;0;0.90526879;8.9315093e-15;0;5.4605905e-05;
0.00022736088;1.0669486e-13;0;8.5795886e-14;1.4626837e-10;4.0218571e-12;3.4440367e-11;0.91033632;0;0.000301961;
0;0.89206129;0.89013135;2.0562083e-11;3.3751631e-13;0;0;0.86313707;0;1.536347e-12;
0.00030793092;0;0.041748274;0.00036757888;6.1919422e-07;6.189688e-13;0;0;0.028571228;0;
4.4369867e-06;0.95259982;0.82490188;0;0;5.5849887e-11;0.72464651;0.014588373;0;0;
3.6338216e-10;0.92116737;0;0.020508733;0.95007157;0;0;0.93879801;2.4549193e-12;0.048689973;
0;0.00301671;0;0;8.5936299e-06;5.2495943e-06;6.6403362e-07;0;0;0;
8.9606885e-07;0;0.024905482;1.7270643e-09;0.88775635;8.3932937e-05;4.4006512e-05;0;0.84864527;1.178617e-14;
6.9856629e-12;0;0;0;0.11062001;1.6085952e-14;0;0;5.081742e-07;2.8886996e-06;
0.0020621114;0;0.00075750769;0.80236548;1.7469105e-12;3.689149e-11;0;0.74241328;0;0.0016974106;
0.00015588982;0.0014047199;0;0.92796409;0.38850847;0;0.92720962;3.8087554e-05;0;0.91129869;
0.90564495;0;0;1.7914996e-05;7.3851285e-14;0;1.5176792e-05;0.00015414848;1.4475884e-11;0.074377365;
0;0.91473144;0.054248698;0.068369046;0;0;3.7236778e-14;3.0502906e-05;1.7882512e-13;5.9086647e-16;
0.0031941552;4.6949053e-06;0.00238384;0.025968533;0.00050660945;0.0029993367;0;4.4297663e-13;0.77331614;0.77324158;
0.011783022;0.81384146;0.85087448;0;0;0.024313319;0.84515816;6.8900656e-05;0;0;
0.0078889914;0.83489424;1.4446051e-13;0.00082937413;0.94539374;9.590252e-05;0;0.85178554;1.051902e-08;0.75812441;
2.0907199e-13;1.0535552e-05;0;0;1.8184273e-14;0.00062233926;1.5942996e-15;2.7533215e-06;0.0004317344;0;
1.0859293e-14;0.0010881607;0.0010163867;0.00010520791;0.93158323;7.7511031e-05;9.2732524e-05;0.00035763899;0.21180473;0;
0.058771774;5.541981e-07;0.00078889471;0;0.88949978;0.0015704426;0;0;0;0.015778225;
0.0062025241;1.9914544e-06;0.0034635093;0.74250352;1.5033162e-07;7.7629168e-13;0;0.52016842;0;0;
0.00019429442;0.38283795;4.8888046e-12;0.91600579;0.04364695;0;0.92029059;0.0006153016;0;0.8055684;
0.055187467;5.213181e-07;0.0044999318;0;0;0.065730214;2.7564345e-06;0.12108363;2.3260844e-05;8.4337316e-06;
1.7850563e-05;0.0044959057;0.81518805;3.3063982e-10;0;1.5770571e-05;0.019632298;0.0020679322;0;6.7238543e-15;
7.0323185e-13;5.9525791e-15;0.0059988904;3.954161e-06;0.059189413;1.0212147e-12;1.8245421e-06;3.8841624e-10;0.0011398895;4.0414395e-08;
0.0018031759;0.90079176;0.88098627;2.9634225e-12;0;5.2701909e-11;0.91762191;0.77299315;7.4724442e-15;0;
3.4679812e-05;0.93980229;2.9131791e-13;0.86779618;0.9367671;0;0.0013174971;0.8990798;6.4479379e-13;0.51799208;
4.9078295e-14;4.1724117e-05;0;1.429572e-09;6.8283365e-11;0;2.1016298e-10;1.0356413e-12;2.2178406e-09;0;
9.8184169e-12;0;3.0901039e-05;1.6968806e-05;0.89954615;0.00064931653;0.0003433064;2.5838533e-13;0.19833815;2.3560311e-05;
6.9274968e-09;0.0018081191;8.6804272e-11;0;0.00011736898;0.00036937313;0;2.7039441e-12;0;0.00017091037;
0.032598596;4.9430204e-12;0;0.051637746;0;0;0;6.9176467e-06;0;3.9550497e-07;
0;0.77766407;0;0.91375864;0.0055775447;5.0702541e-13;0.93100655;0;0;0.8990168;
0.81639838;2.2850149e-06;0;0;0;2.4175577e-09;0;0.00063216337;1.4069308e-12;0.0001535058;
0;0.66026217;0.042598225;0.00013802994;5.5292617e-14;0;0;3.3043535e-10;0;3.2957474e-12;
0;0;3.2580744e-11;0.85934389;4.3416434e-12;0;0;0;0.86547661;0;
0.84901297;0.92278832;0;0;0;6.8802101e-14;0.90825629;6.0612297e-07;0;8.152659e-17;
0;0.92107123;0;0.93426925;0.92555022;0;1.2542992e-15;0.89763558;0;0.88607824;
0;0;0;0;5.1446182e-12;0;0;0;1.833079e-13;6.8424335e-13;
2.1932268e-14;0;5.8087283e-14;0;0.93492895;0;1.7243861e-15;6.9928416e-13;0;1.924533e-16;
0.83775395;3.5575114e-16;0;0;0;1.9982921e-05;0;0;4.1053214e-14;0.85535318;
0.88773972;1.5921902e-14;0;0.92092186;0;0;0;1.463259e-12;0;0;
5.1844166e-16;3.3769311e-12;0;0.91525269;1.6723485e-13;2.2937794e-15;0.93697494;0;0;0.91352755;
0.90180689;1.663894e-12;6.3736311e-15;0;1.3178133e-13;0;0;3.0583453e-16;4.4638416e-15;0;
0;0;0.87367028;1.057022e-13;0;0;0;0;0;0;
0;0;7.9671242e-11;0.79389453;5.0227142e-11;0;0;0;0.81625265;5.9988968e-05;
0.8456021;0.89994514;1.893764e-11;5.8958262e-06;3.203078e-12;6.741608e-11;0.91183954;5.0876424e-06;2.1251853e-13;0;
3.1410946e-07;0.90879434;0;0.92262888;0.92725855;0;0;0.87309068;0;0.89610481;
0;2.9515226e-14;0;0;1.4637995e-14;0;0;4.792488e-12;6.6892377e-12;2.9102408e-11;
3.8644472e-15;0;0.0012606974;0;0.94030774;1.528847e-10;3.8268468e-12;6.3945448e-15;5.6663386e-05;0;
0.84230942;0;0;0;1.3028167e-10;0.00057170278;0;0;0;0.85050923;
0.74755722;2.0518939e-15;0;0.90927273;0;0;0;4.4479926e-14;0;0;
2.7386531e-12;1.4404497e-05;0;0.90164661;1.7502361e-11;0;0.92318779;0;0;0.88640791;
0.89943355;2.3017731e-13;0;9.2836161e-17;5.3609927e-13;0;0;3.5708381e-11;0;2.8016968e-12;
0;0;0.85983831;1.8019293e-12;0;0;0;1.2889316e-12;0;1.8073227e-13;
6.6050539e-05;0;1.1961975e-14;0.86025918;3.3541435e-16;0;0;0;0.72041762;2.7477657e-14;
0.86719376;0.90320045;2.4771964e-05;2.0061113e-14;0;5.7528182e-15;0.92788911;0.00030953303;0;2.529733e-14;
0;0.92632622;0;0.93028212;0.90282947;0;0;0.89277768;0;0.80006194;
0;0;0;0;1.6285385e-09;0;0;3.753465e-12;1.4267174e-13;0;
1.4011756e-14;0;6.3929663e-05;1.3985148e-14;0.93290144;3.2438706e-15;0;0;0.0058375616;3.2692276e-11;
0.75411123;0;0;1.6611067e-17;0;0.00095512188;0;2.1689414e-14;0;0.82640994;
0.84915233;7.0177685e-13;0;0.77645242;6.7417731e-14;0;0;2.5164492e-11;0;0;
0;1.3281364e-12;0;0.90944803;0;5.681483e-16;0.92030674;3.8876879e-06;0;0.93011582;
0.9054836;0;1.6827543e-14;1.5167099e-12;4.1788691e-16;0;0;2.3823212e-15;2.7220272e-12;1.1320351e-13;
3.3253282e-11;0;0.74690807;0;2.4233599e-13;0;0;1.9299575e-12;1.2823919e-11;2.2227581e-14;
0.018765815;0;0.49693945;0.77105308;1.6434069e-05;0;2.9525308e-06;0;0.8131128;7.5341518e-06;
0.78062195;0.59885842;9.0369082e-05;2.2607123e-15;0;1.7190241e-05;0.6845296;2.8530415e-06;0;0;
0;0.74425697;1.1862683e-12;0.8229804;0.92818737;0;0;0.7918697;3.6950609e-10;0.68783122;
0;2.4120475e-06;0;0;0;0;7.9976566e-14;0;0;0;
0;0;0.00014976194;1.0988317e-13;0.90962034;6.7026222e-06;0;0;0.0023869553;5.6840036e-05;
0.89093614;4.0419627e-07;3.4280391e-05;2.806837e-15;0.00041071521;0.033436444;0;0;6.0624742e-13;0.88463724;
0.68896401;0;0.00061014446;0.65123355;0;0;0;0.0005625161;0;6.2713346e-12;
1.0030498e-05;1.4166319e-05;0;0.92761958;2.6924688e-05;0;0.92464316;4.7510318e-10;0;0.91503304;
0.7923438;6.3030175e-14;1.2757253e-07;6.8255106e-12;0;0.041081738;0;0;0;5.5242308e-12;
0;2.2331641e-07;0.86825192;9.3391114e-05;0;0;0;0;3.1451232e-06;0;
1.8987016e-14;0;0.84601104;0.0026030801;0;0;0;0;0.0070193866;0;
0.0012966198;0.90080315;0.50221425;0;2.8054844e-14;5.6285575e-13;0.9272126;0.78222096;0;5.412729e-16;
1.6601443e-05;0.94404274;0;0.91620255;0.9211539;0;0;0.89635783;7.3873979e-10;0.066575482;
4.8774705e-14;0.0018111146;0;0;0;0.00070829917;5.1111518e-11;2.358329e-08;0;1.8776619e-12;
0;5.9978832e-12;1.6145045e-09;0;0.92912585;4.4752624e-13;0;8.1035412e-14;0.91371787;1.0985302e-15;
0.0034188367;0;0;3.2905775e-11;3.890737e-13;0.00057493767;0;0;0;6.1442643e-07;
0.071837492;0;0;0.0017278062;1.3361942e-12;0;0;9.9938543e-06;0;0;
2.3947717e-12;0;0;0.8989827;0.014037065;0;0.94465548;9.0861995e-15;0;0.93513441;
0.93346864;0;0;0;0;0;1.6412625e-11;0.00044152176;5.1470804e-15;0.0013979746;
0;0.00349836;0.56683445;0.0025019594;0;0;0;0;0.0012135105;0;
2.521957e-13;7.9661077e-15;7.7203275e-15;0.86038619;8.0985745e-07;0;0;0;0.84933078;0;
0.816387;0.91316402;0;2.8563044e-15;0;0;0.85531235;0;1.656009e-11;3.1257035e-11;
2.8652215e-12;0.87507641;0;0.92802298;0.89328909;0;4.2478049e-11;0.88039017;0;0.80267811;
0;1.2101472e-14;1.3608756e-15;1.0182573e-15;3.7274204e-13;0;0;0;0;2.7568466e-15;
5.6686766e-11;0;4.2883974e-13;0;0.92325139;0;3.2482541e-14;6.9929183e-07;0;0;
0.79180026;2.2633733e-12;0;9.8891747e-14;2.1301728e-14;2.3372531e-05;0;0;1.0402718e-12;0.80888188;
0.84546834;4.8241054e-14;5.6807095e-14;0.92097104;9.3023458e-18;0;0;0.00072026771;2.2267387e-14;0;
6.0994743e-18;0.0048201326;0;0.91926873;1.2226539e-06;1.2253226e-16;0.9330315;0;0;0.89337939;
0.84485358;4.8039836e-12;0;1.0452232e-13;2.4181877e-13;0;0;0;3.4469256e-13;0;
3.2599812e-10;0;0.88491935;0;0;0;0;1.0916782e-11;0;0;
2.3939316e-14;4.1040704e-09;3.903196e-08;0.81330657;0.00075287622;0;0;0;0.83900106;6.1781946e-05;
0.54584372;0.92262155;0.0019398686;0.00029823178;2.9209212e-13;4.1325366e-05;0.85722297;4.6015521e-06;4.5242516e-05;1.7464043e-15;
5.239647e-05;0.86758208;0;0.92449498;0.92387116;0;1.8070406e-13;0.90635848;0;0.74684739;
0;2.1357443e-12;2.396742e-15;0.00010401833;0;0;0;4.7181419e-07;0;6.8519067e-13;
2.1802908e-11;0;0.059019037;0;0.9334954;1.3553326e-05;1.5123121e-09;7.1994273e-06;0.001062415;0;
0.77103168;2.5812286e-14;0;0;0.0038563854;0.0019729801;0;0;0;0.84717286;
0.048235502;4.654261e-15;0;0.89723676;0;0;0;0.00021116518;2.7134894e-12;0;
1.3417247e-12;0.013440505;0;0.87967187;0.00024898042;0;0.93061721;0;0;0.85417122;
0.88609076;4.4482945e-13;0;1.6347487e-13;5.9038896e-13;0;0;1.7911417e-06;3.5008401e-15;5.3814671e-15;
1.7106074e-11;0.00082105858;0.85829723;0;0;0;0;0.012992125;0;4.7824768e-14;
0.0034488265;0;0;0.85353619;2.4003937e-12;0;4.39988e-13;0;0.82099515;2.6881793e-14;
0.73703778;0.90595675;0.00048260586;3.3738854e-14;0;0;0.91057181;0.00040673782;7.5475982e-14;6.6774399e-11;
3.5552439e-14;0.91095185;0;0.93885648;0.90682364;0;0;0.89280331;0;0.062521644;
0;0;4.261199e-11;0;4.2419931e-10;5.3795109e-15;0;1.5018383e-15;0;0;
2.9357742e-11;0;0.00028819707;0;0.93176633;0;0;1.9168842e-12;0.011743705;1.9516905e-14;
0.093489215;1.7221202e-13;0;2.4566139e-12;0;0.00018396422;0;7.9552731e-16;0;0.85272664;
0.55001992;8.1067824e-13;1.4142004e-10;0.68948293;3.7625898e-06;0;0;0.00078070594;0;0;
0;3.1329719e-06;0;0.92157865;2.6883095e-11;0;0.92440426;5.4822657e-12;0;0.92808819;
0.88408619;0;0;2.9969353e-11;1.0103375e-16;0;0;3.0644862e-11;2.1799791e-11;0;
2.463253e-07;0.00042162341;0.7345956;0;9.0866308e-12;0;0;0.0022115307;0;1.6116752e-15;
0.2697975;4.1869401e-07;0.0052031614;0.87722576;0.012179115;0;9.4405133e-09;2.6670741e-06;0.77088791;4.605476e-05;
0.026988119;0.86567664;1.1361479e-06;3.9752923e-14;0;4.6651721e-07;0.028458843;1.7144145e-06;0;6.5022027e-07;
0.00058235251;0.71364301;1.3031407e-09;0.69187266;0.92972589;0;3.0192576e-10;0.51830709;2.3810793e-09;0.5399434;
8.941901e-12;0.0025324901;1.3349553e-10;0.0011611289;0;8.3027176e-09;0;0;0;0;
1.534524e-10;0;0.0015232794;0;0.94081062;4.8748978e-05;4.7891235e-06;0;0.24148685;7.10981e-07;
0.88237888;2.6258935e-08;2.2851596e-10;2.3540872e-05;0.67681873;0.21705653;0;0;9.2439786e-06;0.86578506;
0.0010155307;0.00032574843;0.011728057;0.8834883;2.8654176e-11;0;0;0.44143358;0;1.4820993e-09;
1.1743194e-07;0.051936436;0;0.93388319;0.030090433;0;0.93493229;6.3920156e-06;1.8881459e-14;0.92632252;
0.64411563;8.9615156e-08;0;4.9876361e-09;0;0.0017137928;0;0;3.3874789e-05;3.0006902e-15;
0.0037186365;0.014849039;0.88330036;0.0005225463;1.9189624e-12;0;0;7.9687907e-06;1.1960209e-14;0;
0.00066928368;5.6295851e-15;4.6916779e-07;0.82522053;0.00012414361;0;0;3.6273609e-09;0.0056140358;5.396085e-08;
0.0064609735;0.90380961;1.7004058e-06;0;1.5709084e-10;2.0657521e-07;0.00087713328;3.0502832e-08;0;1.1920533e-10;
0.73201895;0.86152178;7.471518e-13;0.0036798357;0.92418939;0;1.7377386e-07;0.65453684;1.0948563e-06;0.0025993772;
0;0.0033746816;2.1563789e-11;1.1692339e-11;7.441644e-10;0.00034661958;2.5005786e-11;4.2083091e-08;0;1.0001536e-14;
7.5165346e-13;8.6575884e-09;0.68919933;0;0.92434156;2.5253796e-06;0.001262823;1.2951732e-05;0.88697541;0;
0.0092078056;0;0;2.5486967e-08;0.83302921;0.52773374;1.5455364e-13;0;0;0.01725677;
2.0138452e-06;1.474585e-06;0.032823846;0.91221493;3.1857293e-05;2.8788217e-15;0;0.80005163;0;1.80662e-12;
2.6071376e-10;0.80652231;1.2942703e-15;0.90380532;0.87259573;0;0.9489876;7.5543113e-11;2.6713094e-11;0.91577232;
0.27850497;0;1.1945009e-10;0;4.4559745e-10;0;0;0.0066557406;1.9379147e-09;4.3729127e-09;
0.012256531;0.00081832474;0.90563232;0.028058097;0;0;2.3923498e-05;0.56245893;6.8605921e-05;0;
      };
     };
     float_Data @[9] {
      name="EC_in_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 1;54;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=9;
      matrix_col_width=10;
      ar {
       name="ar";
      [1 54 40] 0;0;0;0;0;0;0;0;0.91080695;0;
0.854635;0;0.93642074;0.95155352;0;0;0.93222231;0;0.93613386;0;
0;0.92209786;0;0.95227087;0;0;0;0;0.94377261;0;
0;0;0;0;0;0;0;0;0;0;
0.9363417;0;0;0;0;0.94977671;0;0;0;0;
0;0;0.93431997;0.91239434;0;0;0;0;0;0;
0;0;0;0;0.90664363;0;0.9488827;0;0;0;
0.93395293;0;0.94127995;0;0;0.93379802;0;0.95802563;0;0;
0;0.74741882;0.95665437;0;0;0;0;0;0;0;
0;0;0;0;0.94377398;0;0;0;0;0.94838345;
0;0;0;0;0;0;0.94885206;0.92719156;0;5.8104945e-08;
0;0;0;0;0;0;0.91838646;0.91364765;0;0;
0.94968724;0.94955343;0.86098993;0;0;4.1272088e-09;0;0;0;0.93095303;
0;0;0;0;0;0;0.958354;0;0;0;
0;0;0;0;0;0;0;0;0.9435606;0;
1.2587963e-14;0;0;0.94301575;0;0;0;0;0;0;
0.95621455;0.93129039;0;0;0;0;0;0;0;0;
0;0;8.145842e-06;0;0;0;0.86743033;0;0.94646215;0;
0.88295919;0;0;0;0;0.96632516;0;0.074476391;0;0;
0.96442413;0;0;0;0.82960474;0;0.67121053;0;0;0.89286101;
0;0;0.95817059;0;0;0;0;0;0.00053540926;0;
0;0;0;4.3696411e-09;0.9672007;0.94695199;0;0;0;0;
0;1.764502e-08;0;0;0.9667263;0;0.85668445;0;0.97132897;0;
0;0;0;0;0;0;0.89985412;0;0;0.9752143;
0;0;0;0;0.30651996;0.86658084;0.88789678;0;0;0;
0;4.1134189e-08;0;0;0;0.93986231;0;0.96242809;1.4271104e-09;0;
0;0;0;0;0;0;0;0.8052724;0.9759196;0.96983677;
0;0;0;0;0;0;0;0;0.88573343;0;
0.8848753;0;0.943524;0.94850594;0;0;0.90663934;0;0.93744075;0;
0;0.92240489;0;0.95688695;0;0;0;0;0.95283711;0;
0;0;0;0;0;0;0;0;0;0;
0.93606585;0;0;0;0;0.9348309;0;0;2.5807245e-09;0;
0.028820436;0;0;0;0;0.80998653;0;0;0;0;
0;0;0;0;0.95632261;0;0.96536386;0;0;0;
0.95935196;0;0.95543027;0;0;0.95871902;0;0.96724725;0;0;
0;0.90883648;0.970972;0;0;0;0;0;0;0;
0;0;0;0;0.96301806;0;0;0;0;0.96352458;
0;0;0.58545351;0;0.89866894;0;0;2.4975559e-06;0;1.0204319e-06;
0;0;0;0;0;0;0.96614271;0.9773134;0;0;
0.97011179;0.92115545;0.97099817;0;0;0.66815275;0;0;0.84190005;0.82132286;
1.2839207e-09;0;0;0;0;0;0.96547234;0;0;0;
0;0;0;0;0;0;0;0;0.96955818;0;
2.358807e-16;0;0;0.91787785;0;0;0.96044141;0.25190419;0.97035074;0;
0;0;0;0;0;0;0;0;0;0;
2.2051503e-12;0;0;0;0;0;0.95982867;0;0.75369287;0;
0.81961775;0;0.75201297;0;0;0.89360267;0;0.76664424;0;0;
0.91814834;0;0;0;0.89513171;0;0.85146004;0;0;0.92303145;
0;0;0.95889896;0;0;0;0;0;0.87089515;0;
0.95770359;0.32123783;0.96661991;0;0;0;0;0;0;0;
0;0.50570124;0;0.0011458648;0.96867371;0;0;0;0.96957457;0;
0;0;0;0;0;0;0.87616765;0;0.47834501;0.9505263;
0;0;0;0;0;0.920964;0.89725387;0;0;0;
0;0.63192016;0;0;0;0.95408779;0;0.96282583;2.5505475e-05;0;
0;0;0.31655478;0;0.95815939;0.0012979596;0.96682262;0;0;0;
0;0;0;0;0.95687473;0;0;0;0;0.96768904;
0;0;0.95397794;0;0;0;0;0.88590831;0;0;
0.93519872;0;0;0;0;0;0.95282906;0.93586463;0.95360959;0;
0;0;0;0;0.93720466;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.90825719;0;
0.94504958;0;0;0;0;0;0;0;0.95848715;0;
0;0;6.7514012e-09;0.96843433;0;0;0.95526373;0;0;0;
0;0.8910026;0;0;0.93867362;0;0;0;0;0;
0.9535718;0.93660307;0;0;0;0;0.85546744;0;0.93934977;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.91488016;0;0.94755322;0;0;0;0;0;
0.0038841395;0;0.96391404;0;0.91951686;0;0;0;0;0;
0.96288067;0;0;0;0;0.91353959;0.85448807;0;0.95138252;0;
0;0;0;0;0;0.94980979;0.96248525;0;0;0.14254558;
0;0;0.95043725;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.941356;3.480671e-08;0.95932484;0;
0;0;0;0;0;0;0.94784933;0;0;0;
0;0;0;0;0.95117033;0;0.63653016;0;0;1.0030103e-06;
5.6514036e-05;0;0.93948752;0;0;0.091532886;0;0;0;0;
0.95828444;0;0;0;0.12392569;0;0;0;0;0.77748513;
0;0;0;0;0;0;0.78524733;0;0;0;
0.94044161;0;0.95399153;0;0;0;0;0;0;0;
0;0;0;0;0.95230758;0;0.83989346;0.90141678;2.180952e-08;0;
0;0;0;0.79833674;0.90262836;0;0.96818334;0;0;0.96722013;
0;0;0;0;0.97554427;0;0;0;0;0.77643269;
0;0;0;0;0;0;0;0.72420126;1.8573625e-11;2.4890123e-09;
0.9440459;0;0;0;0.90930593;0;0.96152085;0;0;0.86605668;
0;0;0;0;0.96025294;0;0;0;0;0.96993238;
0;0;0.95769078;0;0;0;0;0.90564638;0;0;
0.94400531;0;0;0;0;0;0.95655555;0.94217402;0.95835936;0;
0;0;0;0;0.94488722;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.85796881;0.057099938;0;3.3881178e-09;0;0;0.96451467;0;
0;0;0.34449208;0.97215027;0;0;0.9617849;0;0;9.4472052e-12;
0;0.92323869;0;0;0.95198315;0;0;0;0;0;
0.96068513;0.94764906;0;0;0;0;0.90711421;0;0.95196021;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.89259827;0.65657783;0;0;
0.89926302;0;0.95951396;0;0.9416374;0;0;8.2329791e-07;0;0;
0.97020358;0;0;0;0;0.94021875;0.91369146;0;0.96517938;0;
0;0;0;0;0;0.94306618;0.97375435;0;0;0.82771438;
0;0;0.96699154;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.82781696;0;2.1423097e-07;0;
0.92916334;0.87082291;0;0;0;0;0.92578632;0;0;0;
0;0;7.881788e-07;0;0.72682184;0;0.91055274;0;0;0.018582983;
0.81879008;0;0.95407856;0;0;0.96772635;0;0;0;0;
0.96889406;0;0;0;0.95864421;0;0;0;0;0.92288041;
0;0;0;6.6544349e-06;0;0;0.92382878;0;0;0;
0;0;0;0;0.96644682;0.95580035;0;0;0;0;
0;0;0;0;0.88623303;0;0.83000869;0.9693591;0;0;
0;0;0;0.88499314;0.92856079;0;0.96553987;0;0;0.97476256;
0;0;0;0;0.97527844;0;0;0;0;0.87821823;
0;0;0;0;0;0;0;0.68023646;3.6251419e-11;5.4497341e-06;
0.95369846;0;0;0;0;0;0;0.44416788;0.97235322;0.96891981;
0;0;0;0;0;0;0;0;0;0;
0.91467679;0.93089461;0;0;0;0;0;0;0;0;
0.90472662;0;0;0.95919532;0;0;0;0;0.95650214;0;
0;0.89586496;0.94833958;0;0;0;0.95715511;0;0;0;
0;0.90250355;0;0;0;0;0;0.91153628;0;0;
0;0;0.95113182;0.92786628;0;0;3.6017361e-15;0;0;0;
0;0;0;0.88653642;0.92342609;0.91381902;0;0.67688817;0;0;
0;0;0;0;0.92110944;0;0;0.96024442;0;0;
0;0;0;0;0;0;0.94174337;0;0;0;
0.94928813;0;0;0;0;0.91455597;0;0;0;0;
0;0.82172793;0;0;0;0;0.95551568;0.92513257;0;0;
1.9274344e-09;0;0.83380997;0;0.72255981;0;0;0;0.93670547;0.8914901;
0;0;0;0;0;0;0;0;0;0;
0;0.95892644;0;0;0;0.0062559652;0.95875204;0;0;0;
0.94240528;0;0;0;0.93698925;0;0;0;0;0;
0;0;0;0.46172255;0;0;0;0;0;0;
0.95656306;0.94303083;0;0;0.90059286;0.92149454;0;0;0;0;
0;0;0.82028121;0;0;0;0;0;0;0;
0;0.00216799;0.96256655;0.78994101;0;0.97417825;0.53901976;0;0;0;
0.0019554151;0;0.85791034;0.8988381;0;0;0;0;0.93663073;0;
0;0;0;0.79005647;0;0;0;0.9118591;0;0;
0;0;0;0.5620324;0.97376513;0.96730095;1.7923153e-14;0;0.85841465;0.91714239;
0;0;0;0;0.36876172;0;0.044442929;0;0;0;
0;0;0.81332308;0;0;0;0.95866048;0;0.89351559;0.97102237;
0;0;0.92090583;0;0;0;0.73218429;0;0;0;
0;3.7131114e-09;0;0;0;0;0;0.00033617794;0;0;
0.93076456;0;0;0;0;0;0;1.2612602e-06;0.96599728;0.96202213;
0;0;0;0;0;0;0;0;0;0;
0.92184889;0.93398798;0;0;0;0;0;0;0;0;
0.91512698;0;0;0.9608683;0;0;0;0;0.95846325;0;
0;0.9048956;0.95003217;0;0;0;0.9587363;0;0;0;
0;0.91251618;0;0;0;0;0;0.91722941;4.2626658e-09;0;
0.55221933;0;0;0;0;0;0.0083775306;0;0;0;
0;0;0;0.90667003;0.93960416;0.92484456;0;0.80039132;0;0;
0;0;0;0;0.93828553;0;0;0.96445429;0;0;
0;0;0;0;1.3512686e-06;0;0.94943941;0;0;0;
0.9527601;0;0;0;0;0.9331913;0;0;0;0;
0;0.82851225;1.3279338e-09;0;0.13250943;0;0;6.8457048e-08;0;0;
0.80783111;0;0.91456521;0;0.89228755;0;0;0;0.85365266;0.70439821;
0;0;0;0;0;0;0;0;0.6603713;0;
0;0.86770719;0;0;0;0.80534428;0.97014117;0;1.3845224e-08;0;
0.87009162;0;0;0;0.91686517;0;0;0;0;2.707759e-10;
0;0;0;0.86746478;0;0;0.95261723;0;0.96151143;0;
0;2.161722e-07;0;0.00020107297;0.90424198;0.93236595;0;0;0;0;
2.2990121e-06;0;0.0026650317;0;1.1099949e-06;0;0;0;0;0;
0;0.2780045;0.96589977;0.85329854;0;0.92545426;0.76467967;0;0;0;
0.0035244408;0;0.89306736;0.73435932;0;0;0;0;0.94390565;0;
0;0;0;0.76581156;0;0;0;0.92533666;0;0;
0.9525013;0.58638048;0.9511016;0;0;2.6827079e-11;0;0;0.88721275;0.93414688;
0;0;0;0;0.79299462;0;0;0;6.0475049e-06;0;
0;0;0.8801192;0;0;0;0.96521401;0;0.92012429;0.92752683;
0;0;0.96970505;0;0;0;1.1829761e-05;0;0;0;
0;4.3814765e-09;0;0;0;0;0;4.7584925e-07;0;0;
0.94308043;0;0;0;0.95878965;0.82075369;0.96919084;0;0;0;
0;0;0;0;0;0;0;0.88107204;0.92845422;0.96368241;
0;0;0.94395906;0;0.95210975;0;0;0;0;0;
0.92769343;0;0.94228256;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.94452399;0.89186019;0;0;0;0;0.91967559;0;0.8998794;0;
0.94434518;0;0;0;0;0;0;0.88179874;0;0;
0;0.90884089;0.93729597;0.9672628;0;0;0.951419;0;0.95678133;0;
0;0;0;0;0.93885213;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.94972658;0.91855687;0;0;0;0;
0;0.00028535788;0.92003429;0;0.95014942;0;0;0;0;0;
0;0;0;0;0;0.88438177;0;0.96747267;0;0;
0.95390236;0;0.95582062;0;0;0;0;0;1.9736657e-08;0;
0;0;0;0;0.90137452;0.828435;0;0;0;0;
0;1.8622386e-05;0;0;0;0;0;0.89748108;0.95275986;0;
0;0;0;0;0.93511415;0;0.92399156;0;0.95541829;0;
0;0;0;0;0;0;0.95052147;4.9121911e-09;0;0.93967468;
0;0.97647977;0;0;0;0;0;0;0;0;
0;0;0.87376797;0;0.95702499;0.93793523;0;0;0;0;
0;0;0.84325582;0.84578615;0;0;0;0;0;0;
0;0;0.96757001;0;0;0;0;0;0;0;
0.95578343;0.083401442;0.96928728;0;0;0;0;0.47590217;0;0;
0.95869195;3.4402281e-09;0.93670046;0.52927738;1.5309366e-09;0.0022707172;0;0;0.97148889;0;
0;0.82976425;0;0;0;0;0.89949864;0;0;0;
0.79767138;0;0;0;0.97202241;0;0;0.77568346;0;0;
0;0;0;0;0;0;0.92600143;0;3.1267818e-11;0;
0;0;0;0;0.96499747;0.82767659;0.97240651;0;0;0;
0;0;0;0;0;0;0;0.91625887;0.94207579;0.96775281;
0;0;0.95337659;0;0.95795661;0;0;0;0;0;
0.94477344;0;0.95065141;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.95285666;0.92241323;0;0;0;0;0.93716693;0;0;0;
0;0;0.86508036;0.1208187;0;0;0;0.93395567;0;0;
0;0.95001483;0.95410776;0.9746685;0;0;0.96569622;0;0.96621501;0;
0;0;0;0;0.95997912;0;0;0;0;0;
0;0;0;0;0.12327716;0;0;0;0;0;
0;0;0;0;0.96073151;0.95168763;0;0;0;0;
0;0.8234846;0;0;0;0;0.91964525;0.83514208;0;0;
0;0;0;0;0;0.87905306;0;0.96983641;0;0;
0.95675576;0;0.95433754;0;0;0;0;0;0.3364329;0;
0;0;0;0;0.91261905;0.8598668;0;0;6.1014998e-07;0;
0;0.0058697835;0;0;0;0;0;0.90957743;0.95155156;7.7480528e-10;
0;0;0;0;0.9492563;0;7.3530648e-09;0;0;0;
0.87762046;0.4277086;0;0;3.7264539e-07;0;0.95427895;0.016069219;0;0.95848632;
0.74544615;0.97656012;0;0;0.48235628;0;0;7.2496543e-05;0;0;
0;0;0.89489114;0;0.96643078;0.94372487;0;0;0;0;
0;0;0.88898546;0.87689573;0;0;0;0;0;0;
0;0;0.97179145;0.82643354;0;0;0;0;0;0;
0.25587547;0;0;0;0.93921447;0.90065008;0;0;0;0;
0.95445037;0.0004992215;0.94886267;0.8310886;0.28777751;1.8440956e-06;0.74343055;0;0.97271961;0;
0;1.5587699e-05;0;0;0;0;0.92759794;0;0;0;
0.8851577;0;0;0;0.97661525;0;0;0.87842023;0;0;
0;0;0;0;0;0;0.97101325;0.14415708;5.6554667e-10;0;
0;0;0;0;0.0061396705;0;0;0;0.97624421;0.96771973;
      };
     };
     float_Data @[10] {
      name="EC_out_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 1;54;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=10;
      matrix_col_width=10;
      ar {
       name="ar";
      [1 54 40] 0;0.55355734;0;0;0;0;0;0;0.53206962;0;
0.46785474;0;0.57509649;0.54610002;0;0;0.53416258;0;0.52077568;0;
0;0.50958449;0;0.56269026;0;0;0;0;0.52398324;0;
0;0;0;0;0;0;0;0;0;0;
0.56023675;0;0;0;0;0.53642696;0;0;0;0;
0;0.47760755;0.41380769;0.50287342;0;0.52577746;2.7113242e-12;0;0;0;
0;0;0.44259489;0;0.46737283;0;0.5695228;0.42459264;0;0;
0.42500752;0;0.43693048;0;6.6486582e-12;0.45286345;0;0.52642018;0;0;
0;0;0.56856704;0;3.8302651e-12;0;0;0;0;0;
0;0;0;0;0.5002417;7.9150497e-12;0;0;0;0.39522305;
0;0;0;0;1.7062212e-14;0.4324117;0.43288291;0.45395392;0;0.56889111;
1.84824e-09;0;4.5004558e-14;0;0;0;0.46904156;1.3380569e-10;0.52904993;0;
0.60612375;0.42696986;3.8557357e-13;2.221884e-13;0.38474268;0;0.45648474;0;4.0820242e-10;0.46954444;
4.6502743e-13;0.56833416;0;0;3.2253819e-14;0;0.61931688;0;6.2362798e-10;0;
0;0;1.619893e-12;0;0;0;0;0;0.52471292;5.3196497e-10;
0;0;0;0.36819351;0;0;1.0726814e-13;9.8042251e-12;4.2981597e-11;0.46136746;
0.55002749;0.50263637;0;0.20819354;5.7108187e-05;0;6.0140191e-11;0;0;0;
0.74883556;2.9317659e-10;0.81079894;0;0.66767424;0.4602859;1.2980213e-06;1.0001407e-12;0.5369854;0;
0.18536787;0;0.0096432511;0.28667915;2.8565257e-05;0.74804914;0;0;0;2.0583843e-15;
0.75922281;0;0.050059106;1.6393483e-12;1.1466852e-11;0;3.2227942e-13;0;0;0;
0;0;0.72601688;0.00016699618;0;0;0;0.58762592;0;0;
2.3216897e-11;1.1174566e-09;2.698016e-07;0.72741842;0.79523051;0.66359401;0;0.011561279;0.4348284;0;
0;0;0;1.944004e-12;0.71330303;0.00017570228;0.77822304;0.00053749577;0.77111566;0.012633322;
0.0048014452;8.0791842e-06;0.0026534041;0;0.0038196235;0;0.77634555;0.002502162;7.6756232e-06;0.76168877;
0;0;0;0;0.82069761;0;0.72423381;8.8332796e-05;0.011026513;0;
0;0;9.9840929e-07;0;0;0;0.49918365;0.72459006;0;0;
0;0.010239477;1.47506e-11;0;4.9674354e-06;6.143652e-05;0.0047855796;0.75135523;0.81835711;0.77364886;
0;0.56280434;0;0;0;0;0;0;0.41441283;0;
0.48096985;0;0.58976263;0.46371955;0;0;0.36789528;0;0.48896581;0;
9.4710305e-14;0.46694165;0;0.58915764;0;0;0;0;0.584526;0;
0;0;0;0;0;0;0;0;0;0;
0.5133245;0;0;0;0;0.35742015;0;0;0;0;
0;0.48603928;0.53519493;0.5163247;0;0.57324803;3.4730064e-13;0;0;0;
0;0;0.53630859;3.1614644e-12;0.61151004;0;0.6402939;0.35329676;6.1663771e-16;1.8334314e-15;
0.50147951;0;0.39557272;0;2.6093824e-10;0.52142376;6.4611727e-14;0.520459;0;0;
1.1445883e-14;0;0.69864368;0;1.4672707e-11;0;0;0;0;0;
0;0;0;0;0.56597161;4.6640764e-12;0;0;0;0.43346289;
0;0;5.3535892e-13;7.824042e-13;2.3150164e-11;0.41137615;0.56733423;0.45734975;0;0.40198919;
0.024384828;0;0.001539726;0;0;0.017677465;0.78801107;0.78116012;4.3649502e-06;0;
0.81609929;2.749777e-11;0.61355817;0.52354622;2.7509488e-11;3.5679048e-07;2.0475618e-11;0;0.75757247;5.3712969e-13;
0.616696;0;0;0;0.0021611592;0.0022000535;0.5722729;0;0.42976657;0;
0;0;0.0048271371;0;0;0;0;0;0.78423917;0.053569943;
0;0;0;9.119836e-12;0.02809114;0;0.70599073;0.66014975;0.74456447;0;
5.2877047e-05;2.4433137e-05;0;0.0003112306;0.042128723;0;0.036532227;0;0;0.16985065;
0.55163115;0.71536601;5.09973e-09;0;0.79372197;7.7745072e-15;0.41549051;0.7676875;4.178103e-11;3.0516087e-05;
2.1641928e-11;0;0.7656647;1.8505385e-13;0.38943318;0;0;0;0.0018841056;0.0079492582;
0.14701636;0;0.53091788;0;0;0;0.0050253132;0;0;0;
0;0;0.6146673;0.64085811;0;0;0;9.1913239e-13;0.16985597;0;
0.74266171;0.75672746;0.71722776;5.1590932e-12;7.3620491e-08;3.4059033e-11;0;3.4280373e-10;0.0001721118;0;
7.1765395e-14;0;0;0.41188836;0.61511308;0.53011781;2.4963559e-10;0;0.54925066;1.1726923e-13;
0.40692091;0.6062364;9.3690535e-15;2.772638e-11;0;0;0.5626933;0;0.54834425;0;
0;0;7.2212967e-14;2.4045512e-08;0.00020348582;0;0.59043318;0;0;0;
0;0;0;0;0;0;0.55727088;0.5788433;0;0;
0;0;0.45800725;0;0.4291074;0.38376549;0.40357798;5.0605489e-14;1.1197089e-11;0;
0;0.40153396;0.49882743;0;0.39407662;0;0;0;0;0.56814128;
0;0;0.64212465;0;0;0.57905549;0;0.35258365;0;0;
0.61815959;0;0;0;0;0;0.39159542;0.35716128;0.52718496;0;
3.2337887e-06;0;0;0;0.37000549;0;0;0;0;0;
4.0548734e-05;4.0602931e-06;0;0;0;0;0;0;0.45760918;0.49123755;
0.45556143;0;0;0;0;0.38177952;0.5034278;0;0.39862102;0;
0;0;0;0.5704208;0;0;0.64020097;0;8.364716e-14;0.58485818;
0;0.34683183;0;0;0.62490243;0;0;0;0;0;
0.38855663;0.34700927;0.52612501;0;4.3532527e-06;0;0;0;0.37173906;0;
0;0;0;0;4.2396052e-05;5.6721719e-06;0;0;0;0;
0;0;0.46587372;0.50170183;0.4654102;0;0;0;0;0.41717398;
0.5162499;0;0.38984972;0;0;0;5.386131e-10;0.59271407;2.8058553e-14;0;
0.66465712;0;2.1634493e-07;0.61101866;0;0.30257505;0;0;0.63687706;0;
1.1018653e-11;0;0;0;0.42171478;0.34951535;0.54187536;0;1.3464793e-05;0;
0;0;0.36062038;0;0;0;0;0;0.00013865014;6.3982079e-06;
0;0;0;0;6.9946083e-13;0;0.50476867;0.53483677;0.50858557;0;
0;2.8386264e-13;0;0.47990954;0.69658709;0;0.4629561;0;0;0.001499264;
0.028099;0.75604665;9.5219308e-05;1.0773098e-14;0.75388533;1.094578e-09;0.017933322;0.79938972;2.7265818e-14;0.096435666;
0;0;0.78791571;0;0.027324436;2.2579612e-11;0;0;0.33049947;0.26952884;
0.73938316;0;0.14490899;0;0;0;0.47242931;0;0;0;
0;0;0.15042827;0.21973279;0;0;0;0;0.0027303575;0;
0.77316779;0.76780319;0.69699538;3.4928019e-11;9.9445406e-06;5.3943999e-08;0;0.048384134;0.83636588;0;
0.0089461459;0;0;4.1439562e-06;0.48292762;0.41693392;0.79326707;0.00099584355;0.74413532;6.4617249e-11;
0.01342136;0.083409265;3.7405077e-15;9.4255622e-05;2.4307118e-14;0;0.8623265;0;0.0349872;0.53673428;
0;0;6.0554016e-06;0.00064536219;0.87768304;0;0.76558781;0;5.6724311e-06;0;
0.00056382385;0;0;0;0;0;0.75186902;0.72159952;0;0;
0;7.4013486e-12;0;6.7283297e-12;0.2203944;0.29795963;0.45446458;0.041538686;0.72860068;0.71296686;
0;0.39113426;0.49676961;0;0.38751039;0;0;0;0;0.56922805;
0;0;0.63755316;0;0;0.58707488;0;0.3440176;0;0;
0.62212515;0;0;0;0;0;0.38601559;0.34367943;0.53047943;0;
4.2171682e-06;0;0;0;0.36619735;0;0;0;0;0;
5.0476239e-05;5.4129209e-06;0;0;0;0;0;0;0.47057456;0.50101203;
0.45282045;0;0;0;0;0.37359166;0.51609027;0;0.4085775;0;
0;0;2.141131e-11;0.58332688;2.9021783e-13;0;0.63780004;0;2.3374956e-12;0.61226976;
0;0.34703285;0;0;0.64316201;0;5.6612468e-13;0;0;0;
0.38282895;0.32984853;0.54501283;0;1.519422e-05;0;0;0;0.38473922;0;
0;0;0;0;9.2241979e-05;2.6437174e-05;0;0;0;0;
2.3217586e-14;0;0.51493311;0.54398924;0.48840538;0;9.6169315e-16;1.0254203e-13;0;0.60306728;
0.68367368;0;0.15047491;0;0;1.5180122e-10;1.8258303e-05;0.71595728;3.572068e-06;0;
0.72129935;3.9413819e-14;2.2743615e-07;0.6940726;8.8563664e-15;0.31160676;0;0;0.73752677;1.3204525e-14;
1.7499127e-06;9.0380633e-13;0;0;0.41332585;0.12961988;0.75243449;0;0.0048921551;0;
0;0;0.52631873;0;0;0;0;0;0.017016929;0.01255431;
0;0;0;0;7.7355784e-09;0;0.71725023;0.68436676;0.57954472;0;
1.5840551e-09;4.4907935e-09;0;9.7112665e-09;0.68452448;0;1.3759158e-11;0;0;0;
1.5700145e-07;3.2148803e-10;0.64670306;0.54507774;1.2848369e-05;3.5868454e-11;7.5915385e-10;1.3865262e-09;7.9975653e-12;0;
0;0;0.71063519;2.6198255e-11;1.4759169e-10;0.65198302;0;0;3.4810318e-15;1.5474371e-15;
0.74771833;0;0.67743635;0.2452822;0.4422119;0;9.283266e-15;0;0.21299577;0;
0;0;6.5739222e-08;0.69909805;0;0;0;0;0;0.36245441;
2.2174778e-11;1.6220367e-09;2.0314967e-08;0.5331111;0.6392504;0.62513226;0;4.4610022e-09;0.69487315;0;
7.7192381e-13;0;0;0;7.1773775e-07;3.3859766e-11;0.66227841;0.56734318;0.00015065268;2.0775048e-09;
1.4913759e-09;1.884257e-11;5.3407861e-10;0;1.464727e-10;0;0.67367721;1.9084161e-11;4.3297458e-12;0.65787125;
0;0;0;0;0.74267733;0;0.71507841;0.2934345;0.48254436;0;
0;0;0.31304666;0;0;0;3.2395155e-07;0.58282888;0;0;
0;5.9178457e-10;0;0.088324949;5.4148157e-12;3.3955603e-14;9.0504201e-11;0.57007653;0.57763177;0.66098529;
0;0;0.5333302;0;0;0;0;0;0;0;
0.5363825;0.41214213;0;0;0;0;0;0;0;0;
0.51494145;0;0;0.59726596;0;0;0;0;0.61148387;0;
0.53254735;0.43712348;0.43240443;0;0;0;0.43029508;0;0;0;
0;0.54074389;0;0;0;0;0;0.43583298;0;0;
0;0.48022616;0.50333804;0.50371844;0;0;0.66580802;0;0;0;
0;0;1.8820028e-12;0;0.6430589;0.38875318;1.5515141e-07;0;0;0;
0;0;0;0;0.6477527;0;0;0.68379915;0;0;
0;0;0.69767165;0;0.65789866;0.32594022;0.43535033;0;0;0;
0.38374913;0;0;0;2.6366656e-13;0.65103078;0;0;0;0;
0;0.32636243;0;0;1.6433884e-13;0.59091574;0.62792742;0.55832005;0;1.2417657e-10;
0.67461079;0;6.0317376e-12;0;0;0;8.0157871e-09;5.3642334e-12;0.74242598;0.33732736;
0.00034772546;0;6.9614745e-11;2.6671382e-10;0;0;5.5469117e-13;0;0.74641812;4.3406138e-12;
0;0.67982095;0;0;0;0;0.74096096;0;0.68278724;0.61157894;
0.46223825;0;1.757137e-12;0;0.28588459;0;0;0;4.2007649e-08;0.72064018;
0;0;0;9.7464517e-14;0;0.24763249;3.255711e-11;8.6780569e-11;2.3009212e-09;0.62763232;
0.66272438;0.70555496;0;0.0018635028;0.80092692;0;0;0;0;0;
0.30494595;1.6235127e-08;0.85157204;0.15354843;0.63401794;1.3849069e-05;1.2213855e-05;0.0012833385;5.2428192e-07;0;
5.6636372e-07;0;0.79779518;7.1496993e-07;1.1594756e-08;0.82576859;0;0;0;0;
0.86706787;0;0.78071868;0.23790953;0.51399511;0;0;0;0.044160981;0;
0;0;0.19510183;0.83107662;0;0;0;1.0805686e-06;0;0.018604267;
8.779719e-08;0.00062924885;0.020410122;0.77909327;0.83061701;0.809147;0;1.620969e-06;0.74001104;0;
0;0;0;0;4.0383606e-05;1.1798923e-10;0.70367801;0.55076486;0.000905575;1.0164096e-08;
3.3511583e-08;1.4103419e-08;2.0686372e-08;0;2.5178837e-10;0;0.76208937;1.8359154e-09;5.3275655e-11;0.7190659;
0;0;1.88459e-14;0;0.78657079;0;0.71769762;0.21301624;0.20230147;0;
1.1771764e-10;0;0.49196202;0;0;0;0.00013062736;0.61865056;0;0;
0;6.4982977e-11;0;0.1508359;1.4122157e-14;4.360443e-08;7.2389576e-06;0.59693074;0.58577162;0.68865311;
0;0;0.5245015;0;0;0;0;0;1.2923815e-14;0;
0.54104924;0.40539804;6.5223261e-13;0;0;0;0;0;0;0;
0.52091819;0;0;0.59616244;0;0;0;0;0.61409312;0;
0.53530604;0.43433535;0.42828354;0;0;0;0.42919055;0;0;0;
0;0.54271591;0;0;0;0;0;0.43301225;0;0;
0;0.48143342;0.50785643;0.49380073;0;1.9702749e-10;0.70405024;0;7.6135584e-14;0;
0;3.9191473e-15;1.5277854e-08;3.5530044e-11;0.69011235;0.38333318;3.7132286e-06;3.7901309e-14;4.5958556e-11;3.6153933e-09;
0;0;0;0;0.69358921;0;2.4017132e-12;0.71437567;0;0;
1.7632249e-15;3.6601893e-14;0.73285496;0;0.69641054;0.27739128;0.45584238;0;6.3879479e-13;0;
0.37345779;0;0;0;5.2575162e-09;0.69286555;0;0;0;0;
3.8539528e-14;0.2752848;3.9051089e-12;8.860741e-10;5.6907039e-09;0.62447441;0.68317276;0.57385695;0;0.49917296;
0.77032006;0;0.087041594;0;0;1.397445e-06;0.070062995;0.69840318;0.21836418;9.8754038e-10;
0.77556825;1.9823153e-14;0.00037767956;0.6986984;0;0.025822945;1.4117817e-13;0;0.79128128;4.5667671e-11;
0.00013142837;5.142302e-05;0;0;0.035051271;0.020923896;0.8371526;0;0.062881343;1.465219e-12;
6.7072814e-12;0;0.52845973;0;8.4820822e-14;0;0;0;0.41303191;0.66865808;
0;0;0;0;7.2662436e-07;2.4131403e-11;0.74242795;0.65569049;0.63742352;3.92777e-07;
0.0025644058;0.0077822488;0;0.0053673587;0.74500906;0;0.00049475825;0;0;0.034425545;
0.69613069;0.60841262;0.50363535;9.6569721e-09;0.77549577;2.8685588e-06;0.29271719;0.7769686;3.4262268e-07;9.1317279e-06;
1.8237274e-09;0;0.80377382;0;0.012925314;0.00019282328;0;0;0.015140605;0.00035729364;
0.78771037;0;0.78153092;2.9644137e-10;8.5068363e-10;0;3.71328e-06;0;3.7513953e-10;0;
0;0;0.084612682;0.75689059;0;0;0;2.0291718e-07;0.0077287145;3.8921777e-09;
0.58200383;0.64672971;0.29325083;0.0011375353;0.00014090686;3.0153125e-05;0;0.21644878;0.68589723;0;
0.59672165;0;0;0.0002374717;0.0073630987;0.7057997;8.7916305e-06;0;0.76128042;0;
0.01375656;0.75331783;0;0.060146149;0;0;0.78079295;0;0.0072197681;0;
0;0;0.57923305;0.31757963;0.67086923;0;0.047153264;0;2.100774e-13;0;
0.38523218;0;0;0;0;0;0.010806907;0.34586468;0;0;
0;0;0.00021956109;0;0.61482674;0.75017941;0.6550588;6.2525685e-16;1.0312273e-11;9.7128726e-14;
0;0;5.2099599e-06;0;0;0;0;0.45815912;0.54017174;0.50316966;
0;0;0.56458783;0;0.42147645;0.43693945;0;0;0;0;
0.60857457;0;0.41860697;0;0;0;0;0;1.0517873e-05;0;
0.52607346;0;0;0;0;0;0;0;0;0;
0.55368888;0.50552082;0;0;0;0;0.44429132;0;0.46813336;0.42360094;
0.49032381;0;0;0;0;0;7.3144943e-06;0;0;0;
0;0.46514818;0.53563923;0.52317756;0;0;0.57544214;0;0.42252329;0.43683782;
0;0;0;0;0.61488521;0;0.40998366;0;0;0;
0;2.5510596e-12;1.5492104e-05;0;0.51907718;0;0;0;0;0;
0;0;0;0;0.54533905;0.52454531;0;0;0;0;
0.42735738;0;0.47672218;0.41451228;0.48438033;0;0;0;0;2.3716806e-10;
8.1379912e-06;0;1.3227999e-11;0;0;0.36757606;0.49906147;0.49909443;0;0;
0.57933664;0;0.37245828;0.46139675;0;9.3239427e-12;0;0;0.61003488;0;
0.40045026;0;0;0;2.7094993e-09;5.0898424e-10;2.1048161e-05;0;0.48489782;0;
0;0;1.0423892e-10;0;0;0;0;0;0.54282737;0.44673797;
0;0;0;0;0.42860177;0;0.46252468;0.45685214;0.5237385;0;
0;0;0;1.477258e-14;4.4364439e-05;0;0;0;0;0.36336902;
0.50190163;0.61838675;0;0;0.6507147;0;0.49128848;0.48497218;0;0;
0;0;0.68634546;0;0.26220903;0;0;0;1.1243396e-06;9.6716003e-06;
6.271559e-05;0;0.61893874;0;0;0;7.5031246e-15;0;0;0;
0;0;0.60202134;0.409244;0;0;0;0;0.42415529;0;
0.51378411;0.5338425;0.5938499;0;0;0;0;0.52000785;0.67735022;0;
0.15660875;0;0;0.001961323;0.04262726;0.75818497;0;0;0.78860468;3.0152939e-13;
0.056191612;0.74284637;0;0.26069954;0;0;0.78637946;0;0.0025392293;0;
0;0;0.55968231;0.55474144;0.7076959;0;0.088806584;0;0;0;
0.16813385;0;0;0;0;0;0.06841597;0.0060990984;0;0;
0;0;0.044269234;0;0.71673495;0.70752329;0.72305053;0;0;1.0461846e-06;
0;1.2371785e-12;6.097694e-06;0;0;0;0;0.44687629;0.52642769;0.49045479;
2.6575352e-14;0;0.55571717;0;0.39579573;0.42475325;0;0;0;0;
0.62034297;0;0.39444771;0;0;0;5.1844151e-15;8.4589921e-14;1.9652134e-05;0;
0.52804685;0;0;0;1.276554e-15;0;0;0;0;0;
0.53639686;0.49323004;0;0;0;0;0.43450251;0;0.46687591;0.41994795;
0.47579274;0;1.8300583e-15;0;0;1.4513484e-09;5.8502046e-05;0;2.1600736e-13;0;
0;0.52926481;0.50322425;0.60245669;1.0357244e-08;5.5135313e-13;0.64090466;3.5408739e-13;0.42119262;0.35498822;
0;0;0;0;0.68197793;0;0.44165921;1.043164e-12;0;0;
2.6926662e-12;6.0503094e-06;0.00051458611;0;0.52721411;0;0;0;3.7406276e-14;0;
0;0;0;0;0.49861851;0.57825422;0;0;0;0;
0.42030567;0;0.54502934;0.41128591;0.46955448;2.9605714e-11;1.0166278e-08;4.4260093e-10;0;2.7503685e-07;
0.001740564;0;4.0146283e-13;0;0;0.31246132;0.47487339;0.53599358;4.0344186e-10;0;
0.58055645;4.8112404e-13;0.31675655;0.61638838;0;3.434299e-11;0;0;0.68808103;0;
0.4948999;0;0;0;2.4696135e-07;1.1453742e-05;0.018155077;0;0.57487857;0;
0;0;1.8469966e-10;0;0;0;0;0;0.49052873;0.48365399;
0;0;0;3.1519053e-15;0.52735537;0;0.54338235;0.52236795;0.56548363;3.8875153e-15;
1.6938435e-11;5.5331476e-11;0;0.00014332587;0.0015978641;0;0;0;0;0.51424265;
0.7829836;0.57333302;9.1911366e-05;7.6948142e-11;0.77840978;1.7192583e-06;0.50622261;0.29279304;0;0;
0;0;0.7013669;0;0.36806512;7.5821566e-10;0;0;1.4906725e-06;6.4291481e-07;
0.056850333;0;0.6830247;4.705362e-12;2.0339352e-14;0;2.9125977e-10;0;0;0;
0;0;0.73908061;0.72086775;0;0;0;0;0.34152308;0;
0.53746229;0.46916956;0.53402501;6.4720293e-06;0.00052303757;9.8995793e-07;0;0.0075148013;0.49445343;0;
5.9425849e-07;0;0;6.0016126e-05;0.64516479;0.0077547738;0.71567678;6.713359e-07;0.73407435;0.00033549347;
0.0027852003;0.0046274858;9.8001146e-06;5.6613088e-09;1.9528863e-14;0;0.79416496;1.1922401e-05;8.6526734e-06;0.65715522;
0;0;1.1501348e-07;6.009273e-06;0.82442486;0;0.56749195;0;4.2044676e-06;0;
4.2167903e-06;0;0;0;0;0;0.65959054;0.48219538;0;0;
0;2.0565818e-05;0.00018156899;0;0.009720467;0.00074319728;0.032620091;0.53691483;0.78013706;0.6658597;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [40] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[4] {
    name="EpochTestOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_73";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [1000] 0;0;0;0;0;1;1;1;1;1;
2;2;2;2;2;3;3;3;3;3;
4;4;4;4;4;5;5;5;5;5;
6;6;6;6;6;7;7;7;7;7;
8;8;8;8;8;9;9;9;9;9;
10;10;10;10;10;11;11;11;11;11;
12;12;12;12;12;13;13;13;13;13;
14;14;14;14;14;15;15;15;15;15;
16;16;16;16;16;17;17;17;17;17;
18;18;18;18;18;19;19;19;19;19;
20;20;20;20;20;21;21;21;21;21;
22;22;22;22;22;23;23;23;23;23;
24;24;24;24;24;25;25;25;25;25;
26;26;26;26;26;27;27;27;27;27;
28;28;28;28;28;29;29;29;29;29;
30;30;30;30;30;31;31;31;31;31;
32;32;32;32;32;33;33;33;33;33;
34;34;34;34;34;35;35;35;35;35;
36;36;36;36;36;37;37;37;37;37;
38;38;38;38;38;39;39;39;39;39;
40;40;40;40;40;41;41;41;41;41;
42;42;42;42;42;43;43;43;43;43;
44;44;44;44;44;45;45;45;45;45;
46;46;46;46;46;47;47;47;47;47;
48;48;48;48;48;49;49;49;49;49;
50;50;50;50;50;51;51;51;51;51;
52;52;52;52;52;53;53;53;53;53;
54;54;54;54;54;55;55;55;55;55;
56;56;56;56;56;57;57;57;57;57;
58;58;58;58;58;59;59;59;59;59;
60;60;60;60;60;61;61;61;61;61;
62;62;62;62;62;63;63;63;63;63;
64;64;64;64;64;65;65;65;65;65;
66;66;66;66;66;67;67;67;67;67;
68;68;68;68;68;69;69;69;69;69;
70;70;70;70;70;71;71;71;71;71;
72;72;72;72;72;73;73;73;73;73;
74;74;74;74;74;75;75;75;75;75;
76;76;76;76;76;77;77;77;77;77;
78;78;78;78;78;79;79;79;79;79;
80;80;80;80;80;81;81;81;81;81;
82;82;82;82;82;83;83;83;83;83;
84;84;84;84;84;85;85;85;85;85;
86;86;86;86;86;87;87;87;87;87;
88;88;88;88;88;89;89;89;89;89;
90;90;90;90;90;91;91;91;91;91;
92;92;92;92;92;93;93;93;93;93;
94;94;94;94;94;95;95;95;95;95;
96;96;96;96;96;97;97;97;97;97;
98;98;98;98;98;99;99;99;99;99;
100;100;100;100;100;101;101;101;101;101;
102;102;102;102;102;103;103;103;103;103;
104;104;104;104;104;105;105;105;105;105;
106;106;106;106;106;107;107;107;107;107;
108;108;108;108;108;109;109;109;109;109;
110;110;110;110;110;111;111;111;111;111;
112;112;112;112;112;113;113;113;113;113;
114;114;114;114;114;115;115;115;115;115;
116;116;116;116;116;117;117;117;117;117;
118;118;118;118;118;119;119;119;119;119;
120;120;120;120;120;121;121;121;121;121;
122;122;122;122;122;123;123;123;123;123;
124;124;124;124;124;125;125;125;125;125;
126;126;126;126;126;127;127;127;127;127;
128;128;128;128;128;129;129;129;129;129;
130;130;130;130;130;131;131;131;131;131;
132;132;132;132;132;133;133;133;133;133;
134;134;134;134;134;135;135;135;135;135;
136;136;136;136;136;137;137;137;137;137;
138;138;138;138;138;139;139;139;139;139;
140;140;140;140;140;141;141;141;141;141;
142;142;142;142;142;143;143;143;143;143;
144;144;144;144;144;145;145;145;145;145;
146;146;146;146;146;147;147;147;147;147;
148;148;148;148;148;149;149;149;149;149;
150;150;150;150;150;151;151;151;151;151;
152;152;152;152;152;153;153;153;153;153;
154;154;154;154;154;155;155;155;155;155;
156;156;156;156;156;157;157;157;157;157;
158;158;158;158;158;159;159;159;159;159;
160;160;160;160;160;161;161;161;161;161;
162;162;162;162;162;163;163;163;163;163;
164;164;164;164;164;165;165;165;165;165;
166;166;166;166;166;167;167;167;167;167;
168;168;168;168;168;169;169;169;169;169;
170;170;170;170;170;171;171;171;171;171;
172;172;172;172;172;173;173;173;173;173;
174;174;174;174;174;175;175;175;175;175;
176;176;176;176;176;177;177;177;177;177;
178;178;178;178;178;179;179;179;179;179;
180;180;180;180;180;181;181;181;181;181;
182;182;182;182;182;183;183;183;183;183;
184;184;184;184;184;185;185;185;185;185;
186;186;186;186;186;187;187;187;187;187;
188;188;188;188;188;189;189;189;189;189;
190;190;190;190;190;191;191;191;191;191;
192;192;192;192;192;193;193;193;193;193;
194;194;194;194;194;195;195;195;195;195;
196;196;196;196;196;197;197;197;197;197;
198;198;198;198;198;199;199;199;199;199;
      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_74";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [1000] 9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [1000] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
540;541;542;543;544;545;546;547;548;549;
550;551;552;553;554;555;556;557;558;559;
560;561;562;563;564;565;566;567;568;569;
570;571;572;573;574;575;576;577;578;579;
580;581;582;583;584;585;586;587;588;589;
590;591;592;593;594;595;596;597;598;599;
600;601;602;603;604;605;606;607;608;609;
610;611;612;613;614;615;616;617;618;619;
620;621;622;623;624;625;626;627;628;629;
630;631;632;633;634;635;636;637;638;639;
640;641;642;643;644;645;646;647;648;649;
650;651;652;653;654;655;656;657;658;659;
660;661;662;663;664;665;666;667;668;669;
670;671;672;673;674;675;676;677;678;679;
680;681;682;683;684;685;686;687;688;689;
690;691;692;693;694;695;696;697;698;699;
700;701;702;703;704;705;706;707;708;709;
710;711;712;713;714;715;716;717;718;719;
720;721;722;723;724;725;726;727;728;729;
730;731;732;733;734;735;736;737;738;739;
740;741;742;743;744;745;746;747;748;749;
750;751;752;753;754;755;756;757;758;759;
760;761;762;763;764;765;766;767;768;769;
770;771;772;773;774;775;776;777;778;779;
780;781;782;783;784;785;786;787;788;789;
790;791;792;793;794;795;796;797;798;799;
800;801;802;803;804;805;806;807;808;809;
810;811;812;813;814;815;816;817;818;819;
820;821;822;823;824;825;826;827;828;829;
830;831;832;833;834;835;836;837;838;839;
840;841;842;843;844;845;846;847;848;849;
850;851;852;853;854;855;856;857;858;859;
860;861;862;863;864;865;866;867;868;869;
870;871;872;873;874;875;876;877;878;879;
880;881;882;883;884;885;886;887;888;889;
890;891;892;893;894;895;896;897;898;899;
900;901;902;903;904;905;906;907;908;909;
910;911;912;913;914;915;916;917;918;919;
920;921;922;923;924;925;926;927;928;929;
930;931;932;933;934;935;936;937;938;939;
940;941;942;943;944;945;946;947;948;949;
950;951;952;953;954;955;956;957;958;959;
960;961;962;963;964;965;966;967;968;969;
970;971;972;973;974;975;976;977;978;979;
980;981;982;983;984;985;986;987;988;989;
990;991;992;993;994;995;996;997;998;999;
    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[5] {
    name="SlotEpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="batch";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [150] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="epoch";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [150] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
      };
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [150] 2.609426;1.5287158;0.94249511;0.48676977;0.49306193;0.37589213;0.22162923;0.15045092;0.098839603;0.069785051;
0.040275149;0.12367451;0.14898865;0.090231419;0.051763557;0.01346948;0.025878498;0.062495299;0.025709555;0.024532722;
0.046221193;0.06486699;0.034697194;0.066911913;0.045079187;0.022268077;0.0090831276;0;0.058219515;0.020243179;
0;0;0;0.026876036;0.078507274;0.024057578;0.025878135;0.039981145;0;0.030203938;
0;0;0;0.048112631;0.035277847;0.060585894;0.027468793;0.059019186;0;0.026797961;
0.029995633;0;0.030120667;0;0;0;0.039029166;0.029313751;0.024244262;0.030620731;
0.030055888;0.028689075;0.030124823;0;0.029951459;0;0;0.0084460275;0.030114822;0;
0.055594206;0;0.025419526;0;0;0.059835032;0.029240351;0;0.030645989;0.044188287;
0.015625;0;0.029522544;0;0.058777574;0.015625;0.04689496;0;0.047569595;0.0576603;
0.075739093;0.058073852;0.028262205;0;0.0091422051;0.030090503;0.089898109;0.027465634;0;0.030228874;
0.050449409;0.0088469237;0.015625;0.0040623657;0.03002567;0.070793591;0;0.065503418;0;0.015625;
0.029735357;0;0.057514481;0.054229937;0.029810563;0;0.016069902;0;0.015625;0.029586993;
0;0;0.029640712;0;0.060021058;0.0063270549;0;0.0061437218;0.020969298;0.015625;
0.030226123;0.029247943;0;0.028826844;0;0.015625;0.044503827;0;0;0.030113773;
0.027190965;0.015625;0;0;0;0.015625;0.059461877;0.060366958;0.054282136;0;
      };
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [150] 63;54;43;29;28;20;13;10;7;5;
2;6;8;6;3;2;3;4;2;3;
5;4;3;3;3;1;1;0;2;1;
0;0;0;1;3;1;1;2;0;1;
0;0;0;2;2;2;1;2;0;1;
1;0;1;0;0;0;2;1;1;1;
1;1;1;0;1;0;0;1;1;0;
2;0;1;0;0;2;1;0;1;2;
1;0;1;0;2;1;2;0;2;2;
4;2;1;0;1;1;4;1;0;1;
2;1;1;1;1;4;0;3;0;1;
1;0;2;2;1;0;1;0;1;1;
0;0;1;0;2;1;0;1;2;1;
1;1;0;1;0;1;2;0;0;1;
1;1;0;0;0;1;2;2;2;0;
      };
     };
     float_Data @[4] {
      name="avg_ext_rew";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
      ar {
       name="ar";
      [150] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
     float_Data @[5] {
      name="avg_cycles";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
      ar {
       name="ar";
      [150] 33.15625;30.109375;30.359375;27.453125;26.921875;25;23.34375;22.875;21.296875;20.609375;
19.96875;19.984375;20.09375;19.46875;18.78125;18.6875;18.484375;18.609375;18.1875;18.65625;
18;18.1875;18.203125;17.640625;17.703125;17.6875;17.53125;17.5625;17.546875;17.296875;
17.234375;17.203125;17.4375;17.546875;17.8125;17.171875;17.5625;17.203125;16.921875;17.0625;
17;17.046875;17.25;17.765625;17.046875;17.046875;16.90625;17.09375;16.921875;16.84375;
16.90625;16.75;17.03125;16.921875;16.984375;17.46875;17.453125;17.09375;17.015625;16.90625;
16.75;16.9375;17.484375;16.796875;17.03125;16.828125;17.234375;18.140625;16.9375;16.84375;
16.921875;16.734375;17.015625;16.8125;16.78125;16.9375;16.953125;16.859375;17;17.25;
16.96875;16.8125;17.078125;17.0625;17.3125;17.296875;17.34375;17.03125;17.34375;17.25;
17.625;17.328125;17.109375;17.03125;17.1875;16.84375;17.65625;17.296875;17.09375;16.921875;
17.25;16.8125;16.921875;16.953125;16.84375;17.5625;16.703125;16.953125;16.859375;17.015625;
16.984375;16.640625;16.890625;17.40625;16.46875;16.546875;16.6875;16.40625;16.90625;16.765625;
16.5625;16.640625;16.734375;16.8125;16.96875;16.28125;16.296875;16.390625;16.890625;16.734375;
16.40625;16.96875;16.3125;16.625;16.359375;16.765625;16.8125;16.453125;16.40625;16.328125;
16.734375;16.796875;16.515625;16.46875;16.578125;16.5625;16.78125;16.8125;16.734375;16.546875;
      };
     };
     float_Data @[6] {
      name="epoch_time_tot";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       name="ar";
      [150] 0.54000002;0.38999999;0.40000001;0.38;0.49000001;0.36000001;0.34;0.33000001;0.31999999;0.31999999;
0.31;0.31;0.31;0.31;0.30000001;0.28999999;0.28999999;0.28999999;0.28999999;0.28999999;
0.28999999;0.30000001;0.30000001;0.28999999;0.28999999;0.28999999;0.28999999;0.28;0.40000001;0.28999999;
0.28999999;0.34999999;0.38999999;0.38999999;0.30000001;0.28999999;0.28999999;0.28999999;0.28999999;0.38999999;
0.28999999;0.38;0.30000001;0.36000001;0.28;0.28;0.28999999;0.28999999;0.28999999;0.28999999;
0.36000001;0.31;0.28999999;0.28999999;0.28999999;0.28999999;0.28999999;0.28999999;0.28;0.28;
0.28;0.28999999;0.28999999;0.28;0.28999999;0.28;0.28999999;0.30000001;0.28;0.28;
0.28;0.28;0.28999999;0.28999999;0.28999999;0.28;0.28999999;0.28;0.28;0.28;
0.28;0.28;0.28;0.28;0.28999999;0.28999999;0.28;0.28;0.28999999;0.28999999;
0.28999999;0.28999999;0.28999999;0.28;0.28;0.28999999;0.28999999;0.28;0.28;0.28;
0.28;0.28;0.28;0.28999999;0.28999999;0.28999999;0.28999999;0.28999999;0.28999999;0.28;
0.28;0.28;0.28999999;0.28999999;0.28;0.28;0.28;0.28;0.28999999;0.28;
0.28;0.28;0.28;0.28;0.28;0.28;0.28;0.28;0.28999999;0.28;
0.28;0.28;0.27000001;0.28;0.28;0.28;0.28;0.28;0.28;0.28;
0.28999999;0.28;0.28;0.28;0.28;0.28;0.28999999;0.30000001;13.1;0.38;
      };
     };
     float_Data @[7] {
      name="epoch_time_usr";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       name="ar";
      [150] 0.47;0.34999999;0.34999999;0.34;0.41999999;0.31;0.30000001;0.30000001;0.28;0.28;
0.28;0.27000001;0.27000001;0.27000001;0.25999999;0.25999999;0.25999999;0.25999999;0.25999999;0.25999999;
0.25;0.25999999;0.25999999;0.25;0.25999999;0.25;0.25;0.25999999;0.34;0.25;
0.25999999;0.30000001;0.31999999;0.34;0.25;0.25;0.25999999;0.25;0.25;0.34;
0.25;0.33000001;0.25999999;0.31;0.25999999;0.25;0.25;0.25;0.25;0.25;
0.30000001;0.28;0.25999999;0.25;0.25;0.25999999;0.25999999;0.25;0.25;0.25;
0.25;0.25;0.25999999;0.25;0.25;0.25;0.25;0.27000001;0.25;0.25;
0.25;0.25;0.25999999;0.25;0.25;0.25;0.25;0.25;0.25;0.25;
0.25;0.25;0.25;0.25999999;0.25999999;0.25999999;0.25999999;0.25;0.25;0.25;
0.25999999;0.25;0.25;0.25;0.25999999;0.25999999;0.25999999;0.25999999;0.25999999;0.25;
0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;
0.25;0.25;0.25;0.25;0.25;0.25;0.23999999;0.23999999;0.25;0.25;
0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.23999999;0.25;0.25;
0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;
0.25;0.25;0.23999999;0.25;0.25;0.25;0.25;0.25999999;1.95;0.33000001;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [150] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
 };
 programs {
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
  Program_Group @.gp[0] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   debug_mode=0;
   Program @[0] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][0].doc$$: };
    };
    name="LeabraBatch";
    short_nm="Batch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=.networks[0]$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=.data.gp[0][0]$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="batch";
      var_type=T_Int;
      int_val=200;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch counter";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="init_batch";
      var_type=T_Bool;
      bool_val=1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="initialize batch counter at start of run -- turn off if using \"parallel batch\" mode to run different batches on different processes";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="max_batch";
      var_type=T_Int;
      int_val=200;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="maximum number of batch runs to perform";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitbatch";
      desc="initializes local batch counter and batch field on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: batch";
      network_var=$.programs.gp[0][0].args[0]$;
      local_ctr_var=.programs.gp[0][0].vars[0]$$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     If @[0] {
      name="If_ifinitbatch";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (init_batch)";
      cond {
       expr="init_batch";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       NetCounterInit @[0] {
	name="NetCounterInit_NetCounterInitbatch";
	desc="initializes local batch counter and batch field on network";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Init: batch";
	network_var=$.programs.gp[0][0].args[0]$;
	local_ctr_var=$.programs.gp[0][0].vars[0]$;
	counter=Network::batch;
	update_after=0;
       };
      };
     };
     Else @[1] {
      name="Else_If_ifinitbatch";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="else";
      cond {
       expr=;
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MemberAssign @[0] {
	name="MemberAssign_networkbatchbatch";
	desc="just set directly to current batch value";
	flags=CAN_REVERT_TO_CODE;
	code_string="network.batch = batch";
	obj=$.programs.gp[0][0].args[0]$;
	path="batch";
	expr {
	 expr="batch";
	};
	update_after=0;
       };
      };
     };
     WhileLoop @[2] {
      name="WhileLoop_whilebatchmaxbatch";
      desc="the main loop over training runs";
      flags=CAN_REVERT_TO_CODE;
      code_string="while (batch < max_batch)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraTrainnetwo_utdatatruebatch";
	desc="run the training program -- sets the network and input_data args";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrain(network, input_data, true, batch)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="true";
	  };
	 };
	 ProgArg @[3] {
	  arg_type=int;
	  type="int";
	  name="batch";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="batch";
	  };
	 };
	};
	target=.programs.gp[0][1]$$;
	targ_ld_init="*LeabraTrain*";
       };
       NetCounterIncr @[1] {
	name="NetCounterIncr_NetCounterIncrbatch";
	desc="increment the local batch counter and copy to network";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: batch";
	network_var=$.programs.gp[0][0].args[0]$;
	local_ctr_var=$.programs.gp[0][0].vars[0]$;
	counter=Network::batch;
	update_after=0;
       };
      };
      test {
       expr="batch < max_batch";
      };
     };
    };
    step_prog=.programs.gp[0][2]$$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[1] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][1].doc$$: };
    };
    name="LeabraTrain";
    short_nm="Train";
    tags="Leabra, Std";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=RndSeed;
     el_def=0;
     RndSeed @[0] {
      name="rnd_seed";
      rnd_seed=282857728;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      completion_type=;
      object_val=.programs.gp[0][1].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="random seed that is used at start of training -- if OldSeed is called";
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="RndInitType";
      desc=;
      enums {
       name="enums";
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @[1] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
      };
      bits=0;
     };
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to train";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable with training patterns";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=1;
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="batch";
      var_type=T_Int;
      int_val=199;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="max_epoch";
      var_type=T_Int;
      int_val=10;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="maximum number of epochs to run";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch";
      var_type=T_Int;
      int_val=10;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current epoch -- local copy, which is used to update network's epoch counter";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      completion_type=;
      object_scope=NULL;
      hard_enum_type=Network::TrainMode;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="TRAIN = update weights (learn), TEST = just record network's responses but don't learn";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="rnd_init";
      var_type=T_DynEnum;
      completion_type=;
      object_scope=NULL;
      dyn_enum_val {
       user_data_=NULL;
       enum_type=.programs.gp[0][1].types[0]$$;
       value=1;
      };
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=-1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      completion_type=;
      object_val=.networks[0].train_time$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="records time used to train network (object lives on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[6] {
      name="output_table";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=.data.gp[1][2]$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[7] {
      name="test_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=.data.gp[0][1]$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[8] {
      name="fname";
      var_type=T_String;
      string_val="Foils_Python_LowInhib_batch199_epoch9_80cyc";
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[9] {
      name="fname_prefix";
      var_type=T_String;
      string_val="Python_";
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[10] {
      name="runtest";
      var_type=T_Bool;
      bool_val=1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      name="AssignExpr_nopromptsfalse";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="no_prompts = false";
      result_var=.programs.gp[0][1].args[2]$$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      name="MethodCall_networkCheckConfigfalse";
      desc="check network to make sure it is ready to be run";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->CheckConfig(false)";
      result_var=NULL;
      obj=.programs.gp[0][1].args[0]$$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     AssignExpr @[2] {
      name="AssignExpr_traintimernetworktraintime";
      desc="get our pointer to the network training time object";
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer = network.train_time";
      result_var=.programs.gp[0][1].vars[5]$$;
      expr {
       expr="network.train_time";
      };
     };
     If @[3] {
      name="If_ifrndinitOLDSEED";
      desc="initialize random seed (either old or new)";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (rnd_init == OLD_SEED)";
      cond {
       expr="rnd_init == OLD_SEED";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_rndseedOldSeed";
	desc="restore previous random seed (all runs produce same results)";
	flags=CAN_REVERT_TO_CODE;
	code_string="rnd_seed->OldSeed()";
	result_var=NULL;
	obj=.programs.gp[0][1].objs_vars[0]$$;
	method=RndSeed::OldSeed;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void OldSeed()";
	meth_desc=" restore current seed to random num generator";
       };
      };
     };
     Else @[4] {
      name="Else_If_ifrndinitOLDSEED";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="else";
      cond {
       expr=;
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_rndseedNewSeed";
	desc="new random numbers each time";
	flags=CAN_REVERT_TO_CODE;
	code_string="rnd_seed->NewSeed()";
	result_var=NULL;
	obj=$.programs.gp[0][1].objs_vars[0]$;
	method=RndSeed::NewSeed;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void NewSeed()";
	meth_desc=" set the seed to a new random value (based on time and process id)";
       };
      };
     };
     IfGuiPrompt @[5] {
      name="IfGuiPrompt_ifguiDoyouwantto_eNetworkWeights";
      desc="don't initialize weights without checking";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (gui && \"Do you want to Initialize Network Weights\")";
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name="yes_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkBuild";
	desc="do a build to get different projections each time";
	flags=NON_STD|CAN_REVERT_TO_CODE;
	code_string="network->Build()";
	result_var=NULL;
	obj=$.programs.gp[0][1].args[0]$;
	method=Network::Build;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Build()";
	meth_desc=" Build the network units and Connect them (calls CheckSpecs/BuildLayers/Units/Prjns and Connect)";
       };
       MethodCall @[1] {
	name="MethodCall_networkInitWeights";
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Init_Weights()";
	result_var=NULL;
	obj=$.programs.gp[0][1].args[0]$;
	method=Network::Init_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats";
       };
       PrintExpr @[2] {
	name="PrintExpr_Printnetworkname_ghtsInitialized";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print network.name << \" Weights Initialized\"";
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      name="AssignExpr_traintimernetworktraintime";
      desc="get our pointer to the network training time object";
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer = network.train_time";
      result_var=$.programs.gp[0][1].vars[5]$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      name="MethodCall_traintimerStartTimertrue";
      desc="start timer to keep track of how long it takes to run entire training run";
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.programs.gp[0][1].vars[5]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MemberAssign @[2] {
      name="MemberAssign_networktrainmodetrainmode";
      desc="set network's training mode to our local value";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.train_mode = train_mode";
      obj=$.programs.gp[0][1].args[0]$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     If @[3] {
      name="If_ifnoprompts";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (no_prompts)";
      cond {
       expr="no_prompts";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkBuild";
	desc="do a build to get different projections each time";
	flags=NON_STD|CAN_REVERT_TO_CODE;
	code_string="network->Build()";
	result_var=NULL;
	obj=$.programs.gp[0][1].args[0]$;
	method=Network::Build;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Build()";
	meth_desc=" Build the network units and Connect them (calls CheckSpecs/BuildLayers/Units/Prjns and Connect)";
       };
       MethodCall @[1] {
	name="MethodCall_networkInitWeights";
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Init_Weights()";
	result_var=NULL;
	obj=$.programs.gp[0][1].args[0]$;
	method=Network::Init_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats";
       };
       PrintExpr @[2] {
	name="PrintExpr_Printnetworkname_ghtsInitialized";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print network.name << \" Weights Initialized\"";
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[4] {
      name="AssignExpr_epochnetworkepoch";
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch = network.epoch";
      result_var=.programs.gp[0][1].vars[1]$$;
      expr {
       expr="network.epoch";
      };
     };
     WhileLoop @[5] {
      name="WhileLoop_whileepochmaxepoch";
      desc="main loop over epochs of training";
      flags=CAN_REVERT_TO_CODE;
      code_string="while (epoch < max_epoch)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraEpochnetworkinputdata";
	desc="run the epoch program (one epoch), passes our network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraEpoch(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=$.programs.gp[0][2]$;
	targ_ld_init="*LeabraEpoch*";
       };
       If @[1] {
	name="If_ifruntestepochmaxepoch1";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (runtest && epoch == max_epoch-1)";
	cond {
	 expr="runtest && epoch == max_epoch-1";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 MethodCall @[0] {
	  name="MethodCall_outputtableResetData";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="output_table->ResetData()";
	  result_var=NULL;
	  obj=.programs.gp[0][1].vars[6]$$;
	  method=DataTable::ResetData;
	  meth_args {
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	  };
	  meth_sig="void ResetData()";
	  meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
	 };
	 ProgramCall @[1] {
	  name="ProgramCall_LeabraEpochTestnetworktestdata10";
	  desc="record the initial response";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="LeabraEpochTest(network, test_data, 10)";
	  prog_args {
	   name="prog_args";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=LeabraNetwork;
	    type="LeabraNetwork*";
	    name="network";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="network";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="input_data";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="test_data";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=int;
	    type="int";
	    name="cycle_stop";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="10";
	    };
	   };
	  };
	  target=$.programs.gp[1][0]$;
	  targ_ld_init="*LeabraEpoch*";
	 };
	 AssignExpr @[2] {
	  name="AssignExpr_fnamefnameprefix";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname = fname_prefix";
	  result_var=.programs.gp[0][1].vars[8]$$;
	  expr {
	   expr="fname_prefix";
	  };
	 };
	 VarIncr @[3] {
	  name="VarIncr_fnamebatch";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += \"_batch\"";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="\"_batch\"";
	  };
	 };
	 VarIncr @[4] {
	  name="VarIncr_fnamebatch_1";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += batch";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="batch";
	  };
	 };
	 VarIncr @[5] {
	  name="VarIncr_fnameepoch";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += \"_epoch\"";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="\"_epoch\"";
	  };
	 };
	 VarIncr @[6] {
	  name="VarIncr_fnameepoch_1";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += epoch";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="epoch";
	  };
	 };
	 VarIncr @[7] {
	  name="VarIncr_fname10cyc";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += \"_10cyc\"";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="\"_10cyc\"";
	  };
	 };
	 MethodCall @[8] {
	  name="MethodCall_outputtableExportDatafname";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="output_table->ExportData(fname, , , )";
	  result_var=NULL;
	  obj=$.programs.gp[0][1].vars[6]$;
	  method=DataTable::ExportData;
	  meth_args {
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="fname";
	    required=0;
	    def_val="\"\"";
	    prev_expr=;
	    expr {
	     expr="fname";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable::Delimiters;
	    type="DataTable::Delimiters";
	    name="delim";
	    required=0;
	    def_val="DataTable::COMMA";
	    prev_expr=;
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[2] {
	    arg_type=bool;
	    type="bool";
	    name="quote_str";
	    required=0;
	    def_val="true";
	    prev_expr=;
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[3] {
	    arg_type=bool;
	    type="bool";
	    name="headers";
	    required=0;
	    def_val="true";
	    prev_expr=;
	    expr {
	     expr=;
	    };
	   };
	  };
	  meth_sig="void ExportData(taString& fname, DataTable::Delimiters delim = COMMA, bool quote_str = true, bool headers = true)";
	  meth_desc=" exports data with given delimiter and string quoting format options in a format suitable for importing into other applications (spreadsheets, etc) -- does NOT include the emergent native header/data row markers and extended header info, so is not good for loading back into emergent (use SaveData for that)";
	 };
	 MethodCall @[9] {
	  name="MethodCall_outputtableResetData_1";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="output_table->ResetData()";
	  result_var=NULL;
	  obj=$.programs.gp[0][1].vars[6]$;
	  method=DataTable::ResetData;
	  meth_args {
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	  };
	  meth_sig="void ResetData()";
	  meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
	 };
	 ProgramCall @[10] {
	  name="ProgramCall_LeabraEpochTestnetworktestdata20_1";
	  desc="record the initial response";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="LeabraEpochTest(network, test_data, 20)";
	  prog_args {
	   name="prog_args";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=LeabraNetwork;
	    type="LeabraNetwork*";
	    name="network";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="network";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="input_data";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="test_data";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=int;
	    type="int";
	    name="cycle_stop";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="20";
	    };
	   };
	  };
	  target=$.programs.gp[1][0]$;
	  targ_ld_init="*LeabraEpoch*";
	 };
	 AssignExpr @[11] {
	  name="AssignExpr_fnamefnameprefix_1";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname = fname_prefix";
	  result_var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="fname_prefix";
	  };
	 };
	 VarIncr @[12] {
	  name="VarIncr_fnamebatch";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += \"_batch\"";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="\"_batch\"";
	  };
	 };
	 VarIncr @[13] {
	  name="VarIncr_fnamebatch_2";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += batch";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="batch";
	  };
	 };
	 VarIncr @[14] {
	  name="VarIncr_fnameepoch";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += \"_epoch\"";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="\"_epoch\"";
	  };
	 };
	 VarIncr @[15] {
	  name="VarIncr_fnameepoch_2";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += epoch";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="epoch";
	  };
	 };
	 VarIncr @[16] {
	  name="VarIncr_fname20cyc";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += \"_20cyc\"";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="\"_20cyc\"";
	  };
	 };
	 MethodCall @[17] {
	  name="MethodCall_outputtableExportDatafname_1";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="output_table->ExportData(fname, , , )";
	  result_var=NULL;
	  obj=$.programs.gp[0][1].vars[6]$;
	  method=DataTable::ExportData;
	  meth_args {
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="fname";
	    required=0;
	    def_val="\"\"";
	    prev_expr=;
	    expr {
	     expr="fname";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable::Delimiters;
	    type="DataTable::Delimiters";
	    name="delim";
	    required=0;
	    def_val="DataTable::COMMA";
	    prev_expr=;
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[2] {
	    arg_type=bool;
	    type="bool";
	    name="quote_str";
	    required=0;
	    def_val="true";
	    prev_expr=;
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[3] {
	    arg_type=bool;
	    type="bool";
	    name="headers";
	    required=0;
	    def_val="true";
	    prev_expr=;
	    expr {
	     expr=;
	    };
	   };
	  };
	  meth_sig="void ExportData(taString& fname, DataTable::Delimiters delim = COMMA, bool quote_str = true, bool headers = true)";
	  meth_desc=" exports data with given delimiter and string quoting format options in a format suitable for importing into other applications (spreadsheets, etc) -- does NOT include the emergent native header/data row markers and extended header info, so is not good for loading back into emergent (use SaveData for that)";
	 };
	 MethodCall @[18] {
	  name="MethodCall_outputtableResetData";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="output_table->ResetData()";
	  result_var=NULL;
	  obj=$.programs.gp[0][1].vars[6]$;
	  method=DataTable::ResetData;
	  meth_args {
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	  };
	  meth_sig="void ResetData()";
	  meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
	 };
	 ProgramCall @[19] {
	  name="ProgramCall_LeabraEpochTestnetworktestdata40";
	  desc="record the initial response";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="LeabraEpochTest(network, test_data, 40)";
	  prog_args {
	   name="prog_args";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=LeabraNetwork;
	    type="LeabraNetwork*";
	    name="network";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="network";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="input_data";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="test_data";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=int;
	    type="int";
	    name="cycle_stop";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="40";
	    };
	   };
	  };
	  target=$.programs.gp[1][0]$;
	  targ_ld_init="*LeabraEpoch*";
	 };
	 AssignExpr @[20] {
	  name="AssignExpr_fnamefnameprefix";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname = fname_prefix";
	  result_var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="fname_prefix";
	  };
	 };
	 VarIncr @[21] {
	  name="VarIncr_fnamebatch_3";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += \"_batch\"";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="\"_batch\"";
	  };
	 };
	 VarIncr @[22] {
	  name="VarIncr_fnamebatch";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += batch";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="batch";
	  };
	 };
	 VarIncr @[23] {
	  name="VarIncr_fnameepoch_3";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += \"_epoch\"";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="\"_epoch\"";
	  };
	 };
	 VarIncr @[24] {
	  name="VarIncr_fnameepoch";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += epoch";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="epoch";
	  };
	 };
	 VarIncr @[25] {
	  name="VarIncr_fname40cyc";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += \"_40cyc\"";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="\"_40cyc\"";
	  };
	 };
	 MethodCall @[26] {
	  name="MethodCall_outputtableExportDatafname";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="output_table->ExportData(fname, , , )";
	  result_var=NULL;
	  obj=$.programs.gp[0][1].vars[6]$;
	  method=DataTable::ExportData;
	  meth_args {
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="fname";
	    required=0;
	    def_val="\"\"";
	    prev_expr=;
	    expr {
	     expr="fname";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable::Delimiters;
	    type="DataTable::Delimiters";
	    name="delim";
	    required=0;
	    def_val="DataTable::COMMA";
	    prev_expr=;
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[2] {
	    arg_type=bool;
	    type="bool";
	    name="quote_str";
	    required=0;
	    def_val="true";
	    prev_expr=;
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[3] {
	    arg_type=bool;
	    type="bool";
	    name="headers";
	    required=0;
	    def_val="true";
	    prev_expr=;
	    expr {
	     expr=;
	    };
	   };
	  };
	  meth_sig="void ExportData(taString& fname, DataTable::Delimiters delim = COMMA, bool quote_str = true, bool headers = true)";
	  meth_desc=" exports data with given delimiter and string quoting format options in a format suitable for importing into other applications (spreadsheets, etc) -- does NOT include the emergent native header/data row markers and extended header info, so is not good for loading back into emergent (use SaveData for that)";
	 };
	 MethodCall @[27] {
	  name="MethodCall_outputtableResetData_2";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="output_table->ResetData()";
	  result_var=NULL;
	  obj=$.programs.gp[0][1].vars[6]$;
	  method=DataTable::ResetData;
	  meth_args {
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	  };
	  meth_sig="void ResetData()";
	  meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
	 };
	 ProgramCall @[28] {
	  name="ProgramCall_LeabraEpochTestnetworktestdata60";
	  desc="record the settled response";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="LeabraEpochTest(network, test_data, 60)";
	  prog_args {
	   name="prog_args";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=LeabraNetwork;
	    type="LeabraNetwork*";
	    name="network";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="network";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="input_data";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="test_data";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=int;
	    type="int";
	    name="cycle_stop";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="60";
	    };
	   };
	  };
	  target=$.programs.gp[1][0]$;
	  targ_ld_init="*LeabraEpoch*";
	 };
	 AssignExpr @[29] {
	  name="AssignExpr_fnamefnameprefix_2";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname = fname_prefix";
	  result_var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="fname_prefix";
	  };
	 };
	 VarIncr @[30] {
	  name="VarIncr_fnamebatch_4";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += \"_batch\"";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="\"_batch\"";
	  };
	 };
	 VarIncr @[31] {
	  name="VarIncr_fnamebatch_1";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += batch";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="batch";
	  };
	 };
	 VarIncr @[32] {
	  name="VarIncr_fnameepoch_4";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += \"_epoch\"";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="\"_epoch\"";
	  };
	 };
	 VarIncr @[33] {
	  name="VarIncr_fnameepoch_1";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += epoch";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="epoch";
	  };
	 };
	 VarIncr @[34] {
	  name="VarIncr_fname60cyc";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += \"_60cyc\"";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="\"_60cyc\"";
	  };
	 };
	 MethodCall @[35] {
	  name="MethodCall_outputtableExportDatafname_2";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="output_table->ExportData(fname, , , )";
	  result_var=NULL;
	  obj=$.programs.gp[0][1].vars[6]$;
	  method=DataTable::ExportData;
	  meth_args {
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="fname";
	    required=0;
	    def_val="\"\"";
	    prev_expr=;
	    expr {
	     expr="fname";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable::Delimiters;
	    type="DataTable::Delimiters";
	    name="delim";
	    required=0;
	    def_val="DataTable::COMMA";
	    prev_expr=;
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[2] {
	    arg_type=bool;
	    type="bool";
	    name="quote_str";
	    required=0;
	    def_val="true";
	    prev_expr=;
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[3] {
	    arg_type=bool;
	    type="bool";
	    name="headers";
	    required=0;
	    def_val="true";
	    prev_expr=;
	    expr {
	     expr=;
	    };
	   };
	  };
	  meth_sig="void ExportData(taString& fname, DataTable::Delimiters delim = COMMA, bool quote_str = true, bool headers = true)";
	  meth_desc=" exports data with given delimiter and string quoting format options in a format suitable for importing into other applications (spreadsheets, etc) -- does NOT include the emergent native header/data row markers and extended header info, so is not good for loading back into emergent (use SaveData for that)";
	 };
	 MethodCall @[36] {
	  name="MethodCall_outputtableResetData";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="output_table->ResetData()";
	  result_var=NULL;
	  obj=$.programs.gp[0][1].vars[6]$;
	  method=DataTable::ResetData;
	  meth_args {
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	  };
	  meth_sig="void ResetData()";
	  meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
	 };
	 ProgramCall @[37] {
	  name="ProgramCall_LeabraEpochTestnetworktestdata80_1";
	  desc="record the settled response";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="LeabraEpochTest(network, test_data, 80)";
	  prog_args {
	   name="prog_args";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=LeabraNetwork;
	    type="LeabraNetwork*";
	    name="network";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="network";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="input_data";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="test_data";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=int;
	    type="int";
	    name="cycle_stop";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="80";
	    };
	   };
	  };
	  target=$.programs.gp[1][0]$;
	  targ_ld_init="*LeabraEpoch*";
	 };
	 AssignExpr @[38] {
	  name="AssignExpr_fnamefnameprefix_3";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname = fname_prefix";
	  result_var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="fname_prefix";
	  };
	 };
	 VarIncr @[39] {
	  name="VarIncr_fnamebatch_5";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += \"_batch\"";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="\"_batch\"";
	  };
	 };
	 VarIncr @[40] {
	  name="VarIncr_fnamebatch_6";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += batch";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="batch";
	  };
	 };
	 VarIncr @[41] {
	  name="VarIncr_fnameepoch_5";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += \"_epoch\"";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="\"_epoch\"";
	  };
	 };
	 VarIncr @[42] {
	  name="VarIncr_fnameepoch_6";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += epoch";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="epoch";
	  };
	 };
	 VarIncr @[43] {
	  name="VarIncr_fname80cyc";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="fname += \"_80cyc\"";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="\"_80cyc\"";
	  };
	 };
	 MethodCall @[44] {
	  name="MethodCall_outputtableExportDatafname_3";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="output_table->ExportData(fname, , , )";
	  result_var=NULL;
	  obj=$.programs.gp[0][1].vars[6]$;
	  method=DataTable::ExportData;
	  meth_args {
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="fname";
	    required=0;
	    def_val="\"\"";
	    prev_expr=;
	    expr {
	     expr="fname";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable::Delimiters;
	    type="DataTable::Delimiters";
	    name="delim";
	    required=0;
	    def_val="DataTable::COMMA";
	    prev_expr=;
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[2] {
	    arg_type=bool;
	    type="bool";
	    name="quote_str";
	    required=0;
	    def_val="true";
	    prev_expr=;
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[3] {
	    arg_type=bool;
	    type="bool";
	    name="headers";
	    required=0;
	    def_val="true";
	    prev_expr=;
	    expr {
	     expr=;
	    };
	   };
	  };
	  meth_sig="void ExportData(taString& fname, DataTable::Delimiters delim = COMMA, bool quote_str = true, bool headers = true)";
	  meth_desc=" exports data with given delimiter and string quoting format options in a format suitable for importing into other applications (spreadsheets, etc) -- does NOT include the emergent native header/data row markers and extended header info, so is not good for loading back into emergent (use SaveData for that)";
	 };
	};
       };
       NetCounterIncr @[2] {
	name="NetCounterIncr_NetCounterIncrepoch";
	desc="increment the epoch counter (locally and on network)";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: epoch";
	network_var=$.programs.gp[0][1].args[0]$;
	local_ctr_var=$.programs.gp[0][1].vars[1]$;
	counter=Network::epoch;
	update_after=1;
       };
       IfBreak @[3] {
	name="IfBreak_ifnetworkcnterrerrstopcritbreak";
	desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here instead)";
	flags=CAN_REVERT_TO_CODE;
	code_string="if(network.cnt_err <= err_stopcrit) break";
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	};
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     MethodCall @[6] {
      name="MethodCall_traintimerEndTimer";
      desc="stop the timer -- time elapsed is now recorded in this object, and can be displayed or recorded to a data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->EndTimer()";
      result_var=NULL;
      obj=$.programs.gp[0][1].vars[5]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
    };
    step_prog=$.programs.gp[0][2]$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[2] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][2].doc$$: };
    };
    name="LeabraEpoch";
    short_nm="Epoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      completion_type=;
      object_scope=NULL;
      hard_enum_type=DataLoop::Order;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=3;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=.data.gp[1][0]$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      completion_type=;
      object_val=.networks[0].epoch_time$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=4;
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="max_num_trials";
      var_type=T_Int;
      int_val=80;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=.programs.gp[0][2].args[0]$$;
      local_ctr_var=.programs.gp[0][2].vars[1]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.programs.gp[0][2].vars[3]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MemberAssign @[0] {
      name="MemberAssign_networktrainmodeNetworkTRAIN";
      desc="set back to training mode";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network.train_mode = Network::TRAIN";
      obj=$.programs.gp[0][2].args[0]$;
      path="train_mode";
      expr {
       expr="Network::TRAIN";
      };
      update_after=0;
     };
     NetCounterInit @[1] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=$.programs.gp[0][2].args[0]$;
      local_ctr_var=$.programs.gp[0][2].vars[1]$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[2] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.programs.gp[0][2].vars[3]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      name="MethodCall_epochtimerStartTimertrue";
      desc="start the epoch timer to record computation time per epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.programs.gp[0][2].vars[3]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[4] {
      name="MethodCall_trialmondataResetData";
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=.programs.gp[0][2].vars[2]$$;
      method=DataTable::ResetData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[5] {
      name="NetDataLoop_NetDataLoopPERMU_ardatalooporder";
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Data Loop (PERMUTED):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraTrialnetworkinputdata";
	desc="run the trial program, passing network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrial(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[0][3]$$;
	targ_ld_init="*LeabraTrial*";
       };
       If @[1] {
	name="If_ifdataloopindexmaxnumtrials";
	desc=;
	flags=NON_STD|CAN_REVERT_TO_CODE;
	code_string="if (data_loop_index ==  max_num_trials)";
	cond {
	 expr="data_loop_index ==  max_num_trials";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  name="AssignExpr_dataloopindex1000000";
	  desc="cut off epoch here";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="data_loop_index = 1000000";
	  result_var=.programs.gp[0][2].vars[4]$$;
	  expr {
	   expr="1000000";
	  };
	 };
	};
       };
      };
      data_var=.programs.gp[0][2].args[1]$$;
      index_var=$.programs.gp[0][2].vars[4]$;
      order_var=.programs.gp[0][2].vars[0]$$;
      order=PERMUTED;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[6] {
      name="If_ifnetworkwtupdateNetworkBATCH";
      desc="if full batch mode, update only at end of epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.wt_update == Network::BATCH)";
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="final update of weights based on accumulated changes";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.programs.gp[0][2].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkComputeStableWeights";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_StableWeights()";
      result_var=NULL;
      obj=$.programs.gp[0][2].args[0]$;
      method=LeabraNetwork::Compute_StableWeights;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_StableWeights()";
      meth_desc=" compute the stable weights for connections that have separate stable weights (see LeabraStableConSpec) -- simulates synaptic consolidation to gene-expression-dependent long term plasticity -- typically done after every epoch or multiple thereof";
     };
     MethodCall @[8] {
      name="MethodCall_networkComputeEpochStats";
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_EpochStats()";
      result_var=NULL;
      obj=$.programs.gp[0][2].args[0]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more compute epoch-level statistics, including SSE, AvgExtRew and AvgCycles";
     };
     MethodCall @[9] {
      name="MethodCall_networkComputeAvgAbsRelNetin";
      desc=;
      flags=NON_STD|CAN_REVERT_TO_CODE;
      code_string="network->Compute_AvgAbsRelNetin()";
      result_var=NULL;
      obj=$.programs.gp[0][2].args[0]$;
      method=LeabraNetwork::Compute_AvgAbsRelNetin;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_AvgAbsRelNetin()";
      meth_desc=" compute time-average absolute layer-level and relative netinput from different projections into layers in network (e.g. over epoch timescale)";
     };
     MethodCall @[10] {
      name="MethodCall_epochtimerEndTimer";
      desc="done with the computation in the epoch -- record time it took";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->EndTimer()";
      result_var=NULL;
      obj=$.programs.gp[0][2].vars[3]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[11] {
      name="ProgramCall_LeabraEpochMonitornetwork";
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraEpochMonitor(network)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[0][8]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[3] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][3].doc$$: };
    };
    name="LeabraTrial";
    short_nm="Trial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=2;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitphaseno";
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: phase_no";
      network_var=.programs.gp[0][3].args[0]$$;
      local_ctr_var=.programs.gp[0][3].vars[0]$$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitphaseno";
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: phase_no";
      network_var=$.programs.gp[0][3].args[0]$;
      local_ctr_var=$.programs.gp[0][3].vars[0]$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
     MethodCall @[1] {
      name="MethodCall_networkTrialInit";
      desc="initializes various counters at start of trial";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      result_var=NULL;
      obj=$.programs.gp[0][3].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (SetCurLrate, set phase_max, Decay state)";
     };
     WhileLoop @[2] {
      name="WhileLoop_whilephasenonetworkphasemax";
      desc="loop over phases of settling in the network";
      flags=CAN_REVERT_TO_CODE;
      code_string="while (phase_no < network.phase_max)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraSettlenetworkinputdata";
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraSettle(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[0][4]$$;
	targ_ld_init="*LeabraSettle*";
       };
       NetCounterIncr @[1] {
	name="NetCounterIncr_NetCounterIncrphaseno";
	desc="increment the phase number (also on network)";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: phase_no";
	network_var=$.programs.gp[0][3].args[0]$;
	local_ctr_var=$.programs.gp[0][3].vars[0]$;
	counter=LeabraNetwork::phase_no;
	update_after=0;
       };
       MethodCall @[2] {
	name="MethodCall_networkTrialUpdatePhase";
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Trial_UpdatePhase()";
	result_var=NULL;
	obj=$.programs.gp[0][3].args[0]$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Trial_UpdatePhase()";
	meth_desc=" update phase based on phase_no -- typically called by program in Trial loop over settling";
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[3] {
      name="MethodCall_networkTrialFinal";
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Final()";
      result_var=NULL;
      obj=$.programs.gp[0][3].args[0]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial (Compute_dWt, EncodeState)";
     };
     MethodCall @[4] {
      name="MethodCall_networkComputeAbsRelNetin";
      desc="special for adapting netin";
      flags=NON_STD|CAN_REVERT_TO_CODE;
      code_string="network->Compute_AbsRelNetin()";
      result_var=NULL;
      obj=$.programs.gp[0][3].args[0]$;
      method=LeabraNetwork::Compute_AbsRelNetin;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_AbsRelNetin()";
      meth_desc=" compute the absolute layer-level and relative netinput from different projections into layers in network";
     };
     If @[5] {
      name="If_ifnetworkCompute_stnetworktrial1";
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.Compute_Weights_Test(network.trial+1))";
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="update the weight values based on changes computed by trial program";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.programs.gp[0][3].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     ProgramCall @[6] {
      name="ProgramCall_LeabraTrialMonitornetwork";
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraTrialMonitor(network)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[0][7]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[7] {
      name="NetUpdateView_NetUpdateView";
      desc="update the network view(s) (only if update_net_view is true)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][3].args[0]$;
      update_var=.programs.gp[0][3].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[4] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][4].doc$$: };
    };
    name="LeabraSettle";
    short_nm="Settle";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=20;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=50;
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitcycle";
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=.programs.gp[0][4].args[0]$$;
      local_ctr_var=.programs.gp[0][4].vars[0]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitcycle";
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=$.programs.gp[0][4].args[0]$;
      local_ctr_var=$.programs.gp[0][4].vars[0]$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.programs.gp[0][4].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[2] {
      name="ProgramCall_ApplyInputsnetworkinputdata";
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=CAN_REVERT_TO_CODE;
      code_string="ApplyInputs(network, input_data)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.programs.gp[0][6]$$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[3] {
      name="MethodCall_networkSettleInit";
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Settle_Init()";
      result_var=NULL;
      obj=$.programs.gp[0][4].args[0]$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Settle_Init()";
      meth_desc=" initialize network for settle-level processing (decay, active k, hard clamp, netscale)";
     };
     If @[4] {
      name="If_ifnetworkphaseno1";
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.phase_no <= 1)";
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       AssignExpr @[0] {
	name="AssignExpr_mincyclesnetworkmincycles";
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=CAN_REVERT_TO_CODE;
	code_string="min_cycles = network.min_cycles";
	result_var=.programs.gp[0][4].vars[1]$$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
     };
     Else @[5] {
      name="Else_If_ifnetworkphaseno1";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="else";
      cond {
       expr=;
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       AssignExpr @[0] {
	name="AssignExpr_mincyclesnetworkmincyclesphase2";
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=CAN_REVERT_TO_CODE;
	code_string="min_cycles = network.min_cycles_phase2";
	result_var=$.programs.gp[0][4].vars[1]$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[6] {
      name="WhileLoop_whilecyclenetworkcyclemax";
      desc="the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="while (cycle < network.cycle_max)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraCyclenetwork";
	desc="run the cycle program, which computes one cycle of activations";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycle(network)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.programs.gp[0][5]$$;
	targ_ld_init="*LeabraCycle*";
       };
       NetCounterIncr @[1] {
	name="NetCounterIncr_NetCounterIncrcycle";
	desc="increment cycle counter (also on network)";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: cycle";
	network_var=$.programs.gp[0][4].args[0]$;
	local_ctr_var=$.programs.gp[0][4].vars[0]$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	name="IfContinue_ifcyclemincyclescontinue";
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=CAN_REVERT_TO_CODE;
	code_string="if(cycle < min_cycles) continue";
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	name="IfBreak_ifnetworkmaxdane_ctstopcritbreak";
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=CAN_REVERT_TO_CODE;
	code_string="if((network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)) break";
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkSettleFinal";
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Settle_Final()";
      result_var=NULL;
      obj=$.programs.gp[0][4].args[0]$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Settle_Final()";
      meth_desc=" do final processing after settling (postsettle, Compute_dWt if needed)";
     };
     If @[8] {
      name="If_ifnetworkphaseLe_tworkMINUSPHASE";
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.phase == LeabraNetwork::MINUS_PHASE)";
      cond {
       expr="network.phase == LeabraNetwork::MINUS_PHASE";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeTrialStats";
	desc="compute trial-level statistics";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_TrialStats()";
	result_var=NULL;
	obj=$.programs.gp[0][4].args[0]$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_TrialStats()";
	meth_desc=" compute trial-level statistics (SSE and others defined by specific algorithms) compute trial-level statistics, including SSE and minus cycles -- to be called at end of minus phase -- use Compute_TrialStats_Test() to determine when -- HOWEVER: it is much better to call Compute_PhaseStats(), which calls Compute_MinusStats() and Compute_PlustStats() separately at end of each phase (respectively) to get the appropriate stats at each point";
       };
      };
     };
     If @[9] {
      name="If_ifnetworkphaseno1_1";
      desc="this stat must be called in plus phase when reward information is avail";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.phase_no == 1)";
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeExtRew";
	desc="get external reward information";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_ExtRew()";
	result_var=NULL;
	obj=$.programs.gp[0][4].args[0]$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_ExtRew()";
	meth_desc=" compute external reward information: Must be called in plus phase (phase_no == 1)";
       };
      };
     };
     NetUpdateView @[10] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][4].args[0]$;
      update_var=.programs.gp[0][4].vars[2]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[5] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][5].doc$$: };
    };
    name="LeabraCycle";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_networkCycleRun";
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Cycle_Run()";
      result_var=NULL;
      obj=.programs.gp[0][5].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute one cycle of updating: netinput, inhibition, activations";
     };
     NetUpdateView @[1] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][5].args[0]$;
      update_var=.programs.gp[0][5].vars[0]$$;
     };
    };
    step_prog=NULL;
    step_n=10;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[6] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][6].doc$$: };
    };
    name="ApplyInputs";
    short_nm="AplyIn";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$.data.gp[0][0]$;
      network=$.networks[0]$;
      layer_data {
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	col_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	col_name="EC_out";
	net_target=LAYER;
	layer_name="EC_out";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="layer_writer_0";
      var_type=T_Object;
      object_type=LayerWriter;
      completion_type=;
      object_val=.programs.gp[0][6].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_layerwriter0SetD_nputdatanetwork";
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=.programs.gp[0][6].objs_vars[0]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      name="MethodCall_layerwriter0CheckConfigfalse";
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[0][6].objs_vars[0]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_layerwriter0SetD_nputdatanetwork";
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=$.programs.gp[0][6].objs_vars[0]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      name="MethodCall_layerwriter0ApplyInputData";
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->ApplyInputData()";
      result_var=NULL;
      obj=$.programs.gp[0][6].objs_vars[0]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool ApplyInputData()";
      meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[7] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][7].doc$$: };
    };
    name="LeabraTrialMonitor";
    short_nm="TrlMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="minus_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="avg_act";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="acts.avg";
	var_label="avg_act";
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=$.data.gp[1][0]$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      completion_type=;
      object_val=.programs.gp[0][7].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[1][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialnetmonSetDa_lmondatanetwork";
      desc="set the network and datatable for the NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[0][7].objs_vars[0]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonCheckConfigfalse";
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[0][7].objs_vars[0]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      name="MethodCall_trialnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[0][7].objs_vars[0]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[0][7].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonGetMonVals";
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[0][7].objs_vars[0]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      name="MethodCall_trialmondataWriteClose";
      desc="update views and other things after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[0][7].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      name="MethodCall_networkDMemShare_tatrialmondata1";
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      result_var=NULL;
      obj=.programs.gp[0][7].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[8] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][8].doc$$: };
    };
    name="LeabraEpochMonitor";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=.data.gp[1][1]$$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      completion_type=;
      object_val=.programs.gp[0][8].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[1][1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      completion_type=;
      object_val=$.networks[0].epoch_time$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.programs.gp[0][8].vars[1]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      name="MethodCall_epochnetmonSetDa_hmondatanetwork";
      desc="set data and network on NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[0][8].objs_vars[0]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[2] {
      name="MethodCall_epochnetmonCheckConfigfalse";
      desc="check configuration and emit errors/warnings for problems";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[0][8].objs_vars[0]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[3] {
      name="MethodCall_epochnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[0][8].objs_vars[0]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_epochmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[0][8].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_epochnetmonGetMonVals";
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[0][8].objs_vars[0]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     AssignExpr @[2] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.programs.gp[0][8].vars[1]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      name="MethodCall_epochmondataSetV_csepochtimetot1";
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\", -1, )";
      result_var=NULL;
      obj=$.programs.gp[0][8].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[4] {
      name="MethodCall_epochmondataSetV_csepochtimeusr1";
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\", -1, )";
      result_var=NULL;
      obj=$.programs.gp[0][8].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[5] {
      name="MethodCall_epochmondataWriteClose";
      desc="update after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[0][8].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[9] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][9].doc$$: };
    };
    name="SaveWeights";
    short_nm="SvWts";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=NULL;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="tag";
      var_type=T_String;
      string_val=;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided subdirectory to save weights in";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="fname";
      var_type=T_String;
      string_val=;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="final generated file name -- do not edit!";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="epoch_str";
      var_type=T_String;
      string_val="0036";
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of epoch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="batch_str";
      var_type=T_String;
      string_val="03";
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of batch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="final_tag";
      var_type=T_String;
      string_val=".03_0036";
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch + epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     If @[0] {
      name="If_iftaMiscdmemproc0";
      desc=;
      flags=0;
      code_string=;
      cond {
       expr="taMisc::dmem_proc > 0";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       ReturnExpr @[0] {
	name="ReturnExpr_return";
	desc=;
	flags=0;
	code_string=;
	expr {
	 expr=;
	};
       };
      };
     };
     MiscCall @[1] {
      name="MiscCall_batchstrtaMiscLe_osnetworkbatch2";
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=0;
      code_string=;
      result_var=.programs.gp[0][9].vars[4]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      name="MiscCall_epochstrtaMiscLe_osnetworkepoch4";
      desc="get current epoch counter with leading zeros to length 4";
      flags=0;
      code_string=;
      result_var=.programs.gp[0][9].vars[3]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      name="AssignExpr_finaltagtagbatchstrepochstr";
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=0;
      code_string=;
      result_var=.programs.gp[0][9].vars[5]$$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      name="MethodCall_fnamenetworkGetF_gwtssubdirfalse";
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=0;
      code_string=;
      result_var=.programs.gp[0][9].vars[2]$$;
      obj=.programs.gp[0][9].args[0]$$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ext";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
      meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
     };
     MethodCall @[5] {
      name="MethodCall_networkSaveWeigh_meNetworkNETFMT";
      desc="save the weights to that file name";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[0][9].args[0]$;
      method=Network::SaveWeights;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	prev_expr=;
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
      meth_sig="void SaveWeights(taString& fname, Network::WtSaveFormat fmt = NET_FMT)";
      meth_desc=" write weight values out in a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
  Program_Group @.gp[1] {
   name="LeabraAll_Test";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All, Test";
   desc="The full set of programs for testing a standard Leabra network (starting with Epoch)";
   debug_mode=0;
   Program @[0] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][0].doc$$: };
    };
    name="LeabraEpochTest";
    short_nm="EpcTst";
    tags="Leabra, Std, Test";
    desc="sets testing flag, iterates over all of the items in a data table and calls LeabraTestTrial process on them";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="cycle_stop";
      var_type=T_Int;
      int_val=80;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      completion_type=;
      object_scope=NULL;
      hard_enum_type=DataLoop::Order;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=39;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="low_inhib_test";
      var_type=T_Bool;
      bool_val=1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[3] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[1][2]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="last_trial_mon";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=.data.gp[1][3]$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      completion_type=;
      object_val=$.networks[0].epoch_time$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[6] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=40;
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
     ProgVar @[7] {
      name="ec_out_community";
      var_type=T_Object;
      object_type=ECoutLayerSpec;
      completion_type=;
      object_val=.networks[0].specs.gp[0][3].children[0]$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[8] {
      name="ec_out_community_slot";
      var_type=T_Object;
      object_type=ECoutLayerSpec;
      completion_type=;
      object_val=$.networks[0].specs.gp[0][3].children[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[9] {
      name="ec_in_community";
      var_type=T_Object;
      object_type=ECinLayerSpec;
      completion_type=;
      object_val=.networks[0].specs.gp[0][3].children[0].children[0]$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[10] {
      name="ec_in_community_slot";
      var_type=T_Object;
      object_type=ECinLayerSpec;
      completion_type=;
      object_val=$.networks[0].specs.gp[0][3].children[0].children[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=.programs.gp[1][0].args[0]$$;
      local_ctr_var=.programs.gp[1][0].vars[1]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.programs.gp[1][0].vars[5]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=$.programs.gp[1][0].args[0]$;
      local_ctr_var=$.programs.gp[1][0].vars[1]$;
      counter=Network::trial;
      update_after=0;
     };
     MemberAssign @[1] {
      name="MemberAssign_networktrainmodeNetworkTEST";
      desc="set to testing mode";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network.train_mode = Network::TEST";
      obj=$.programs.gp[1][0].args[0]$;
      path="train_mode";
      expr {
       expr="Network::TEST";
      };
      update_after=0;
     };
     If @[2] {
      name="If_iflowinhibtest";
      desc="allow more items to be active at test";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (low_inhib_test)";
      cond {
       expr="low_inhib_test";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MemberAssign @[0] {
	name="MemberAssign_ecincommunitykwtak16";
	desc=;
	flags=NEW_EL|CAN_REVERT_TO_CODE;
	code_string="ec_in_community.kwta.k = 16";
	obj=.programs.gp[1][0].vars[9]$$;
	path="kwta.k";
	expr {
	 expr="16";
	};
	update_after=0;
       };
       MemberAssign @[1] {
	name="MemberAssign_ecincommunityslotkwtak16";
	desc=;
	flags=NEW_EL|CAN_REVERT_TO_CODE;
	code_string="ec_in_community_slot.kwta.k = 16";
	obj=.programs.gp[1][0].vars[10]$$;
	path="kwta.k";
	expr {
	 expr="16";
	};
	update_after=1;
       };
       MemberAssign @[2] {
	name="MemberAssign_ecoutcommunitykwtak16";
	desc=;
	flags=NEW_EL|CAN_REVERT_TO_CODE;
	code_string="ec_out_community.kwta.k = 16";
	obj=.programs.gp[1][0].vars[7]$$;
	path="kwta.k";
	expr {
	 expr="16";
	};
	update_after=0;
       };
       MemberAssign @[3] {
	name="MemberAssign_ecoutcommunityslotkwtak16";
	desc=;
	flags=NEW_EL|CAN_REVERT_TO_CODE;
	code_string="ec_out_community_slot.kwta.k = 16";
	obj=.programs.gp[1][0].vars[8]$$;
	path="kwta.k";
	expr {
	 expr="16";
	};
	update_after=1;
       };
       MemberAssign @[4] {
	name="MemberAssign_ecincommunitykwtak16_1";
	desc=;
	flags=NEW_EL|CAN_REVERT_TO_CODE;
	code_string="ec_in_community.kwta.k = 16";
	obj=$.programs.gp[1][0].vars[9]$;
	path="kwta.k";
	expr {
	 expr="16";
	};
	update_after=0;
       };
       MemberAssign @[5] {
	name="MemberAssign_ecincommunityslotkwtak16_1";
	desc=;
	flags=NEW_EL|CAN_REVERT_TO_CODE;
	code_string="ec_in_community_slot.kwta.k = 16";
	obj=$.programs.gp[1][0].vars[10]$;
	path="kwta.k";
	expr {
	 expr="16";
	};
	update_after=0;
       };
       MemberAssign @[6] {
	name="MemberAssign_ecoutcommunitykwtak16_1";
	desc=;
	flags=NEW_EL|CAN_REVERT_TO_CODE;
	code_string="ec_out_community.kwta.k = 16";
	obj=$.programs.gp[1][0].vars[7]$;
	path="kwta.k";
	expr {
	 expr="16";
	};
	update_after=0;
       };
       MemberAssign @[7] {
	name="MemberAssign_ecoutcommunityslotkwtak16_1";
	desc=;
	flags=NEW_EL|CAN_REVERT_TO_CODE;
	code_string="ec_out_community_slot.kwta.k = 16";
	obj=$.programs.gp[1][0].vars[8]$;
	path="kwta.k";
	expr {
	 expr="16";
	};
	update_after=0;
       };
      };
     };
     AssignExpr @[3] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.programs.gp[1][0].vars[5]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[4] {
      name="MethodCall_epochtimerStartTimertrue";
      desc="start the epoch timer to record computation time per epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.programs.gp[1][0].vars[5]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[5] {
      name="MethodCall_lasttrialmonCopy_atatrialmondata";
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=CAN_REVERT_TO_CODE;
      code_string="last_trial_mon->Copy_NoData(trial_mon_data)";
      result_var=NULL;
      obj=.programs.gp[1][0].vars[4]$$;
      method=DataTable::Copy_NoData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_DataTable_ref;
	type="DataTable&";
	name="cp";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
      };
      meth_sig="void Copy_NoData(DataTable& cp)";
      meth_desc=" copy only the column structure, but no data, from other data table";
     };
     NetDataLoop @[6] {
      name="NetDataLoop_NetDataLoopSEQUE_ardatalooporder";
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Data Loop (SEQUENTIAL):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraTrialTestn_utdatacyclestop";
	desc="run the trial program, passing network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrialTest(network, input_data, cycle_stop)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="cycle_stop";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="cycle_stop";
	  };
	 };
	};
	target=.programs.gp[1][1]$$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=.programs.gp[1][0].args[1]$$;
      index_var=.programs.gp[1][0].vars[6]$$;
      order_var=.programs.gp[1][0].vars[0]$$;
      order=SEQUENTIAL;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[7] {
      name="If_ifnetworkwtupdateNetworkBATCH";
      desc="if full batch mode, update only at end of epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.wt_update == Network::BATCH)";
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="final update of weights based on accumulated changes";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.programs.gp[1][0].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[8] {
      name="MethodCall_networkComputeEpochStats";
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_EpochStats()";
      result_var=NULL;
      obj=$.programs.gp[1][0].args[0]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more compute epoch-level statistics, including SSE, AvgExtRew and AvgCycles";
     };
     MethodCall @[9] {
      name="MethodCall_networkComputeAvgAbsRelNetin";
      desc=;
      flags=NON_STD|CAN_REVERT_TO_CODE;
      code_string="network->Compute_AvgAbsRelNetin()";
      result_var=NULL;
      obj=$.programs.gp[1][0].args[0]$;
      method=LeabraNetwork::Compute_AvgAbsRelNetin;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_AvgAbsRelNetin()";
      meth_desc=" compute time-average absolute layer-level and relative netinput from different projections into layers in network (e.g. over epoch timescale)";
     };
     MethodCall @[10] {
      name="MethodCall_epochtimerEndTimer";
      desc="done with the computation in the epoch -- record time it took";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->EndTimer()";
      result_var=NULL;
      obj=$.programs.gp[1][0].vars[5]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[11] {
      name="ProgramCall_LeabraEpochMonitorTestnetwork";
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraEpochMonitorTest(network)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[1][6]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
     Comment @[12] {
      name="Comment_Setkvaluesbacktodefault";
      desc="Set k values back to default";
      flags=CAN_REVERT_TO_CODE;
      code_string="// Set k values back to default";
     };
     MemberAssign @[13] {
      name="MemberAssign_ecoutcommunityslotkwtak12";
      desc=;
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="ec_out_community_slot.kwta.k = 12";
      obj=$.programs.gp[1][0].vars[8]$;
      path="kwta.k";
      expr {
       expr="12";
      };
      update_after=1;
     };
     MemberAssign @[14] {
      name="MemberAssign_ecoutcommunitykwtak12";
      desc=;
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="ec_out_community.kwta.k = 12";
      obj=$.programs.gp[1][0].vars[7]$;
      path="kwta.k";
      expr {
       expr="12";
      };
      update_after=0;
     };
     MemberAssign @[15] {
      name="MemberAssign_ecincommunityslotkwtak12";
      desc=;
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="ec_in_community_slot.kwta.k = 12";
      obj=$.programs.gp[1][0].vars[10]$;
      path="kwta.k";
      expr {
       expr="12";
      };
      update_after=1;
     };
     MemberAssign @[16] {
      name="MemberAssign_ecincommunitykwtak12";
      desc=;
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="ec_in_community.kwta.k = 12";
      obj=$.programs.gp[1][0].vars[9]$;
      path="kwta.k";
      expr {
       expr="12";
      };
      update_after=0;
     };
     MemberAssign @[17] {
      name="MemberAssign_ecincommunitykwtak12_1";
      desc=;
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="ec_in_community.kwta.k = 12";
      obj=$.programs.gp[1][0].vars[9]$;
      path="kwta.k";
      expr {
       expr="12";
      };
      update_after=0;
     };
     MemberAssign @[18] {
      name="MemberAssign_ecincommunityslotkwtak12_1";
      desc=;
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="ec_in_community_slot.kwta.k = 12";
      obj=$.programs.gp[1][0].vars[10]$;
      path="kwta.k";
      expr {
       expr="12";
      };
      update_after=0;
     };
     MemberAssign @[19] {
      name="MemberAssign_ecoutcommunitykwtak12_1";
      desc=;
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="ec_out_community.kwta.k = 12";
      obj=$.programs.gp[1][0].vars[7]$;
      path="kwta.k";
      expr {
       expr="12";
      };
      update_after=0;
     };
     MemberAssign @[20] {
      name="MemberAssign_ecoutcommunityslotkwtak12_1";
      desc=;
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="ec_out_community_slot.kwta.k = 12";
      obj=$.programs.gp[1][0].vars[8]$;
      path="kwta.k";
      expr {
       expr="12";
      };
      update_after=0;
     };
     MemberAssign @[21] {
      name="MemberAssign_networktrainmodeNetworkTRAIN";
      desc="set back to training mode";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network.train_mode = Network::TRAIN";
      obj=$.programs.gp[1][0].args[0]$;
      path="train_mode";
      expr {
       expr="Network::TRAIN";
      };
      update_after=0;
     };
    };
    step_prog=$.programs.gp[1][1]$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[1] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][1].doc$$: };
    };
    name="LeabraTrialTest";
    short_nm="TrlTst";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="cycle_stop";
      var_type=T_Int;
      int_val=80;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitphaseno";
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: phase_no";
      network_var=.programs.gp[1][1].args[0]$$;
      local_ctr_var=.programs.gp[1][1].vars[0]$$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitphaseno";
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: phase_no";
      network_var=$.programs.gp[1][1].args[0]$;
      local_ctr_var=$.programs.gp[1][1].vars[0]$;
      counter=LeabraNetwork::phase_no;
      update_after=1;
     };
     MethodCall @[1] {
      name="MethodCall_networkTrialInit";
      desc="initializes various counters at start of trial";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      result_var=NULL;
      obj=$.programs.gp[1][1].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (SetCurLrate, set phase_max, Decay state)";
     };
     WhileLoop @[2] {
      name="WhileLoop_whilephasenonetworkphasemax";
      desc="loop over phases of settling in the network";
      flags=CAN_REVERT_TO_CODE;
      code_string="while (phase_no < network.phase_max)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraSettleTest_utdatacyclestop";
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraSettleTest(network, input_data, cycle_stop)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="cyc_stop";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="cycle_stop";
	  };
	 };
	};
	target=.programs.gp[1][2]$$;
	targ_ld_init="*LeabraSettle*";
       };
       NetCounterIncr @[1] {
	name="NetCounterIncr_NetCounterIncrphaseno";
	desc="increment the phase number (also on network)";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: phase_no";
	network_var=$.programs.gp[1][1].args[0]$;
	local_ctr_var=$.programs.gp[1][1].vars[0]$;
	counter=LeabraNetwork::phase_no;
	update_after=1;
       };
       MethodCall @[2] {
	name="MethodCall_networkTrialUpdatePhase";
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Trial_UpdatePhase()";
	result_var=NULL;
	obj=$.programs.gp[1][1].args[0]$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Trial_UpdatePhase()";
	meth_desc=" update phase based on phase_no -- typically called by program in Trial loop over settling";
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[3] {
      name="MethodCall_networkTrialFinal";
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Final()";
      result_var=NULL;
      obj=$.programs.gp[1][1].args[0]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial (Compute_dWt, EncodeState)";
     };
     MethodCall @[4] {
      name="MethodCall_networkComputeAbsRelNetin";
      desc="special for adapting netin";
      flags=NON_STD|CAN_REVERT_TO_CODE;
      code_string="network->Compute_AbsRelNetin()";
      result_var=NULL;
      obj=$.programs.gp[1][1].args[0]$;
      method=LeabraNetwork::Compute_AbsRelNetin;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_AbsRelNetin()";
      meth_desc=" compute the absolute layer-level and relative netinput from different projections into layers in network";
     };
     If @[5] {
      name="If_ifnetworkCompute_stnetworktrial1";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.Compute_Weights_Test(network.trial+1))";
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="update the weight values based on changes computed by trial program";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.programs.gp[1][1].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     ProgramCall @[6] {
      name="ProgramCall_LeabraTrialMonitorTestnetwork";
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraTrialMonitorTest(network)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[1][5]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[7] {
      name="NetUpdateView_NetUpdateView";
      desc="update the network view(s) (only if update_net_view is true)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[1][1].args[0]$;
      update_var=.programs.gp[1][1].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[2] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][2].doc$$: };
    };
    name="LeabraSettleTest";
    short_nm="SttTst";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[2] {
      name="cyc_stop";
      var_type=T_Int;
      int_val=80;
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=80;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=50;
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitcycle";
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=.programs.gp[1][2].args[0]$$;
      local_ctr_var=.programs.gp[1][2].vars[0]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitcycle";
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=$.programs.gp[1][2].args[0]$;
      local_ctr_var=$.programs.gp[1][2].vars[0]$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.programs.gp[1][2].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[2] {
      name="ProgramCall_ApplyInputsTestnetworkinputdata";
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=CAN_REVERT_TO_CODE;
      code_string="ApplyInputsTest(network, input_data)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.programs.gp[1][4]$$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[3] {
      name="MethodCall_networkSettleInit";
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Settle_Init()";
      result_var=NULL;
      obj=$.programs.gp[1][2].args[0]$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Settle_Init()";
      meth_desc=" initialize network for settle-level processing (decay, active k, hard clamp, netscale)";
     };
     If @[4] {
      name="If_ifnetworkphaseno1";
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.phase_no <= 1)";
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       AssignExpr @[0] {
	name="AssignExpr_mincyclesnetworkmincycles";
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=CAN_REVERT_TO_CODE;
	code_string="min_cycles = network.min_cycles";
	result_var=.programs.gp[1][2].vars[1]$$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
     };
     Else @[5] {
      name="Else_If_ifnetworkphaseno1";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="else";
      cond {
       expr=;
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       AssignExpr @[0] {
	name="AssignExpr_mincyclesnetworkmincyclesphase2";
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=CAN_REVERT_TO_CODE;
	code_string="min_cycles = network.min_cycles_phase2";
	result_var=$.programs.gp[1][2].vars[1]$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[6] {
      name="WhileLoop_whilecyclecycstop";
      desc="the main loop over cycles of updating";
      flags=NON_STD|CAN_REVERT_TO_CODE;
      code_string="while (cycle <  cyc_stop)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraCycleTestnetwork";
	desc="run the cycle program, which computes one cycle of activations";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycleTest(network)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.programs.gp[1][3]$$;
	targ_ld_init="*LeabraCycle*";
       };
       NetCounterIncr @[1] {
	name="NetCounterIncr_NetCounterIncrcycle";
	desc="increment cycle counter (also on network)";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: cycle";
	network_var=$.programs.gp[1][2].args[0]$;
	local_ctr_var=$.programs.gp[1][2].vars[0]$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	name="IfContinue_ifcyclemincyclescontinue";
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=CAN_REVERT_TO_CODE;
	code_string="if(cycle < min_cycles) continue";
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	name="IfBreak_ifnetworkmaxdane_ctstopcritbreak";
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=CAN_REVERT_TO_CODE;
	code_string="if((network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)) break";
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle <  cyc_stop";
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkSettleFinal";
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Settle_Final()";
      result_var=NULL;
      obj=$.programs.gp[1][2].args[0]$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Settle_Final()";
      meth_desc=" do final processing after settling (postsettle, Compute_dWt if needed)";
     };
     MethodCall @[8] {
      name="MethodCall_networkComputeTrialStats";
      desc="compute trial-level statistics";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_TrialStats()";
      result_var=NULL;
      obj=$.programs.gp[1][2].args[0]$;
      method=LeabraNetwork::Compute_TrialStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_TrialStats()";
      meth_desc=" compute trial-level statistics (SSE and others defined by specific algorithms) compute trial-level statistics, including SSE and minus cycles -- to be called at end of minus phase -- use Compute_TrialStats_Test() to determine when -- HOWEVER: it is much better to call Compute_PhaseStats(), which calls Compute_MinusStats() and Compute_PlustStats() separately at end of each phase (respectively) to get the appropriate stats at each point";
     };
     If @[9] {
      name="If_ifnetworkphaseLe_tworkMINUSPHASE";
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=OFF;
      code_string=;
      cond {
       expr="network.phase == LeabraNetwork::MINUS_PHASE";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
      };
     };
     If @[10] {
      name="If_ifnetworkphaseno1_1";
      desc="this stat must be called in plus phase when reward information is avail";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.phase_no == 1)";
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeExtRew";
	desc="get external reward information";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_ExtRew()";
	result_var=NULL;
	obj=$.programs.gp[1][2].args[0]$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_ExtRew()";
	meth_desc=" compute external reward information: Must be called in plus phase (phase_no == 1)";
       };
      };
     };
     NetUpdateView @[11] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[1][2].args[0]$;
      update_var=.programs.gp[1][2].vars[2]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[3] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][3].doc$$: };
    };
    name="LeabraCycleTest";
    short_nm="CycTst";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_networkCycleRun";
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Cycle_Run()";
      result_var=NULL;
      obj=.programs.gp[1][3].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute one cycle of updating: netinput, inhibition, activations";
     };
     NetUpdateView @[1] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[1][3].args[0]$;
      update_var=.programs.gp[1][3].vars[0]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[4] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][4].doc$$: };
    };
    name="ApplyInputsTest";
    short_nm="AplyIn";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$.data.gp[0][1]$;
      network=$.networks[0]$;
      layer_data {
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	col_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	col_name="EC_out";
	net_target=LAYER;
	layer_name="EC_out";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="layer_writer_0";
      var_type=T_Object;
      object_type=LayerWriter;
      completion_type=;
      object_val=.programs.gp[1][4].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="group_name";
      var_type=T_String;
      string_val="d";
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_layerwriter0SetD_nputdatanetwork";
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=.programs.gp[1][4].objs_vars[0]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      name="MethodCall_layerwriter0CheckConfigfalse";
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[1][4].objs_vars[0]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_layerwriter0SetD_nputdatanetwork";
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=$.programs.gp[1][4].objs_vars[0]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      name="MethodCall_layerwriter0ApplyInputData";
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->ApplyInputData()";
      result_var=NULL;
      obj=$.programs.gp[1][4].objs_vars[0]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool ApplyInputData()";
      meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
     };
     AssignExpr @[2] {
      name="AssignExpr_groupnamenetworktrialnamebefore";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="group_name = network.trial_name.before(\"_\")";
      result_var=.programs.gp[1][4].vars[0]$$;
      expr {
       expr="network.trial_name.before(\"_\")";
      };
     };
     MemberAssign @[3] {
      name="MemberAssign_networkgroupnamegroupname";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network.group_name = group_name";
      obj=.programs.gp[1][4].args[0]$$;
      path="group_name";
      expr {
       expr="group_name";
      };
      update_after=0;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[5] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][5].doc$$: };
    };
    name="LeabraTrialMonitorTest";
    short_nm="TrlMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="minus_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="DG_act";
	computed=0;
	object_type=LeabraLayer;
	object=.networks[0].layers.gp[0][2]$$;
	variable="act";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="CA3_act";
	computed=0;
	object_type=LeabraLayer;
	object=.networks[0].layers.gp[0][3]$$;
	variable="act";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="CA1_act";
	computed=0;
	object_type=LeabraLayer;
	object=.networks[0].layers.gp[0][4]$$;
	variable="act";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="EC_in_act";
	computed=0;
	object_type=LeabraLayer;
	object=.networks[0].layers.gp[0][0]$$;
	variable="act";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="EC_out_act";
	computed=0;
	object_type=LeabraLayer;
	object=.networks[0].layers.gp[0][1]$$;
	variable="act";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=$.data.gp[1][2]$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      completion_type=;
      object_val=.programs.gp[1][5].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[1][2]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="last_trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[1][3]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="just the last epoch of data";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialnetmonSetDa_lmondatanetwork";
      desc="set the network and datatable for the NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[1][5].objs_vars[0]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonCheckConfigfalse";
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[1][5].objs_vars[0]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      name="MethodCall_trialnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[1][5].objs_vars[0]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[1][5].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonGetMonVals";
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[1][5].objs_vars[0]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      name="MethodCall_trialmondataWriteClose";
      desc="update views and other things after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[1][5].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      name="MethodCall_networkDMemShare_tatrialmondata1";
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      result_var=NULL;
      obj=.programs.gp[1][5].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
     AddNewDataRow @[4] {
      name="AddNewDataRow_AddNewRowtablelasttrialmondata";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Add New Row:  table = last_trial_mon_data ";
      data_var=.programs.gp[1][5].vars[1]$$;
     };
     MethodCall @[5] {
      name="MethodCall_lasttrialmondata_ialmondatarows1";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="last_trial_mon_data->CopyFromRow(last_trial_mon_data.rows-1, trial_mon_data, trial_mon_data.rows-1)";
      result_var=NULL;
      obj=$.programs.gp[1][5].vars[1]$;
      method=DataTable::CopyFromRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="dest_row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="last_trial_mon_data.rows-1";
	};
       };
       ProgArg @[1] {
	arg_type=const_DataTable_ref;
	type="DataTable&";
	name="cp";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="src_row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data.rows-1";
	};
       };
      };
      meth_sig="void CopyFromRow(int dest_row, DataTable& cp, int src_row)";
      meth_desc=" copy one row from source to given row in this object: source must have exact same column structure as this!!";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[6] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][6].doc$$: };
    };
    name="LeabraEpochMonitorTest";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=.data.gp[1][4]$$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      completion_type=;
      object_val=.programs.gp[1][6].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[1][4]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_epochnetmonSetDa_hmondatanetwork";
      desc="set data and network on NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[1][6].objs_vars[0]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      name="MethodCall_epochnetmonCheckConfigfalse";
      desc="check configuration and emit errors/warnings for problems";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[1][6].objs_vars[0]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      name="MethodCall_epochnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[1][6].objs_vars[0]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_epochmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[1][6].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_epochnetmonGetMonVals";
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[1][6].objs_vars[0]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      name="MethodCall_epochmondataWriteClose";
      desc="update after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[1][6].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
 };
 viewers {
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="view_win_lft": value=-0.004166667: val_type_fixed=0: };
    UserDataItem @[1] {name="view_win_top": value=-0.007692308: val_type_fixed=0: };
    UserDataItem @[2] {name="view_win_wd": value=1.007813: val_type_fixed=0: };
    UserDataItem @[3] {name="view_win_ht": value=1.015385: val_type_fixed=0: };
    UserDataItem @[4] {name="view_win_iconified": value=0: val_type_fixed=0: };
    UserDataItem @[5] {name="view_splitter_state": value=AAAA/wAAAAEAAAADAAABrQAAAg4AAANhAQAAAAYBAAAAAQE=: val_type_fixed=0: };
   };
   name="Browser3";
   m_data=.$$;
   cur_font_size=10;
   visible=1;
   win_name=".projects[\"Frank_etal_ExpectationHPC\"] - Frank_etal_ExpectationHPC.proj [*]";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   revert_to_tab_no=-1;
   toolbars {
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_win_visible": value=0: val_type_fixed=0: };
     };
     name="Application";
     m_data=NULL;
     cur_font_size=10;
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @[0] {
     name="Navigator";
     m_data=NULL;
     cur_font_size=10;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.$;
    };
    PanelViewer @[1] {
     name="Editor";
     m_data=NULL;
     cur_font_size=10;
     visible=1;
    };
    T3PanelViewer @[2] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_117";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_panel_selected": value=1: val_type_fixed=0: };
     };
     name="Visualizer";
     m_data=NULL;
     cur_font_size=10;
     visible=1;
     panels {
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @[0] {
       name="SLnet_54";
       m_data=NULL;
       cur_font_size=10;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=10;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 NetView @[0] {
	  name="HPC_54_View";
	  m_data=$.networks[0]$;
	  cur_font_size=10;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=1;
	  net_text=1;
	  show_iconified=0;
	  net_text_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=1: y=0: z=0: rot=1.570796: }: translate={x=1: y=0: z=-0.5: }: };
	  net_text_rot=-90;
	  cur_unit_vals{ act;	  };
	  unit_src_path=".layers.gp[0][4].units[0]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=27: y=54: z=2.333333: };
	  max_size2d {x=30: y=193: z=1: };
	  eff_max_size {x=27: y=54: z=2.333333: };
	  font_sizes {net_name=0.05: net_vals=0.05: layer=0.04: layer_min=0.01: layer_vals=0.03: prjn=0.01: unit=0.02: un_nm_len=3: };
	  view_params {xy_square=0: unit_spacing=0.05: prjn_disp=L_R_B: prjn_name=0: prjn_width=0.002: prjn_trans=0.5: lay_trans=0.5: unit_trans=0.4: laygp_width=1: show_laygp=1: };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.8;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Input=-1;EC_in=-1;EC_out=-1;DG=-1;CA3=-1;CA1=-1;	  };
	 };
	};
       };
       fix_name=0;
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.7732408: y=0.5403823: z=2.62544: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.953804;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_win_lft": value=0: val_type_fixed=0: };
      UserDataItem @[1] {name="view_win_top": value=0.02115385: val_type_fixed=0: };
      UserDataItem @[2] {name="view_win_wd": value=0.04375: val_type_fixed=0: };
      UserDataItem @[3] {name="view_win_ht": value=0.9375: val_type_fixed=0: };
      UserDataItem @[4] {name="view_win_iconified": value=0: val_type_fixed=0: };
      UserDataItem @[5] {name="view_visible": value=1: val_type_fixed=0: };
     };
     name="Tools";
     m_data=NULL;
     cur_font_size=10;
     visible=1;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc=;
 tree_state{ .;.patches;.docs;.wizards;.ctrl_panels;.active_params;.data;.data.gp[0];.data.gp[1];.data.gp[2];.programs;.programs.break_points;.programs.gp[0];.programs.gp[1];.programs.gp[1][0].vars;.programs.gp[1][0].prog_code;.networks;.networks[0].specs;.networks[0].specs.gp[0];.networks[0].specs.gp[0][2];.networks[0].specs.gp[0][3];.networks[0].specs.gp[0].gp[0];.networks[0].layers;.networks[0].layers.gp[0];.networks[0].weights; };
 networks {
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="trial_cos_diff": value=1: val_type_fixed=1: };
    UserDataItem @[1] {name="avg_act_diff": value=1: val_type_fixed=1: };
    UserDataItem @[2] {name="cos_diff": value=1: val_type_fixed=1: };
    UserDataItem @[3] {name="cos_err": value=1: val_type_fixed=1: };
    UserDataItem @[4] {name="norm_err": value=0: val_type_fixed=1: };
    UserDataItem @[5] {name="ext_rew": value=0: val_type_fixed=1: };
    UserDataItem @[6] {name="maxda": value=0: val_type_fixed=1: };
    UserDataItem @[7] {name="minus_output_name": value=0: val_type_fixed=1: };
    UserDataItem @[8] {name="minus_cycles": value=1: val_type_fixed=1: };
    UserDataItem @[9] {name="ct_cycle": value=1: val_type_fixed=1: };
    UserDataItem @[10] {name="phase_no": value=0: val_type_fixed=1: };
    UserDataItem @[11] {name="phase": value=0: val_type_fixed=1: };
    UserDataItem @[12] {name="sse": value=0: val_type_fixed=1: };
    UserDataItem @[13] {name="output_name": value=0: val_type_fixed=1: };
    UserDataItem @[14] {name="trial_name": value=1: val_type_fixed=1: };
    UserDataItem @[15] {name="group_name": value=0: val_type_fixed=1: };
    UserDataItem @[16] {name="time": value=0: val_type_fixed=1: };
    UserDataItem @[17] {name="cycle": value=0: val_type_fixed=1: };
    UserDataItem @[18] {name="tick": value=0: val_type_fixed=1: };
    UserDataItem @[19] {name="trial": value=1: val_type_fixed=1: };
    UserDataItem @[20] {name="group": value=0: val_type_fixed=1: };
    UserDataItem @[21] {name="epoch": value=1: val_type_fixed=1: };
    UserDataItem @[22] {name="batch": value=0: val_type_fixed=1: };
   };
   name="HPC_54";
   desc=;
   specs {
    name="specs";
    el_typ=BaseSpec;
    el_def=0;
    LeabraLayerSpec @[0] {
     name="Input_Output";
     desc=;
     unique{ inhib_group;gp_kwta;     };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {type=KWTA_INHIB: kwta_pt=0.25: gi=2: ff=1: fb=0.5: self_fb=0: prv_trl_ff=0: prv_phs_ff=0: dt=0.7: up_immed=0: ff0=0.1: min_i=0: };
     kwta {k_from=USE_K: k=2: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     gp_kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
     lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
     decay {event=1: phase=0: phase2=0: };
     cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
     ct_inhib_mod {manual_sravg=0: sravg_delay=0: use_sin=0: burst_i=0.02: trough_i=0.02: use_fin=0: inhib_i=0: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     abs_net_adapt {on=0: trg_net=0.5: tol=0.1: abs_lrate=0.1: };
    };
    BaseSpec_Group @.gp[0] {
     name="HippoSpecs";
     el_typ=LeabraUnitSpec;
     el_def=0;
     LeabraUnitSpec @[0] {
      name="HippoUnitSpec";
      desc=;
      unique{       };
      children {
       name="children";
       el_typ=LeabraUnitSpec;
       el_def=0;
      };
      act_range {min=0: max=1: range=1: scale=1: };
      bias_con_type=LeabraCon;
      bias_spec {type=LeabraBiasSpec: spec=.networks[0].specs.gp[0][2].children[0]$$: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {gelin=1: thr=0.5: gain=100: nvar=0.005: avg_dt=0.005: avg_init=0.15: rescale_ctxt=1: i_thr=STD: };
      act_lrn_on=0;
      act_lrn {gelin=1: thr=0.5: gain=100: nvar=0.005: };
      spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_dt=0.02: };
      spike_misc {exp_slope=0.02: spk_thr=1.2: clamp_max_p=0.12: clamp_type=REGULAR: vm_r=0.3: t_r=6: vm_dend=0.3: vm_dend_dt=0.16: vm_dend_time=6.25: };
      opt_thresh {send=0.1: delta=0.005: phase_dif=0: xcal_lrn=0.01: };
      maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
      clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {min=0: max=2: range=2: scale=0.5: };
      v_m_init {name="v_m_init": type=NONE: mean=0.300000011920929: var=0: par=1: };
      act_init {name="act_init": type=NONE: mean=0: var=0: par=1: };
      dt {integ=1: vm=0.3: net=0.7: midpoint=0: d_vm_max=100: vm_eq_cyc=0: vm_eq_dt=1: integ_time=1: vm_time=3.333333: net_time=1.428571: };
      act_avg {l_up_add=1: l_dn_pct=1: l_up_dt=0.25: l_dn_dt=0.4: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=2.5: m_time=10: s_time=5: ss_time=1: };
      g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
      e_rev {e=1: l=0.3: i=0.25: h=1: a=0: };
      hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
      acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
      adapt {on=0: dt=0.007: vm_gain=0.04: spike_gain=0.00805: interval=10: trials=0: dt_time=142.8571: };
      depress {phase_act=ACT_ND: on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: delay=0: interval=10: trials=0: max_amp=1: };
      syn_delay {on=0: delay=4: };
      cifer {on=0: phase_updt=0: super_gain=0.05: thal_5b_thr=0.5: act_5b_thr=0.5: binary5b=0: ti_5b=0.5: bg_lrate=1: fg_lrate=0: };
      da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
      noise_type=NO_NOISE;
      noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
      noise_adapt {trial_fixed=1: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
      noise_sched {
       name="noise_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=1;
      };
     };
     HippoEncoderConSpec @[1] {
      name="EC_CA1ConSpecs";
      desc=;
      unique{ lmix;wt_sig;rel_net_adapt;      };
      children {
       name="children";
       el_typ=HippoEncoderConSpec;
       el_def=0;
       HippoEncoderConSpec @[0] {
	name="EC_in_CA1";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=3: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.02;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {on=0: trg_fm_input=0.85: trg_fm_output=0.15: trg_lateral=0: trg_sum=1: tol_lg=0.05: tol_sm=0.2: rel_lrate=0.2: };
       };
       HippoEncoderConSpec @[1] {
	name="CA1_EC_out";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;rnd;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.02;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {on=0: trg_fm_input=0.85: trg_fm_output=0.15: trg_lateral=0: trg_sum=1: tol_lg=0.05: tol_sm=0.2: rel_lrate=0.2: };
       };
       HippoEncoderConSpec @[2] {
	name="EC_out_CA1";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.02;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {on=0: trg_fm_input=0.85: trg_fm_output=0.15: trg_lateral=0: trg_sum=1: tol_lg=0.05: tol_sm=0.2: rel_lrate=0.2: };
       };
       HippoEncoderConSpec @[3] {
	name="EC_in_EC_out";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;rnd;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.9: var=0.01: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=0: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0.02;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {on=0: trg_fm_input=0.85: trg_fm_output=0.15: trg_lateral=0: trg_sum=1: tol_lg=0.05: tol_sm=0.2: rel_lrate=0.2: };
       };
       HippoEncoderConSpec @[4] {
	name="EC_out_EC_in";
	desc=;
	unique{ lmix;wt_sig;rel_net_adapt;lrate;wt_scale;rnd;	};
	children {
	 name="children";
	 el_typ=HippoEncoderConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.01: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=2: rel=0.5: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {on=0: trg_fm_input=0.85: trg_fm_output=0.15: trg_lateral=0: trg_sum=1: tol_lg=0.05: tol_sm=0.2: rel_lrate=0.2: };
       };
       LeabraConSpec @[5] {
	name="Input_EC_in";
	desc=;
	unique{ wt_sig;lrate;	};
	children {
	 name="children";
	 el_typ=LeabraConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.001: err=0.999: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=1: thresh=0.001: };
	rel_net_adapt {on=0: trg_fm_input=0.85: trg_fm_output=0.15: trg_lateral=0: trg_sum=1: tol_lg=0.05: tol_sm=0.2: rel_lrate=0.2: };
       };
      };
      rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
      learn_rule=CTLEABRA_XCAL;
      inhib=0;
      wt_scale {abs=1: rel=1: sem_extra=2: };
      diff_scale_p=0;
      wt_scale_p {abs=1: rel=1: sem_extra=2: };
      wt_scale_init {init=0: abs=1: rel=1: };
      learn=1;
      lrate=0.02;
      cur_lrate=0.02;
      lrs_value=EPOCH;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      ignore_unlearnable=1;
      wt_sig {gain=6: off=1: dwt_norm=0: };
      stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
      lmix {hebb=0.005: err=0.995: err_sb=1: };
      xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      savg_cor {cor=1: thresh=0.001: };
      rel_net_adapt {on=0: trg_fm_input=0.85: trg_fm_output=0.15: trg_lateral=0: trg_sum=1: tol_lg=0.05: tol_sm=0.2: rel_lrate=0.2: };
     };
     XCalCHLConSpec @[2] {
      name="HippoConSpecs";
      desc=;
      unique{ lrate;lmix;      };
      children {
       name="children";
       el_typ=LeabraBiasSpec;
       el_def=0;
       LeabraBiasSpec @[0] {
	name="HippoBiasSpec";
	desc=;
	unique{ rnd;wt_limits;wt_scale;wt_scale_init;	};
	children {
	 name="children";
	 el_typ=LeabraBiasSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
	wt_limits {type=NONE: min=-1: max=5: sym=0: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.2;
	cur_lrate=0.2;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.001: err=0.999: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {on=0: trg_fm_input=0.85: trg_fm_output=0.15: trg_lateral=0: trg_sum=1: tol_lg=0.05: tol_sm=0.2: rel_lrate=0.2: };
	dwt_thresh=0.1;
       };
       XCalCHLConSpec @[1] {
	name="PerfPath";
	desc=;
	unique{ wt_scale;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.2;
	cur_lrate=0.2;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.05: err=0.95: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {on=0: trg_fm_input=0.85: trg_fm_output=0.15: trg_lateral=0: trg_sum=1: tol_lg=0.05: tol_sm=0.2: rel_lrate=0.2: };
	use_chl=1;
       };
       XCalCHLConSpec @[2] {
	name="Mossy";
	desc=;
	unique{ rnd;wt_scale;lrate;rel_net_adapt;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.9: var=0.01: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=8: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0;
	cur_lrate=0;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.05: err=0.95: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {on=0: trg_fm_input=0.85: trg_fm_output=0.15: trg_lateral=0: trg_sum=1: tol_lg=0.05: tol_sm=0.2: rel_lrate=0.2: };
	use_chl=1;
       };
       XCalCHLConSpec @[3] {
	name="CA3_CA3";
	desc=;
	unique{ wt_scale;rel_net_adapt;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.2;
	cur_lrate=0.2;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.05: err=0.95: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {on=0: trg_fm_input=0.85: trg_fm_output=0.15: trg_lateral=0: trg_sum=1: tol_lg=0.05: tol_sm=0.2: rel_lrate=0.2: };
	use_chl=1;
       };
       XCalCHLConSpec @[4] {
	name="CA3_CA1";
	desc=;
	unique{ lrate;lmix;wt_scale;	};
	children {
	 name="children";
	 el_typ=XCalCHLConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	learn_rule=CTLEABRA_XCAL;
	inhib=0;
	wt_scale {abs=1: rel=1: sem_extra=2: };
	diff_scale_p=0;
	wt_scale_p {abs=1: rel=1: sem_extra=2: };
	wt_scale_init {init=0: abs=1: rel=1: };
	learn=1;
	lrate=0.05;
	cur_lrate=0.05;
	lrs_value=EPOCH;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	ignore_unlearnable=1;
	wt_sig {gain=6: off=1: dwt_norm=0: };
	stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
	lmix {hebb=0.005: err=0.995: err_sb=1: };
	xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	savg_cor {cor=0.4: thresh=0.001: };
	rel_net_adapt {on=0: trg_fm_input=0.85: trg_fm_output=0.15: trg_lateral=0: trg_sum=1: tol_lg=0.05: tol_sm=0.2: rel_lrate=0.2: };
	use_chl=1;
       };
      };
      rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
      learn_rule=CTLEABRA_XCAL;
      inhib=0;
      wt_scale {abs=1: rel=1: sem_extra=2: };
      diff_scale_p=0;
      wt_scale_p {abs=1: rel=1: sem_extra=2: };
      wt_scale_init {init=0: abs=1: rel=1: };
      learn=1;
      lrate=0.2;
      cur_lrate=0.02;
      lrs_value=EPOCH;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      ignore_unlearnable=1;
      wt_sig {gain=6: off=1: dwt_norm=0: };
      stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
      lmix {hebb=0.05: err=0.95: err_sb=1: };
      xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      savg_cor {cor=0.4: thresh=0.001: };
      rel_net_adapt {on=0: trg_fm_input=0.85: trg_fm_output=0.15: trg_lateral=0: trg_sum=1: tol_lg=0.05: tol_sm=0.2: rel_lrate=0.2: };
      use_chl=1;
     };
     ThetaPhaseLayerSpec @[3] {
      name="HippoLayerSpec";
      desc=;
      unique{       };
      children {
       name="children";
       el_typ=ECoutLayerSpec;
       el_def=0;
       ECoutLayerSpec @[0] {
	name="EC_out";
	desc=;
	unique{ inhib;clamp;decay;kwta;	};
	children {
	 name="children";
	 el_typ=ECinLayerSpec;
	 el_def=0;
	 ECinLayerSpec @[0] {
	  name="EC_in";
	  desc=;
	  unique{ decay;clamp;inhib;kwta;	  };
	  children {
	   name="children";
	   el_typ=ECinLayerSpec;
	   el_def=0;
	  };
	  inhib_group=ENTIRE_LAYER;
	  inhib {type=KWTA_INHIB: kwta_pt=0.5: gi=1.7: ff=1: fb=0.5: self_fb=0: prv_trl_ff=0: prv_phs_ff=0: dt=0.7: up_immed=0: ff0=0.1: min_i=0: };
	  kwta {k_from=USE_K: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	  gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	  lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	  unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	  clamp {hard=1: gain=0.9: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	  decay {event=1: phase=0: phase2=0: };
	  cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	  ct_inhib_mod {manual_sravg=0: sravg_delay=0: use_sin=0: burst_i=0.02: trough_i=0.02: use_fin=0: inhib_i=0: };
	  tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	  adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	  abs_net_adapt {on=0: trg_net=0.5: tol=0.1: abs_lrate=0.2: };
	  auto_m_cycles=30;
	 };
	};
	inhib_group=ENTIRE_LAYER;
	inhib {type=KWTA_INHIB: kwta_pt=0.5: gi=1.7: ff=1: fb=0.5: self_fb=0: prv_trl_ff=0: prv_phs_ff=0: dt=0.7: up_immed=0: ff0=0.1: min_i=0: };
	kwta {k_from=USE_K: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.999: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {manual_sravg=0: sravg_delay=0: use_sin=0: burst_i=0.02: trough_i=0.02: use_fin=0: inhib_i=0: };
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {on=0: trg_net=0.5: tol=0.1: abs_lrate=0.2: };
	auto_m_cycles=30;
       };
       LeabraLayerSpec @[1] {
	name="DG";
	desc=;
	unique{ kwta;decay;inhib;	};
	children {
	 name="children";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {type=KWTA_AVG_INHIB: kwta_pt=0.9: gi=20: ff=1: fb=0.5: self_fb=0: prv_trl_ff=0: prv_phs_ff=0: dt=0.7: up_immed=0: ff0=0.1: min_i=0: };
	kwta {k_from=USE_PCT: k=12: pct=0.01: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {manual_sravg=0: sravg_delay=0: use_sin=0: burst_i=0.02: trough_i=0.02: use_fin=0: inhib_i=0: };
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {on=0: trg_net=0.5: tol=0.1: abs_lrate=0.2: };
       };
       CA3LayerSpec @[2] {
	name="CA3";
	desc=;
	unique{ kwta;decay;inhib;	};
	children {
	 name="children";
	 el_typ=CA3LayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {type=KWTA_AVG_INHIB: kwta_pt=0.7: gi=3: ff=1: fb=0.5: self_fb=0: prv_trl_ff=0: prv_phs_ff=0: dt=0.7: up_immed=0: ff0=0.1: min_i=0: };
	kwta {k_from=USE_PCT: k=12: pct=0.06: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {manual_sravg=0: sravg_delay=0: use_sin=0: burst_i=0.02: trough_i=0.02: use_fin=0: inhib_i=0: };
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {on=0: trg_net=0.5: tol=0.1: abs_lrate=0.2: };
	auto_m_cycles=30;
       };
       CA1LayerSpec @[3] {
	name="CA1";
	desc=;
	unique{ gp_kwta;decay;inhib;	};
	children {
	 name="children";
	 el_typ=CA1LayerSpec;
	 el_def=0;
	};
	inhib_group=ENTIRE_LAYER;
	inhib {type=KWTA_AVG_INHIB: kwta_pt=0.7: gi=2.2: ff=1: fb=0.5: self_fb=0: prv_trl_ff=0: prv_phs_ff=0: dt=0.7: up_immed=0: ff0=0.1: min_i=0: };
	kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	gp_kwta {k_from=USE_PCT: k=12: pct=0.1: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
	lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
	clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
	decay {event=1: phase=0: phase2=0: };
	cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
	ct_inhib_mod {manual_sravg=0: sravg_delay=0: use_sin=0: burst_i=0.02: trough_i=0.02: use_fin=0: inhib_i=0: };
	tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
	adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	abs_net_adapt {on=0: trg_net=0.5: tol=0.1: abs_lrate=0.2: };
	auto_m_cycles=30;
	recall_decay=1;
	use_test_mode=1;
       };
      };
      inhib_group=ENTIRE_LAYER;
      inhib {type=KWTA_AVG_INHIB: kwta_pt=0.7: gi=2: ff=1: fb=0.5: self_fb=0: prv_trl_ff=0: prv_phs_ff=0: dt=0.7: up_immed=0: ff0=0.1: min_i=0: };
      kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
      gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
      lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
      clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
      decay {event=1: phase=1: phase2=0: };
      cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
      ct_inhib_mod {manual_sravg=0: sravg_delay=0: use_sin=0: burst_i=0.02: trough_i=0.02: use_fin=0: inhib_i=0: };
      tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
      adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
      abs_net_adapt {on=0: trg_net=0.5: tol=0.1: abs_lrate=0.2: };
      auto_m_cycles=30;
     };
     BaseSpec_Group @.gp[0] {
      name="HippoPrjns";
      el_typ=FullPrjnSpec;
      el_def=0;
      FullPrjnSpec @[0] {
       name="FullPrjn";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=FullPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
      };
      OneToOnePrjnSpec @[1] {
       name="OneToOne";
       desc=;
       unique{ self_con;       };
       children {
	name="children";
	el_typ=OneToOnePrjnSpec;
	el_def=0;
       };
       self_con=1;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       n_conns=-1;
       recv_start=0;
       send_start=0;
       use_gp=0;
      };
      GpOneToOnePrjnSpec @[2] {
       name="GpOneToOne";
       desc=;
       unique{ self_con;       };
       children {
	name="children";
	el_typ=GpOneToOnePrjnSpec;
	el_def=0;
       };
       self_con=1;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       n_conns=-1;
       recv_start=0;
       send_start=0;
       use_gp=0;
      };
      UniformRndPrjnSpec @[3] {
       name="RandomPerfPath";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=UniformRndPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       p_con=0.25;
       sym_self=1;
       same_seed=0;
       rndm_seed {
	name="rndm_seed";
	rnd_seed=3161481824;
       };
      };
      UniformRndPrjnSpec @[4] {
       name="UniformRndMossy";
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=UniformRndPrjnSpec;
	el_def=0;
       };
       self_con=0;
       init_wts=0;
       add_rnd_wts=0;
       add_rnd_wts_scale=1;
       p_con=0.05;
       sym_self=1;
       same_seed=0;
       rndm_seed {
	name="rndm_seed";
	rnd_seed=3161481824;
       };
      };
     };
    };
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=27: y=54: z=3: };
    max_disp_size2d {x=30: y=193: };
    LeabraLayer @[0] {
     name="Input";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     disp_scale=1;
     un_geom {x=1: y=54: n_not_xy=0: n=54: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=1: y=54: n_not_xy=0: n=54: };
     disp_geom {x=1: y=54: n_not_xy=0: n=54: };
     scaled_disp_geom {x=1: y=54: n_not_xy=0: n=54: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[0][0].projections[1];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.networks[0].specs.gp[0][0]$$: };
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {fm_input=-1: fm_output=-1: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=.networks[0].specs[0]$$: };
    };
    Layer_Group @.gp[0] {
     name="Hippocampus";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=0: y=0: z=0: };
     pos2d {x=0: y=64: };
     max_disp_size {x=27: y=54: z=3: };
     max_disp_size2d {x=30: y=129: };
     LeabraLayer @[0] {
      name="EC_in";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=13: y=0: z=0: };
      pos2d {x=0: y=0: };
      disp_scale=1;
      un_geom {x=1: y=54: n_not_xy=0: n=54: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=54: n_not_xy=0: n=54: };
      disp_geom {x=1: y=54: n_not_xy=0: n=54: };
      scaled_disp_geom {x=1: y=54: n_not_xy=0: n=54: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_EC_out";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[0][1]$;
	spec {type=OneToOnePrjnSpec: spec=.networks[0].specs.gp[0].gp[0][1]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.networks[0].specs.gp[0][1].children[4]$$: };
	recv_idx=0;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.898: b=0.498: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @[1] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.networks[0].layers[0]$$;
	spec {type=OneToOnePrjnSpec: spec=$.networks[0].specs.gp[0].gp[0][1]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[0][1].children[5]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[0][2].projections[0];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[0][3].projections[0];
       Projection_Group @. = [2] = LeabraPrjn .networks[0].layers.gp[0][4].projections[0];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs.gp[0][0]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {fm_input=-1: fm_output=-1: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus entorhinal cortex";
      voxel_fill_pct=1;
      spec {type=ECinLayerSpec: spec=$.networks[0].specs.gp[0][3].children[0].children[0]$: };
     };
     LeabraLayer @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="enc_sse": value=1.867765: val_type_fixed=0: };
       UserDataItem @[1] {name="enc_norm_err": value=0.375: val_type_fixed=0: };
      };
      name="EC_out";
      desc=;
      flags=0;
      layer_type=TARGET;
      pos {x=26: y=0: z=0: };
      pos2d {x=0: y=64: };
      disp_scale=1;
      un_geom {x=1: y=54: n_not_xy=0: n=54: };
      unit_groups=0;
      virt_groups=0;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=54: n_not_xy=0: n=54: };
      disp_geom {x=1: y=54: n_not_xy=0: n=54: };
      scaled_disp_geom {x=1: y=54: n_not_xy=0: n=54: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_CA1";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[0][4]$;
	spec {type=GpOneToOnePrjnSpec: spec=.networks[0].specs.gp[0].gp[0][2]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.networks[0].specs.gp[0][1].children[1]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[0][0].projections[0];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[0][4].projections[1];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs.gp[0][0]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {fm_input=-1: fm_output=-1: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus entorhinal cortex";
      voxel_fill_pct=1;
      spec {type=ECoutLayerSpec: spec=$.networks[0].specs.gp[0][3].children[0]$: };
     };
     LeabraLayer @[2] {
      name="DG";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=0: y=0: z=1: };
      pos2d {x=3: y=89: };
      disp_scale=1;
      un_geom {x=20: y=20: n_not_xy=0: n=400: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=20: y=20: n_not_xy=0: n=400: };
      disp_geom {x=20: y=20: n_not_xy=0: n=400: };
      scaled_disp_geom {x=20: y=20: n_not_xy=0: n=400: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_EC_in";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[0][0]$;
	spec {type=UniformRndPrjnSpec: spec=.networks[0].specs.gp[0].gp[0][3]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.networks[0].specs.gp[0][2].children[1]$$: };
	recv_idx=0;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.898: b=0.494: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[0][3].projections[1];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs.gp[0][0]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {fm_input=-1: fm_output=-1: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus dentate gyrus";
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.networks[0].specs.gp[0][3].children[1]$$: };
     };
     LeabraLayer @[3] {
      name="CA3";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=3: y=0: z=2: };
      pos2d {x=3: y=121: };
      disp_scale=1;
      un_geom {x=10: y=8: n_not_xy=0: n=80: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=10: y=8: n_not_xy=0: n=80: };
      disp_geom {x=10: y=8: n_not_xy=0: n=80: };
      scaled_disp_geom {x=10: y=8: n_not_xy=0: n=80: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_EC_in";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[0][0]$;
	spec {type=UniformRndPrjnSpec: spec=$.networks[0].specs.gp[0].gp[0][3]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=$.networks[0].specs.gp[0][2].children[1]$: };
	recv_idx=0;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.898: b=0.494: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @[1] {
	name="Fm_DG";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[0][2]$;
	spec {type=UniformRndPrjnSpec: spec=.networks[0].specs.gp[0].gp[0][4]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.networks[0].specs.gp[0][2].children[2]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.898: b=0.494: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @[2] {
	name="Fm_CA3";
	off=0;
	disp=1;
	from_type=SELF;
	from=$.networks[0].layers.gp[0][3]$;
	spec {type=FullPrjnSpec: spec=.networks[0].specs.gp[0].gp[0][0]$$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.networks[0].specs.gp[0][2].children[3]$$: };
	recv_idx=2;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.898: b=0.494: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[0][3].projections[2];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[0][4].projections[2];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs.gp[0][0]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {fm_input=-1: fm_output=-1: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus cornu ammonis";
      voxel_fill_pct=1;
      spec {type=CA3LayerSpec: spec=.networks[0].specs.gp[0][3].children[2]$$: };
     };
     LeabraLayer @[4] {
      name="CA1";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos {x=16: y=0: z=2: };
      pos2d {x=20: y=116: };
      disp_scale=1;
      un_geom {x=10: y=10: n_not_xy=0: n=100: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=10: y=10: n_not_xy=0: n=100: };
      disp_geom {x=10: y=10: n_not_xy=0: n=100: };
      scaled_disp_geom {x=10: y=10: n_not_xy=0: n=100: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_EC_in";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[0][0]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[0].gp[0][2]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.networks[0].specs.gp[0][1].children[0]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @[1] {
	name="Fm_EC_out";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[0][1]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[0].gp[0][2]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=HippoEncoderConSpec: spec=.networks[0].specs.gp[0][1].children[2]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
	trg_netin_rel=-1;
       };
       LeabraPrjn @[2] {
	name="Fm_CA3";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[0][3]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0].gp[0][0]$: };
	con_type=LeabraCon;
	recvcons_type=LeabraRecvCons;
	sendcons_type=LeabraSendCons;
	con_spec {type=XCalCHLConSpec: spec=.networks[0].specs.gp[0][2].children[4]$$: };
	recv_idx=2;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.898: b=0.494: a=1: };
	trg_netin_rel=-1;
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[0][1].projections[0];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs.gp[0][0]$: };
      dmem_dist=DMEM_DIST_DEFAULT;
      dist {fm_input=-1: fm_output=-1: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Hippocampus cornu ammonis";
      voxel_fill_pct=1;
      spec {type=CA1LayerSpec: spec=.networks[0].specs.gp[0][3].children[3]$$: };
     };
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=0;
   auto_build=AUTO_BUILD;
   brain_atlas_name="Talairach";
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   sse_unit_avg=0;
   sse_sqrt=0;
   cnt_err_tol=0;
   compute_prerr=0;
   threads {interleave=1: ignore_lay_sync=0: };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=742;
   n_cons=38948;
   max_prjns=3;
   max_disp_size {x=27: y=54: z=3: };
   max_disp_size2d {x=30: y=193: };
   learn_rule=CTLEABRA_XCAL;
   ti_mode=0;
   phase_order=MINUS_PLUS;
   no_plus_test=1;
   sequence_init=DO_NOTHING;
   phase_max=1;
   time_inc=1;
   cycle_max=80;
   mid_minus_cycle=-1;
   min_cycles=50;
   min_cycles_phase2=0;
   dwt_norm_enabled=0;
   ct_time {use=1: minus=80: plus=20: inhib=1: n_avg_only_epcs=0: total_cycles=101: inhib_start=100: };
   ct_sravg {manual=0: start=60: end=1: interval=1: plus_s_st=19: plus_s_only=0: force_con=0: };
   ct_sin_i {start=30: duration=20: n_pi=2: burst_i=0: trough_i=0: };
   ct_fin_i {start=20: end=25: inhib_i=0: };
   ct_lrn_trig {plus_lrn_cyc=-1: davg_dt=0.1: davg_s_dt=0.05: davg_m_dt=0.03: davg_l_dt=0.0005: thr_min=0: thr_max=0.5: loc_max_cyc=8: loc_max_dec=0.01: lrn_delay=40: lrn_refract=100: davg_l_init=0: davg_max_init=0.001: davg_time=10: davg_s_time=20: davg_m_time=33.33334: davg_l_time=2000: lrn_delay_inc=0.025: lrn_refract_inc=0.01: };
   lrn_trig {davg=0: davg_s=0: davg_m=0: davg_smd=0: davg_l=0: davg_max=0.001: cyc_fm_inc=0: cyc_fm_dec=0: loc_max=0: lrn_max=0: lrn_trig=0: lrn=0: };
   net_misc {cyc_syn_dep=0: syn_dep_int=20: };
   maxda_stopcrit=-1;
   trg_max_act_stopcrit=1;
   norew_val=0.5;
   off_errs=1;
   on_errs=1;
   cos_err_lrn_thr=-1;
   cos_diff_on=0;
   cos_diff_auto=1;
  };
 };
};
